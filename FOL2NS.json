{"input":"¬WantToBeAddictedTo(rina, caffeine) ∨ (¬AwareThatDrug(rina, caffeine))","output":"Rina doesn't want to be addicted to caffeine or is unaware that caffeine is a drug."}
{"input":"¬WantToBeAddictedTo(rina, caffeine) ⊕ ¬AwareThatDrug(rina, caffeine)","output":"Rina eith doesn't want to be addicted to caffeine or is unaware that caffeine is a drug."}
{"input":"DrinkRegularly(rina, coffee)  ⊕ IsUnawareThatCaffeineIsADrug(rina)","output":"Rina either regularly drinks coffee or is unaware that caffeine is a drug."}
{"input":"(DoNotWantToBeAddictedToCaffeine(rina) ⊕ ¬AwareThatDrug(rina, caffeine)) → ¬(¬WantToBeAddictedTo(rina, caffeine) ∧ DrinkRegularly(rina, coffee))","output":"If Rina either doesn't want to be addicted to caffeine and is unaware that caffeine is a drug, or neither doesn't want to be addicted to caffeine nor is unaware that caffeine is a drug, then Rina doesn't want to be addicted to caffeine and regularly drinks coffee."}
{"input":"Love(miroslav, music)","output":"Miroslav Venhoda loved music."}
{"input":"∃x ∃y (Czech(x) ∧ PublishedBook(x, y, year1946))","output":"A Czech published a book in 1946."}
{"input":"∀x (ChoralConductor(x) → ¬SpecializeInPerformanceOf(x, renaissanceMusic))","output":"No choral conductor specialized in the performance of Renaissance."}
{"input":"Eel(seaEel)","output":"The sea eel is an eel."}
{"input":"Bacteria(seaEel)","output":"The sea eel is bacteria."}
{"input":"Multicellular(seaEel) ∨ Bacteria(seaEel)","output":"The sea eel is multicellular or is bacteria."}
{"input":"∃x (Building(x) ∧ Five-Story(x) ∧ ConstructedIn(x, year1915))","output":"A five-story building is built in 1915."}
{"input":"LocatedIn(blakeMcFallCompanyBuilding, portland)","output":"The Blake McFall Company Building is located in Portland, Oregon."}
{"input":"StartCurrentJobIn(john, year1990)","output":"John started his current job in 1990."}
{"input":"SatIn(williamDickinson, parliament)","output":"William Dickinson did not get a seat in Parliament."}
{"input":"∃x ∃y (Attended(williamDickinson, x) ∧ Highschool(x) ∧ LocatedIn(x, unitedKingdom) ∧ Attended(williamDickinson, y) ∧ University(y) ∧ LocatedIn(y, unitedKingdom))","output":"William Dickinson went to schools located in the United Kingdom for both high school and university."}
{"input":"∃x (Attended(williamDickinson, x) ∧ University(x) ∧ LocatedIn(x, unitedKingdom))","output":"William Dickinson attended university in the United Kingdom."}
{"input":"SatIn(williamDickinson, houseOfCommons)","output":"William Dickinson sat in the House of Commons."}
{"input":"Know(danil, languageA)","output":"Danil knows LanguageA."}
{"input":"GoToEveryWeek(lily, cinema)","output":"Lily goes to cinemas every week."}
{"input":"¬GoToEveryWeek(lily, cinema)","output":"Lily does not go to cinemas every week."}
{"input":"GoToEveryWeek(lily, cinema) ∨ EligibleForThreeFreeMoviesWithoutAdditionalFees(lily)","output":"Lily goes to cinemas every week or watches 3 movies every week without any additional fees."}
{"input":"(GoToEveryWeek(lily, cinema) ∧ SubscribedTo(lily, hBO)) → (EligibleForThreeFreeMoviesEveryWeek(lily) ⊕ Prefer(lily, tVSeries))","output":"If Lily does not both go to cinemas every week and subscribe to HBO service, then Lily is either available to watch 3 movies every week without any additional fees or she prefers TV more."}
{"input":"(EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(lily) ∧ WatchIn(lily, tV, cinema)) → (GoToEveryWeek(lily, cinema) ∧ Prefer(lily, tVSeries))","output":"If Lily is available to watch 3 movies every week without any additional fees and she watches TV series in cinemas, then she goes to cinemas every week and prefers TV series more."}
{"input":"RankHigherThan(realMadrid, barcelona)","output":"Real Madrid ranks higher than Barcelona."}
{"input":"RankHigherThan(barcelona, realMadrid)","output":"Barcelona ranks higher than Real Madrid."}
{"input":"UseZipCode(tom, num98199)","output":"Tom uses the zip code 98199."}
{"input":"¬UseZipCode(tom, num98199)","output":"Tom doesn't use the zip code 98199."}
{"input":"ResidentOf(tom, washington)","output":"Tom is a citizen of Washington."}
{"input":"ResidentOf(daniel, lawtonPark)","output":"Daniel is a citizen of Lawton Park."}
{"input":"Suspended(tiffanyTAlston)","output":"Tiffany T. Alston was suspended from the Maryland House of Delegates."}
{"input":"¬Suspended(tiffanyTAlston)","output":"Tiffany T. Alston was not suspended from the Maryland House of Delegates."}
{"input":"Prison(tiffanyTAlston)","output":"Tiffany T. Alston went to prison for stealing government funds."}
{"input":"∀x (Sting(stonefish, x) ∧ ¬UseAntivenomOn(x) → CauseDeathTo(stonefish, x))","output":"If a stonefish stings you and you don’t use an antivenom, it can cause death to you."}
{"input":"∃x ∃y (Fish(x) ∧ Sting(x, y) ∧ ¬Treated(y) → CauseDeathTo(x, y))","output":"Stings of some fish can cause death if not treated."}
{"input":"∀x (SteppedOnBy(stonefish, x) ∧ ApplyHeatTo(x)  → CauseDeathTo(stonefish, x))","output":"If you step on a stonefish and apply heat to the affected area, it can cause death to you."}
{"input":"In(l-2021, library)","output":"The monitor L-2021 is in the library."}
{"input":"In(l-2021, library) ⊕ ProducedBy(l-2021, lG)","output":"The monitor L-2021 is either in the library or produced by LG."}
{"input":"Have(l-2021, typeCPort) ⊕ ProducedBy(l-2021, lG)","output":"The L-2021 monitor either has a type-c port or is produced by LG."}
{"input":"¬(In(l-2021, library) ⊕ ProducedBy(l-2021, lG)) → (¬Have(x, typeCPort) ∧ ¬ProducedBy(x, lG))","output":"If the L-2021 monitor is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG."}
{"input":"¬(ProducedBefore(l-2021, year2010) ⊕ ProducedBy(l-2021, lG)) → (In(l-2021, library) ⊕ ProducedBy(l-2021, lG))","output":"If the monitor L-2021 is either produced by LG and produced before 2010 or neither produced by LG nor produced before 2010,  then L-2021 is either in the library or produced by LG."}
{"input":"Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)","output":"PSO J318.5−22 is an orphan planet."}
{"input":"(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∨ ¬SunAs(pSOJ318.5-22, star)","output":"PSO J318.5−22 is an orphan planet or it does not have the Sun as its star, or both."}
{"input":"(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∨ ¬SunAs(pSOJ318.5-22, star) → (¬(Planet(pSOJ318.5-22) ∧ Orphan(pSOJ318.5-22)) ∧ ¬SunAs(pSOJ318.5-22, star))","output":"If PSO J318.5−22 is an orphan planet or it does not have the Sun as the star, or both, then PSO J318.5−22 neither is an orphan planet nor does it have the Sun as the star."}
{"input":"∀x (Project(x) ∧ Do(sam, x) ∧ WrittenIn(x, cplusplus))","output":"The project Sam is doing is written in C++."}
{"input":"∀x (Song(x) ∧ Play(sam, x) ∧ Titled(x, perfect))","output":"The song Sam is playing is titled \"Perfect\"."}
{"input":"∀x (Titled(x, perfect) → Play(sam, x))","output":"If a song is titled \"Perfect\", Sam will play it."}
{"input":"∃x ∃y (Pet(x) ∧ Pet(y) ∧ ¬Have(x, fur) ∧ ¬Have(y, fur))","output":"Some pets do not have fur."}
{"input":"ComputerProgram(tikTok)","output":"TikTok is a computer program."}
{"input":"IdealFor(tikTok, preteen) ⊕ ComputerProgram(tikTok)","output":"TikTok is either ideal for preteens or a computer program."}
{"input":"¬Contain(tikTok, chatFeature) ∨ ¬ComputerProgram(tikTok))","output":"TikTok is does not have chat features or it is not a computer program."}
{"input":"Contain(tikTok, chatFeature) ⊕ ComputerProgram(tikTok))","output":"TikTok either has chat features or is a computer program."}
{"input":"∀x (On(x, kentuckyRoute32) → ¬UnincorporatedCommunity(x))","output":"There are no unincorporated communities along Kentucky Route 32."}
{"input":"∃x (UnincorporatedCommunity(x) ∧ LocatedIn(x, elliotCounty))","output":"There is an unincorporated community located in Elliot County."}
{"input":"CollegeStudent(susan)","output":"Susan is a college student."}
{"input":"Like(susan, independence) ∧ Diligent(susan)","output":"Susan likes independence and is diligent."}
{"input":"¬(Like(susan, independence) ∧ Diligent(susan))","output":"Susan is not both diligent and likes independence."}
{"input":"Music(insideOut, punk)","output":"Inside Out was a punk band."}
{"input":"∃x (Band(x, insideOut) ∧ Play(x, bass))","output":"A musician from Inside Out plays bass."}
{"input":"ProfessionalAthlete(amy)","output":"Amy is a professional athlete."}
{"input":"¬(FullTimeScientist(amy) ∨ OlympicGoldMedalWinner(amy))","output":"Amy is neither a full-time scientist nor an Olympic gold medal winner."}
{"input":"¬OlympicGoldMedalWinner(amy) → NobelPhysicsLaureate(amy)","output":"If Amy is not an Olympic gold medal winner, then Amy is a Nobel physics laureate."}
{"input":"Is(cherry, apple)","output":"The cherries are apples."}
{"input":"Contain(cherry, vitaminC) ⊕ On(cherry, warningList)","output":"The cherries either contain some amount of vitamin C or are on a warning list."}
{"input":"On(cherry, warningList) ⊕ RedFruit(cherry)","output":"The cherries are either on a warning list or are red."}
{"input":"BeneficialTo(cherry, people) ⊕ On(cherry, warningList))) → ¬RedFruit(cherry)","output":"If the cherries are either healthy or are on a warning list, then they are not red."}
{"input":"On(cherry, warningList) ⊕ RedFruit(cherry)) → ¬(BeneficialTo(cherry, people) ∧ Contain(cherry, vitaminC)","output":"If the cherries are either on a warning list or are red, then they are not healthy and do not contain any amount of vitamin C."}
{"input":"HighIncome(james)","output":"James has a high income."}
{"input":"¬HighIncome(james)","output":"James does not have a high income."}
{"input":"Student(james)","output":"James is a student."}
{"input":"MeansToDestination(x, drive) ∨ Student(james)","output":"James drives to his destination or he is a student."}
{"input":"MeansToDestination(x, drive) ⊕ Student(james)","output":"James either drives to their destination or is a student."}
{"input":"(MeansToDestination(x, drive) ⊕ Student(james)) → (HighIncome(james) ∧ Student(james))","output":"If James either drives to his destination or is a student, then he has a high income and is a student."}
{"input":"¬ArdentCommunist(ho)","output":"Ho is not an ardent communist."}
{"input":"Investor(ho) ∨ (¬ArdentCommunist(ho))","output":"Ho is an investor or is not an ardent communist."}
{"input":"∀x (TelevisionStar(x) → Have(x, goodBusinessSense))","output":"All television stars have good business sense."}
{"input":"GoodAt(james, planning)","output":"James is good at planning."}
{"input":"GoodAt(james, chemistry) ∧ GoodAt(james, math)","output":"James is good at math and chemistry."}
{"input":"Failed(james, james) ∧ GoodAt(james, math)","output":"James failed the class and is good at math."}
{"input":"(GoodAt(james, chemistry) ∨ Failed(james, theClass)) → (GoodAt(james, planning) ⊕ GoodAt(james, math))","output":"If James is good at Chemistry or failed the class, then James is either good at planning or good at math."}
{"input":"Easy(twosum)","output":"2Sum is a Leetcode problem at the easy level."}
{"input":"Recommended(foursum)","output":"4Sum is a Leetcode problem recommended to the novice."}
{"input":"∃y(GreaterThan(y, percent20) ∧ ACRate(2Sum,y))","output":"2Sum has an AC rate higher than 20 percent."}
{"input":"Spend(sarah, money)","output":"Sarah will spend money this weekend."}
{"input":"Outgoing(carol) ∧ Sprited(carol)","output":"Carol is outgoing and very spirited."}
{"input":"PreTeen(carol) ∨ YoungChild(carol)","output":"Carol is a preteen or a young child."}
{"input":"¬((∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) ∨ (Outgoing(carol) ∧ Sprited(carol)))","output":"Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited."}
{"input":"SatinFinish(rougeDiorColoredLipBalm999)","output":"ROUGE Dior Colored Lip Balm 999 has a satin finish."}
{"input":"Refillable(rougeDiorColoredLipBalm999) ∧ RosewoodInDescription(rougeDiorColoredLipBalm999)","output":"ROUGE Dior Colored Lip Balm 999 has a satin finish and has \"rosewood\" in its official description."}
{"input":"Refillable(rougeDiorColoredLipBalm999) ⊕ RosewoodInDescription(rougeDiorColoredLipBalm999)","output":"ROUGE Dior Colored Lip Balm 999 either is refillable or has \"rosewood\" in its official description."}
{"input":"¬((Lipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ VelvetFinish(rougeDiorColoredLipBalm999) ∧ Refillable(rougeDiorColoredLipBalm999)) → (¬Refillable(rougeDiorColoredLipBalm999) ∧ ¬RosewoodInDescription(rougeDiorColoredLipBalm999)))","output":"If ROUGE Dior Colored Lip Balm 999 is not both a velvet finish ipstick in the set and refillable, then it neither is refillable nor has \"rosewood\" in its official description."}
{"input":"(Refillable(rougeDiorColoredLipBalm999) ∧ RosewoodInDescription(rougeDiorColoredLipBalm999)) —> (VelvetFinish(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999))","output":"If ROUGE Dior Colored Lip Balm 999 is refillable and has \"rosewood\" in its official description, then it either has a velvet-finish or has \"rosewood\" in its official description."}
{"input":"(¬RosewoodInDescription(rougeEDiorColoredLipBalm999) ⊕ Refillable(rougeDiorColoredLipBalm999)) → RosewoodInDescription(rougeDiorColoredLipBalm999)","output":"If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it has \"rosewood\" in its official description."}
{"input":"(RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ Refillable(rougeDiorColoredLipBalm999)) → ¬(SatinFinish(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999))","output":"If ROUGE Dior Colored Lip Balm 999 either does not have \"rosewood\" in its official description or is refillable, then it neither has a satin-finish nor has \"rosewood\" in its official description."}
{"input":"(Refillable(rougeDiorColoredLipBalm999) ∨ RosewoodInDescription(rougeDiorColoredLipBalm999)) → (Refillable(rougeEDiorColoredLipBalm999) ⊕ RosewoodInDescription(rougeDiorColoredLipBalm999))","output":"If ROUGE Dior Colored Lip Balm 999 is refillable or has \"rosewood\" in its official description, then it either is refillable or has \"rosewood\" in its official description.."}
{"input":"∃x ∃y (Conservative(x) ∧ Conservative(y) ∧ ¬SenateRepublican(x) ∧ ¬SenateRepublican(y) ∧ ¬(x=y))","output":"Some conservatives are not Senate Republicans."}
{"input":"KnicksPlayer(jim)","output":"Jim is a Knicks player."}
{"input":"¬KnicksPlayer(jim)","output":"Jim is not a Knicks player."}
{"input":"Athlete(jim)","output":"Jim is an athlete."}
{"input":"Pirate(nancy)","output":"Nancy is a pirate."}
{"input":"¬(Pirate(nancy) ⊕ Toddler(nancy))","output":"Nancy is either both a pirate and a toddler, or neither a pirate nor a toddler."}
{"input":"¬(Pirate(nancy) ⊕ Toddler(nancy)) → Young(nancy) ∧ Kid(nancy)","output":"If Nancy is not either a pirate or a toddler, then she is young and is a kid."}
{"input":"From(lanaWilson, unitedStates) ∧ Filmmaker(lanaWilson)","output":"Lana Wilson is a US filmmaker."}
{"input":"¬∃x(Filmmaker(x) ∧ From(x, kirkland) ∧ DirectedBy(missAmericana, x))","output":"Miss Americana is not directed by a filmmaker from Kirkland."}
{"input":"FilmmakerAward(lanaWilson, theIndependentSpiritAwardForBestDocumentary)","output":"Lana Wilson has won the Independent Spirit Award."}
{"input":"∃x (Bear(x) ∧ ¬Wild(x))","output":"Not all bears are wild."}
{"input":"King(elizabeth)","output":"Elizabeth is a king."}
{"input":"HavePower(elizabeth)","output":"Elizabeth has power."}
{"input":"Leader(elizabeth)","output":"Elizabeth is a leader of a country for life."}
{"input":"Have(bunny, y) ∧ Regular(y) ∧ NineToFiveJob(y)","output":"Bunny does not have a regular 9-5 job."}
{"input":"LiveIn(bunny, california) ∧ AttendRegularly(bunny, yogaClass)","output":"Bunny went to Clay's school and she lives in California and attends yoga classes regularly."}
{"input":"¬(Prefer(bunny, workingAtHome, goingToTheOffice) ∨ (LiveIn(bunny, california) ∧ AttendRegularly(bunny, yogaClass)))","output":"Bunny went to Clay's school and she neither prefers working at home over going to the office nor lives in California and attends yoga classes regularly."}
{"input":"PlayedFor(thomasBarber, boltonWanderers) ∧ PlayedIn(boltonWanderers,theFootballLeague)","output":"Thomas Barber played in the Football League for Bolton Wanderers"}
{"input":"PlayedAs(thomasBarber, insideLeft)","output":"Thomas Barber played as an inside left."}
{"input":"∃x (English(x) ∧ ProfessionalFootballer(x) ∧ ScoredTheWinningGoalIn(x, facupfinal1913))","output":"An English professional footballer scored the winning goal in the 1913 FA Cup Final."}
{"input":"PlayIn(oliver, piano, concert)","output":"Oliver plays piano in the concert."}
{"input":"PlayIn(oliver, violin, concert)","output":"Oliver plays violin in the concert."}
{"input":"GoodAtPlaying(peter, piano)","output":"Peter is good at playing piano."}
{"input":"FunctionalLegMuscle(archie)","output":"George has functional leg muscles."}
{"input":"FunctionalLegMuscle(archie) ∧ CanControl(archie, balance)","output":"Archie has functional leg muscles and can control his balance."}
{"input":"¬CanControl(archie, balance) ∧ ¬FunctionalLegMuscle(x)","output":"Archie cannot control his balance and doesn't have functional leg muscles."}
{"input":"∃x ∃y (CancerResearcher(x) ∧ Use(x, cancerEffectSize) ∧ UsedToDetermine(cancerEffectSize, relativeImportanceOfGeneteticAlterations))","output":"Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells."}
{"input":"SelectionIntensitySomaticVariants(pValue)","output":"P value represents the selection intensity for somatic variants in cancer cell lineages."}
{"input":"Preferred(cancerResearchers, cancerEffectSize)","output":"Cancer effect size is preferred by cancer researchers."}
{"input":"∀x (PValue(x) → ¬MetricsOfEffect(x))","output":"P values don't represent metrics of effect."}
{"input":"Bioegradable(worksheet)","output":"A worksheet is biodegradable."}
{"input":"¬Bioegradable(worksheet)","output":"A worksheet is not biodegradable."}
{"input":"Bad(worksheet)","output":"A worksheet is bad."}
{"input":"¬Bad(worksheet)","output":"A worksheet is not bad."}
{"input":"∃x (Snake(x) ∧ Have(x, fur))","output":"Some snake has fur."}
{"input":"¬High(tower-a)","output":"Tower A is low."}
{"input":"¬In(tower-b, manhattan)","output":"Tower B is not located in Manhattans."}
{"input":"¬In(tower-b, newHaven)","output":"Tower B is located in New Haven."}
{"input":"Cat(ron)","output":"Ron is a cat."}
{"input":"Penguin(henry) ⊕ Endothermic(henry)","output":"Either Henry is a penguin or Henry is endothermic."}
{"input":"¬(Penguin(ron) ⊕ Endothermic(henry))","output":"Ron is either both a penguin and endothermic, or he is nether."}
{"input":"∃x (Discover(yevgenykurochkin, x) ∧ BirdGenus(x))","output":"Yevgeny Kurochkin discovered a new bird genus."}
{"input":"∃x (KnownSpeciesOf(x, ambiortus) ∧ ¬LiveIn(x, mongolia))","output":"There is a species of Ambiortus that doesn't live in Mongolia."}
{"input":"LiveIn(yevgenykurochkin, mongolia)","output":"Yevgeny Kurochkin lived in Mongolia."}
{"input":"∀x (SpeciesOf(x, ambiortus) → LiveIn(x, mongolia))","output":"All species of Ambiortus live in Mongolia."}
{"input":"Seasoned(jack) ∧ SoftwareEngineerInterviewer(jack) ∧ At(jack, google)","output":"Jack is a seasoned software engineer interviewer."}
{"input":"¬DeprivedOfWithout(jack, rights, dueProcessOfLaw)","output":"Jack cannot be deprived of their rights without due process of law."}
{"input":"DeprivedOfWithout(jack, rights, dueProcessOfLaw)","output":"Jack can be deprived of their rights without due process of law."}
{"input":"∃x (Built(pierredeRigauddeVaudreuil, x) ∧ LocatedIn(x, newFrance))","output":"Pierre de Rigaud de Vaudreuil built a fort in New France."}
{"input":"∃x (Built(pierredeRigauddeVaudreuil, x) ∧ LocatedIn(x, newEngland))","output":"Pierre de Rigaud de Vaudreuil built a fort in New England."}
{"input":"LocatedIn(fortCarillon, europe)","output":"Fort Carillon was located in Europe."}
{"input":"NBAPlayer(stephenCurry)","output":"Stephen Curry is an NBA player."}
{"input":"ProfessionalCenterback(stephenCurry)","output":"Stephen Curry is a centerback player."}
{"input":"¬ProfessionalCenterback(stephenCurry)","output":"Stephen Curry is not a centerback player."}
{"input":"FolkSong(inception)","output":"Inception is a folk song."}
{"input":"¬FolkSong(inception)","output":"Inception is not a folk song."}
{"input":"Video(inception) ⊕ FolkSong(inception)","output":"Inception is either a video or a folk song."}
{"input":"Video(mac)","output":"Mac is a video."}
{"input":"BasedOn(x, fact) ∨ BasedOn(x, rule)","output":"Reasoning with Modus Ponens is based on facts and rules."}
{"input":"DeriveFrom(generalPrinciple, observations) ∧ UsedFor(x, statisticalGeneralization)","output":"Modus Ponens derives general principles from a body of observations and is used for statistical generalization."}
{"input":"¬(Derive(generalPrinciple, observations) ⊕ UsedFor(x, statisticalGeneralization)) → (¬InductiveReasoning(modusPonens) ∧ (¬UsedFor(modusPonens, statisticalGeneralization)))","output":"If Modus Ponens either derives general principles from a body of observations and is used for statistical generalization, or neither, then Modus Ponens is is neither used in inductive reasoning  nor used for statistical generalization."}
{"input":"StruggleAt(jack, halfCourtShot)","output":"Jack struggles at half court shots."}
{"input":"BadAt(jack, midRangeShot)","output":"Jack is bad at mid-range shots."}
{"input":"GoodAt(jack, twos) ∨ BadAt(jack, midRangeShot)","output":"Jack is solid at shooting 2-pointers or bad at mid-range shots."}
{"input":"GoodAt(jack, twos) ⊕ BadAt(jack, midRangeShot)","output":"Jack is either solid at shooting 2-pointers or bad at mid-range shots."}
{"input":"TrickShotArtist(jack) ∨ BadAt(jack, midRangeShot))","output":"Jack is a trick-shot artist or bad at mid-range shots."}
{"input":"TrickShotArtist(jack) ⊕ BadAt(jack, midRangeShots)","output":"Jack is either a trick-shot artist or bad at mid-range shots."}
{"input":"GoodAt(jack, threes) ⊕ BadAt(jack, midRangeShot)","output":"Jack is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots."}
{"input":"BadAt(jack, midRangeShot) ∧ GoodAt(jack, twos) → ¬GoodAt(jack, twos) ∧ GoodAt(jack, threes)","output":"If Jack is not solid at shooting 2-pointers and bad at mid-range shots, then Jack is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers."}
{"input":"GoodAt(jack, twos) ∨ GoodAt(jack, threes) → BadAt(jack, halfCourtShot) ∧ BadAt(jack, midRangeShot)","output":"If Jack is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Jack struggles at half court shots and is bad at mid-range shots."}
{"input":"∀x (Plant(x) → ¬Mushroom(x))","output":"No plants are mushrooms."}
{"input":"∃x ∃y (Street(x) ∧ Street(y) ∧ Dustless(x) ∧ Dustless(y) ∧ ¬(x=y))","output":"Some streets are dustless."}
{"input":"∃x (TravelingTo(x, seattle) ∧ TravelingFrom(x, newYorkCity) ∧ uncomfortable(x))","output":"People traveling in business class from New York City to Seattle will be uncomfortable."}
{"input":"MakeALotOfMoney(singhKaur)","output":"Singh Kaur makes a lot of money."}
{"input":"Writer(singhKaur)","output":"Singh Kaur is a writer."}
{"input":"Have(singhKaur, busyLife)","output":"Singh Kaur has a very busy life."}
{"input":"∀x (Building(x) → Magnificent(x))","output":"All buildings are magnificent."}
{"input":"∃x (MainCharacterOf(x, garfield) ∧ Childish(x) ∧ Possessive(x))","output":"The main character of the film Garfield is childish and possessive."}
{"input":"CapableOf(hulu, abstractThought)","output":"Hulu is capable of abstract thoughts."}
{"input":"¬CapableOf(hulu, abstractThought)","output":"Hulu is not capable of abstract thoughts."}
{"input":"Dirt(hulu)","output":"Hulu is dirt."}
{"input":"Animal(hulu) ∨ Dirt(hulu)","output":"Hulu is an animal or dirt."}
{"input":"Animal(hulu) ⊕ Dirt(hulu)","output":"Hulu is either an animal or dirt, but not both."}
{"input":"Animal(hulu) ⊕ Dirt(hulu) → CapableOf(hulu, abstractThought) ∧ Dirt(hulu)","output":"If Hulu is either an animal or dirt, then Hulu is capable of abstract thoughts and is dirt."}
{"input":"PreventsHarm(controlledSubstancesAct)","output":"The Controlled Substances Act prevents harmful things."}
{"input":"∃x ∃y(Drugs(x) ∧ Beneficial(x) ∧ (¬(x=y)) ∧ Drugs(y) ∧ Beneficial(y))","output":"Some drugs are beneficial."}
{"input":"∀x ((Child(x) ∧ InChemicalEndangerment(x)) → Harmful(x))","output":"A child in chemical endangerment is in harm."}
{"input":"Entrepreneur(markZuckerberg)","output":"Mark Zuckerberg is an entrepreneur."}
{"input":"RiskAverse(markZuckerberg)","output":"Mark Zuckerberg is a risk-averse person."}
{"input":"¬RiskAverse(markZuckerberg)","output":"Mark Zuckerberg is not a risk-averse person."}
{"input":"∃x (Wildfeed(x) ∧ CopyrightViolation(x))","output":"Some wildfeed is violating copyright laws."}
{"input":"∃x (Wildfeed(x) ∧ Prerecorded(x))","output":"Wildfeed can be prerecorded."}
{"input":"∃x (SyndicatedShows(x) ∧ CopyrightViolation(x))","output":"Syndicated shows are copyright violations."}
{"input":"∃x (HighlyDeveloped(x) ∧ LocatedIn(x, westernHemisphere))","output":"A highly developed city is located in the western hemisphere of the earth."}
{"input":"¬LocatedIn(unitedStatesOfAmerica, westHemisphere)","output":"The United States of America is not located in the western hemisphere of the earth."}
{"input":"LocatedIn(newYorkCity, newYork)","output":"New York City is located in New York State."}
{"input":"∃x ∃y (Poem(x) ∧ WrittenBy(x, y) ∧ AncietRomanWriter(y) ∧ StrongAgingAnalogy(x))","output":"There is a poem written by an ancient Roman writer with a strong analogy of human aging."}
{"input":"∃x ∃y (Poem(x) ∧ WrittenBy(x, y) ∧ AncientRomanWriter(y) ∧ WrittenIn(x, iambicTrimeter))","output":"There is a poem written by an ancient Roman writer in iambic trimeter."}
{"input":"Poem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ StrongAgingAnalogy(catullus4)","output":"Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging."}
{"input":"∃x (Film(x) ∧ Directed(michael, x) ∧ About(x, malfunctioningRobots))","output":"Michael Crichton has directed a film about malfunctioning robots."}
{"input":"∃x (TVSeries(x) ∧ American(x) ∧ Debut(x, year2016))","output":"An American TV series debuted in 2016."}
{"input":"¬FewerGoldMedalsThan(russia, china)","output":"Russia did not win fewer gold medals than China."}
{"input":"FewerGoldMedalsThan(russia, china)","output":"Russia won fewer gold medals than China."}
{"input":"∃x (DistrictIn(xiangshan, x) ∧ DistrictIn(diecai, x) ∧ City(x))","output":"Xiangshan and Diecai are districts in the same city."}
{"input":"DistrictIn(xiufeng, guilin)","output":"Xiufeng is a district in Guilin."}
{"input":"DistrictIn(kowloon, hongKong)","output":"Kowloon District is in Hong Kong."}
{"input":"EnjoyGoingOutOftenTo(peter, restaurant, friend)","output":"Peter enjoys going out often to restaurants with friends."}
{"input":"YoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity)","output":"Peter is a young working professional who lives in large cities."}
{"input":"GrowIn(peter, vegetable, garden) ∨ (YoungWorkingProfession(peter) ∧ LiveIn(peter, largeCity))","output":"Peter grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities."}
{"input":"EasyToOperate(modelXX)","output":"ModelXX is easy to operate."}
{"input":"ControlledBy(modelXX, managers)","output":"ModelXX is controlled by managers."}
{"input":"ConnectedTo(modelXX, googleHome)","output":"ModelXX is connected to Google Home."}
{"input":"InterestingSoloist(ryan)","output":"Ryan is an interesting soloist."}
{"input":"(PermanentMemberOf(ryan, orchestra) ⊕ TouringMusician(ryan))","output":"Ryan is either a permanent member of an orchestra or a touring soloist musician."}
{"input":"(PermanentMemberOf(ryan, orchestra) ⊕ HaveTemporaryRoleAt(ryan, orchestra))","output":"Ryan is either a permanent member of an orchestra or has a temporary role at the orchestra."}
{"input":"Cool(harry)","output":"Harry is cool."}
{"input":"¬Cool(harry)","output":"Harry is not cool."}
{"input":"Wizard(harry) ∨ Angry(harry)","output":"Harry is a wizard or angry."}
{"input":"¬Wizard(harry) ∧ ¬Angry(harry)","output":"Harry is neither a wizard nor angry."}
{"input":"DisplayedIn(g910, homepage)","output":"G-910 is displayed on the homepage."}
{"input":"¬DisplayedIn(g910, homepage)","output":"G-910 is not displayed on the homepage."}
{"input":"ThisBrand(g910) ∧ ReturnedBy(g910, customer)","output":"G-910 is a product returned by customers."}
{"input":"ThisBrand(g910) ∧ (ReturnedBy(g910, customer) ∨ SoldIn(g910, walmart))","output":"G-910 is a product returned by customers or sold in Walmart."}
{"input":"ReturnedBy(g910, customer) ⊕ SoldIn(g910, walmart)","output":"G-910 is either returned by customers or sold in Walmart."}
{"input":"BelieveIn(marcy, santaClaus) ⊕ LeaveOut(marcy, cookies)","output":"Marcy either believes in Santa Claus or doesn't leave cookies out on Christmas Eve."}
{"input":"¬(LeaveOut(marcy, cookies) ∧ ThinkMadeUp(marcy, santaClaus)) ∨ BelieveIn(marcy, santaClaus)","output":"Marcy is not someone who both leaves out cookies on Chrismtas eve and thinks Santa Claus is made up, or Marcy believes in Santa Claus."}
{"input":"∀x ∀y (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → ProsecuteInAppropriateCourt(x, theOffender))","output":"When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court."}
{"input":"∀x (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(corruption) → InvestigatePersonally(x, corruption))","output":"In Indonesia, the prosecutor personally investigates cases of corruption."}
{"input":"∀x ∀y (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → InvestigatePersonally(x, y))","output":"When the police complete investigations, the prosecutor investigates personally."}
{"input":"MechanicalWatch(moonWatch)","output":"Moonwatch is a mechanical watch."}
{"input":"SmartWatch(moonwatch) ∧ MechanicalWatch(moonwatch)","output":"Moonwatch is a smartwatch and a mechanical watch."}
{"input":"SmartWatch(moonwatch) ∧ MechanicalWatch(moonwatch) → ¬MechanicalWatch(moonwatch)","output":"If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch."}
{"input":"MechanicalWatch(moonwatch)) ∨ BatteryPoweredWatch(moonwatch) → ¬SmartWatch(moonwatch)","output":"If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch."}
{"input":"¬Can(john, useDifferentCondimentsToCook)","output":"John cannot use different condiments for cooking."}
{"input":"PossibleEffectiveMonetaryPolicy(russia)","output":"In Russia, an effective monetary policy is possible."}
{"input":"∃x (SendIn(viewers, x, frenchBroadcastChannelTF1) ∧ French(x))","output":"Viewers send funny videos to the French broadcast channel TF1 that are in French."}
{"input":"∃x (SendIn(viewers, x, frenchBroadcastChannelTF1) ∧ English(x))","output":"Viewers send funny videos to the French broadcast channel that are in English."}
{"input":"Thing(jack)","output":"Jack is a thing."}
{"input":"¬Thing(jack)","output":"Jack is not a thing."}
{"input":"Thing(jack) ∧ Iphone(jack)","output":"Jack is a thing and an iPhone."}
{"input":"¬(Thing(jack) ∧ Iphone(jack))","output":"Jack is not both a thing and an iPhone."}
{"input":"∀x (Phone(x) → ¬Electronic(x))","output":"No phones are electronic."}
{"input":"∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, byzantineArt) ∧ Include(x, islamicArt))","output":"A museum in NYC includes Byzantine and Islamic Art."}
{"input":"∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, americanArt))","output":"A museum in NYC includes American art."}
{"input":"∃x (Museum(x) ∧ In(x, nYC) ∧ Include(x, greekArt))","output":"A museum in NYC includes Greek art."}
{"input":"LikeEating(fabien, cheese)","output":"Fabien is a person who likes eating cheese."}
{"input":"(LikeEating(fabien, cheese) ⊕ Francophile(fabien)) → (¬(Study(fabien, spanish) ∨ Francophile(fabien)))","output":"If Fabien is either a person who likes eating cheese or a francophile, then Fabien is neither a person who studies Spanish nor a person who is a francophile."}
{"input":"(Favor(fabien, spain) ∨ Francophile(fabien)) → (Study(fabien, spanish) ⊕ Favor(fabien, spain))","output":"If Fabien is a person who likes Spain as their favorite country or is a francophile, then Fabien is either a person who studies Spanish or a person who likes Spain as their favorite country."}
{"input":"Village(gasteren) ∧ In(gasteren, netherlands)","output":"Gasteren is a Dutch village."}
{"input":"City(gasteren)","output":"Gasteren is a city."}
{"input":"Population(gasteren, num155)","output":"Gasteren has a population of 155."}
{"input":"∃x (Hyrax(x) ∧ LayEgg(x))","output":"Hyraxes lay eggs."}
{"input":"∀x (Grebes(x) → ¬Mammal(x))","output":"Grebes are not mammals."}
{"input":"∀x (Platypuses(x) → Vertebrate(x))","output":"Platypuses are vertebrates."}
{"input":"AustralianCitizen(bobbyFlynn)","output":"Bobby Flynn is an Australian citizen."}
{"input":"FlewToIn(bobbyFlynn, america, year2007)","output":"Bobby Flynn flew to America in 2007."}
{"input":"BornIn(bobbyFlynn, queens)","output":"Bobby Flynn was born in Queens."}
{"input":"∀x (Enzyme(x) → Protein(x))","output":"All enzymes are proteins."}
{"input":"∃x ∃y (Series(x) ∧ AiredOn(x, aBC) ∧ Develops(y, x) ∧ ShowRunnerOf(y, witchesOfEastEnd))","output":"There is a series by ABC that was developed by the showrunner of Witches of East End."}
{"input":"∀x (Series(x) ∧ AiredOn(x, aBC) ∧ ∃y(ShowRunnerOf(y, witchesOfEastEnd)) → ¬Develops(y, x))","output":"No series by ABC was developed by the showrunner of Witches of East End."}
{"input":"Develops(maggieFriedman, witchesOfEastEnd)","output":"Maggie Friedman developed Witches of East End."}
{"input":"HaveOfficeIn(ibm, london) ∨ HaveOfficeIn(ibm, zurich)","output":"IBM has an office in London or Zurich or both."}
{"input":"∀x (Greek(x) → ¬WorkFor(x, ibm))","output":"No Greeks have worked for IBM."}
{"input":"Song(hoorayHoorayItsAHoliHoliday) ∧ Number1GermanSingle(hoorayHoorayItsAHoliHoliday)","output":"\"Hooray! Hooray! It's a Holi-Holiday!\" was the #1 hit in Germany."}
{"input":"PeaksBelowOn(hoorayHoorayItsAHoliHoliday, number1, germanChart)","output":"\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts."}
{"input":"PeaksAtOn(hoorayHoorayItsAHoliHoliday, number3, germanChart)","output":"\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts."}
{"input":"CanMake(luke, goodBreakfast)","output":"Luke can make a good breakfast."}
{"input":"Chef(luke)","output":"Luke is a chef."}
{"input":"∃x ∃y (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ Develop(eTS, y) ∧ AssociatedWith(y, entryToUSEducationInstitution))","output":"ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions."}
{"input":"∀x (Administer(eTS, x) → ¬InternationalTest(x))","output":"ETS doesn't administer tests internationally."}
{"input":"∃x (Administer(eTS, x) ∧ InChina(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))","output":"ETS administers international tests including the TOEFL, GRE and subject tests in China."}
{"input":"∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))","output":"Robert can resist the hallmark delectable desserts that are famous in Italy."}
{"input":"¬((Enjoy(robert, vacation) ∧ In(vacation, italy)) ⊕ Regret(x, collegeExperiences)) → Enjoy(robert, vacation) ∧ In(vacation, italy) ⊕ (∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))","output":"If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or he can resist the hallmark delectable desserts that are famous in Italy."}
{"input":"(∃y (Resist(robert, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))) ∧ Regret(robert, collegeExperience)) → (EnjoyEating(robert, gelato) ⊕ (Enjoy(robert, vacation) ∧ In(vacation, italy))","output":"If Robert is not both a person who can resist the hallmark delectable desserts that are famous in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy."}
{"input":"PhdGraduate(tom)","output":"Tom is a PhD graduate."}
{"input":"¬PhdGraduate(tom)","output":"Tom is not a PhD graduate."}
{"input":"StudyIn(tom, unitedStates)","output":"Tom wants to study abroad."}
{"input":"∃x ∃y (DemolitionDerby(x) ∧ On(x, y) ∧ Demolished(y))","output":"There has been a demolition derby somewhere that has since been demolished."}
{"input":"Demolished(islip)","output":"Islip was demolished."}
{"input":"StillUsed(islip)","output":"Islip is still being used."}
{"input":"ContributeToCountry(james)","output":"James contributes to the country."}
{"input":"¬ContributeTo(james, country)","output":"James does not contribute to the country."}
{"input":"ContributeTo(james, country) ∧ ServesIn(james, army)","output":"James contributes to the country and he serves in the army."}
{"input":"¬(ContributeTo(james, country) ∧ ServesIn(james, army))","output":"James does not contribute to the country and does not serve in the army."}
{"input":"∀x ((Water(x) ∧ From(x, crotonRiverWatershed)) → ∃y(FlowsTo(x, y) ∧ In(y, newYork)))","output":"Water from the Croton River watershed flows to somewhere in New York."}
{"input":"In(crotonRiverWatershed, bronx)","output":"The Croton River watershed is in the Bronx."}
{"input":"∀x (Water(x) ∧ From(x, crotonRiver) → FlowsTo(x, bronx))","output":"Water from the Croton River flows to the Bronx."}
{"input":"∀x (Warship(x) → ¬CommercialVessel(x))","output":"No warships are commercial vessels."}
{"input":"Genre(troubleAtTheHenhouse, rock)","output":"The genre of Trouble at the Henhouse is rock."}
{"input":"¬∃x(RockBand(x, canada) ∧ Award(x, theAlbumOfTheYear))","output":"No Canadian rock band has won the Album of the Year award."}
{"input":"SongInFilm(buttsWigglin)","output":"\"Butts Wigglin'\" appeared in a film."}
{"input":"AppliedTo(daniel, stanfordUniversity) ∧ ¬GotInto(daniel, stanfordUniversity) ∧ Alumni(danielsFamilyMembers, stanfordUniversity)","output":"Daniel once applied to Stanford University, but he couldn’t get in even though he has family members who are Stanford alumni."}
{"input":"Studied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)","output":"Daniel studied bioengineering as an undergraduate at Rice University."}
{"input":"GrewUpIn(daniel, minneapolis) ∧ GrewUpIn(danielsOlderSister, minneapolis)","output":"Daniel and his sister grew up in Minneapolis, Minnesota."}
{"input":"∀x (AmericanAirlinesPlane(x) → x=boeing ⊕ x=airbus)","output":"An American Airlines plane is either a Boeing or Airbus plane."}
{"input":"∃x (CommercialAircraft(x) ∧ x=spaceX)","output":"There exists a SpaceX commercial aircraft."}
{"input":"∀x (UnitedAirlinesAircraft(x) → ¬(x=boeing))","output":"There does not exist a United Airlines plane produced by Boeing."}
{"input":"∃x (WorldMajorLargePassengerAircraftManufacturer(x) ∧ ProducedBy(x, airbus) ∧ ProducedBy(x, boeing))","output":"There is a commercial plane made by both Airbus and Boeing."}
{"input":"Island(leyte) ∧ In(leyte, philippines)","output":"Leyte is an island in the Philippines."}
{"input":"∀x ∀y ((Earthquake(x) ∧ StrikeInCity(x, y) ∧ In(y, philippines)) → ¬Deadly(x))","output":"No one has ever died in an earthquake that struck the Philippines."}
{"input":"∃x ∃y (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, y) ∧ In(y, philippines))","output":"In 1999, there was at least one earthquake in the Philippines."}
{"input":"Newspapers(matt)","output":"Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics."}
{"input":"AtRiskOf(matt, gamblingAddiction) ⊕ InvestInRegularly(matt, publicStockMarket) → ¬EnjoyVisiting(matt, theLasVegasStrip) ∧  ¬(ReadToKeepUpdatedOn(matt, theWallStreetJournal, financialMetric) ∨  (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(matt, y, financialMetric))))","output":"If Matt is either both a person who is at risk of a gambling addiction and invests in the public stock market regularly, or neither is at risk of a gambling addiction nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics."}
{"input":"¬AtRiskOf(matt, gamblingAddiction) ∧ ¬(ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))) ∧ EnjoyVisiting(matt, theLasVegasStrip))","output":"Matt is not at risk of a gambling addiction and Mike does not both read the Wall Street Journal and other newspapers regularly and visits the Las Vegas Strip regularly."}
{"input":"Can(john, getTheRhythmRight)","output":"John can get the rhythms right."}
{"input":"PutEmotionInto(john, hisPlaying)","output":"John does not put emotions into his playing."}
{"input":"¬Recieved(barbaraAnnMarshall, medal)","output":"Barbara Ann Marshall did not receive medals."}
{"input":"Represented(barbaraAnnMarshall, unitedStates)","output":"Barbara Ann Marshall represented the United States in the 1972 Summer Olympics."}
{"input":"∃x (Player(x) ∧ RedToGreen(x))","output":"It is possible to move to the green stage without ever reaching the yellow stage."}
{"input":"∃x (Player(x) ∧ RedToYellow(x))","output":"It is possible to reach the yellow stage without ever reaching the green stage."}
{"input":"∃x (Player(x) ∧ CompleteGame(x))","output":"It is possible to complete the game without ever reaching the green stage."}
{"input":"ScaredOf(adam, animal)","output":"Adam is scared of animals."}
{"input":"ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)","output":"Adam considers words of affirmation to be the most important love language."}
{"input":"ConsidersMostImportantLoveLanguage(adam, physicalTouch) ∧ ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)","output":"Adam considers physical touch as the most important love language and considers words of affirmation as the most important love language."}
{"input":"ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)","output":"Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language."}
{"input":"(ConsidersMostImportantLoveLanguage(adam, physicalTouch, mostImportantLoveLanguage) ∨ GoodWith(x, pet)) → ConsidersMostImportantLoveLanguage(adam, wordOfAffirmation)","output":"If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language."}
{"input":"Reptile(john)","output":"John is a reptile."}
{"input":"¬(Iguana(john) ∧ Fly(john))","output":"John is not both an iguana and an animal that can fly."}
{"input":"Animal(john) ∧ Fly(john) ∧ Bird(john)","output":"John is an animal that can fly and John is a bird."}
{"input":"FilmedIn(endGame, newYork)","output":"EndGame was filmed in New York."}
{"input":"∀x (¬(Directed(x, endGame) ∧ From(x, hongKong)))","output":"EndGame was not directed by someone from Hong Kong."}
{"input":"∀x (Directed(andyChang, x) → ¬(FilmedIn(x, washington)))","output":"All of Andy Chang's movies are filmed outside of Washington."}
{"input":"Larger(eight, seven)","output":"Eight is larger than seven."}
{"input":"Positive(eight)","output":"Eight is positive."}
{"input":"Larger(six, seven)","output":"Six is larger than seven."}
{"input":"∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Sleeps(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Sleeps(y) ∧ ¬(x=y))","output":"Some four-legged animals sleep."}
{"input":"PRCNational(mei)","output":"Mei is a PRC national."}
{"input":"¬PRCNational(mei)","output":"Mei is not a PRC national."}
{"input":"NorthKoreanNational(mei) ⊕ SpanishNational(mei) → ¬(FrenchNational(mei) ⊕ European(mei))","output":"If Mei is either a North Korean or a Spanish national, then Mei is either both a French national and a citizen of the European Union, or neither a French national nor a citizen of the European Union."}
{"input":"∃x ∃y (GoodTeacher(x) ∧ GoodTeacher(y) ∧ ¬WellInformed(x) ∧ ¬WellInformed(y) ∧ ¬(x=y))","output":"Some good teachers are not well-informed people."}
{"input":"Background(mort)","output":"Mort is background material."}
{"input":"PhilatelicLit(eragon)","output":"Eragon is a piece of Philatelic literature."}
{"input":"∃x (DramaFilm(x) ∧ Produces(columbiaPictures, x))","output":"Columbia pictures produced some drama film."}
{"input":"∃x (AdventureFilm(x) ∧ Produces(columbiaPictures, x))","output":"Columbia pictures produced some adventure film."}
{"input":"∃x (ChildrensFilm(x) ∧ Produces(paramount, x))","output":"Paramount produces children's films."}
{"input":"∃x (AdventureFilm(x) ∧ Produces(paramount, x))","output":"Paramount produces adventure films."}
{"input":"∃x (ParamountLeaderOf(x, prc) ∧ VicePremier(x))","output":"The paramount leader of the PRC was also the vice premier."}
{"input":"∃x ∃y (PresidedOver(dengxiaoping, x) ∧ Under(dengxiaoping, y) ∧ LaunchedBy(x, y))","output":"Deng Xiaoping presided over something launched by someone he was under."}
{"input":"∃x (InstrumentalIn(x, chinaseconomicreconstruction) ∧ GraduallyRoseTo(x, supremepower))","output":"The person instrumental in china's economic reconstruction gradually rose to supreme power."}
{"input":"RealisticFiction(dune)","output":"Dune is realistic fiction."}
{"input":"ResultOf(dune, creativeProcess) ∧ ImaginativeProcess(dune)","output":"Dune is a result of creative and imaginative process."}
{"input":"ResultOf(dune, creativeProcess) ⊕ ImaginativeProcess(dune)","output":"Dune is either a result of creative processes or came from an imaginative process."}
{"input":"ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))","output":"Dune is a result of creative processes and is science fiction."}
{"input":"Knows(dan, dune) ∧ (ResultOf(dune, creativeProcess)  ⊕ ScienceFiction(dune))","output":"Dune is either a result of creative processes or is science fiction."}
{"input":"(ResultOf(dune, creativeProcess)  ∧ ImaginativeProcess(dune)) → (¬ResultOf(dune, creativeProcess) ∧ ¬ScienceFiction(dune))","output":"If Dune is a result of creative and imaginative processes, then Dune is not a result of creative processes and science-fiction."}
{"input":"Knows(dan, dune) ∧ (¬(Fact(dune) ⊕ ResultOf(dune, creativeProcess))) → (ResultOf(dune, creativeProcess) ∧ ScienceFiction(dune))","output":"If Dune is either a fact and a result of creative processes, or neither a fact nor a result of creative processes, then Dune is a result of creative processes and science-fiction."}
{"input":"Knows(dan, dune) ∧ (ScienceFiction(dune)) → (¬(ResultOf(dune, creativeProcess)  ∧ ScienceFiction(dune)))","output":"If Dune is science-fiction, then Dune is not a result of creative processes and science-fiction."}
{"input":"Knows(dan, dune) ∧ (¬(ResultOf(dune, creativeProcess)  ∧ ScienceFiction(dune))) → (¬(ImaginativeProcess(dune) ∨ ProvedToBe(dune, false)))","output":"If Dune is not a result of creative processes and science-fiction, then Dune neither came from an imaginative process nor proved to be false."}
{"input":"Knows(dan, dune) ∧ (¬(ImaginativeProcess(dune) ∧ ScienceFiction(dune))) → (¬(ResultOf(dune, creativeProcess)  ∨ ImaginativeProcess(dune)))","output":"If Dune is did not come from imaginative process and is not science-fiction, then Dune is neither a result of creative processes nor came from an imaginative process."}
{"input":"¬Speak(captainAmerica, english)","output":"Captain America does not speak English."}
{"input":"ComeFrom(captainAmerica, marvelUniverse)","output":"Captain America comes from the Marvel universe."}
{"input":"Speak(captainAmerica, spanish)","output":"Captain America speaks Spanish."}
{"input":"BornIn(robertZimmer, germany)","output":"Robert Zimmer is German."}
{"input":"¬Writer(robertZimmer)","output":"Robert Zimmer is not a writer."}
{"input":"Biographer(robertZimmer)","output":"Robert Zimmer is a biographer."}
{"input":"RepayOnTime(john) → ApprovedFor(john, mortgage)","output":"If John repays his loans on time, he will be approved for a mortgage."}
{"input":"TF(john)","output":"John is a Teaching Fellow"}
{"input":"¬TF(john)","output":"John is not a Teaching Fellow."}
{"input":"PhDStudent(john)","output":"John is a PhD student."}
{"input":"GoTo(john, europe) → See(john, eiffelTower)","output":"If John goes to Europe, he will see the Eiffel Tower."}
{"input":"∃x (CapitalOf(x, france) ∧ LocatedIn(eiffelTower, x))","output":"The Eiffel Tower is located in the capital of France."}
{"input":"LiveIn(john, belgium)","output":"John lives in Belgium."}
{"input":"ElectricCar(toyotaPrius)","output":"Prius is an electric car."}
{"input":"¬ElectricCar(toyotaPrius)","output":"The Toyota Prius is not an electric car."}
{"input":"MadeIn(toyotaPrius, maranello)","output":"The Toyota Prius is a equipped with a Ferrari V12 engine."}
{"input":"Ferrari(toyotaPrius) ∨ LoudCar(toyotaPrius) → ElectricCar(toyotaPrius)","output":"If The Toyota Prius is a Ferrari or a loud car, then The Toyota Prius is an electric car."}
{"input":"GrownIn(piper, garden)","output":"Piper was grown in a garden."}
{"input":"¬GrownIn(piper, garden)","output":"Piper was not grown in a garden."}
{"input":"Kitten(piper)","output":"Piper is a kitten."}
{"input":"ParticipatedIn(juddBankert, winterOlympics, year1988)","output":"Judd Bankert competed in the 1988 Winter Olympics."}
{"input":"∃x (ParticipatedIn(guam, summerOlympics, x))","output":"Guam has participated in the Summer Olympics at least once."}
{"input":"∃x ∃y (SonOf(x, y) ∧ GeneralPractitioner(y) ∧ WordSetter(x))","output":"The son of a general practitioner was a word-setter of My Word!."}
{"input":"¬Magazine(worldmedicine)","output":"World Medicine is not a magazine."}
{"input":"∀x (British(x) → ¬Author(x))","output":"There are no British authors."}
{"input":"∀x (Journalist(x) → ¬BornIn(x, yorkshire))","output":"There are no journalists that were born in Yorkshire."}
{"input":"∃x ∃y (Son(x, y) ∧ GeneralPractitioner(y) ∧ ¬Author(x))","output":"There is a son of a general practitioner that is not an author."}
{"input":"∃x (Reading(x) ∧ Fun(x))","output":"Some reading is fun."}
{"input":"∃x ∃y (HandbrakeOf(x, y) ∧ Parked(y) ∧ Car(y) ∧ Up(x))","output":"The handbrake is up when some cars are parked."}
{"input":"RegularlyRideHorsesForPleasure(manny)","output":"Manny regularly rides horses for pleasure and sport."}
{"input":"CompeteIn(manny, horseDressageShow) ∧ InvestedIn(manny, equestrianGearAndEquipment)","output":"Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear."}
{"input":"¬(HaveAHorseRanch(manny) ⊕ CompeteIn(manny, horseDressageShow)) → ¬InvestedIn(manny, equestrianGearAndEquipment)","output":"If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear."}
{"input":"∀x (BatteryTower(x) → DeployCannons(x))","output":"Cannons can be deployed on battery towers."}
{"input":"∀x ∀y ((Roundel(x) ∧ BatteryTower(y)) → Older(x, y))","output":"Roundels are older than battery towers."}
{"input":"∀x ∀y ((BatteryTower(x) ∧ AdjacentWall(x,y)) → Higher(x, y))","output":"Battery towers are higher than adjacent walls."}
{"input":"∀x (Roundel(x) → DeployCannons(x))","output":"Cannons can be deployed on roundels."}
{"input":"∃x ∃y (Paper(x) ∧ Paper(y) ∧ Hard(x) ∧ Hard(y) ∧ ¬(x=y))","output":"Some papers are hard."}
{"input":"∀x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → Receive(x, intangibleBenefit))","output":"Volunteers who participate in natural disaster response receive intangible benefits for their work."}
{"input":"∀x (Volunteer(x) ∧ Environmental(x) → WorkInGroup(x))","output":"Environmental volunteers work in groups."}
{"input":"∀x (Volunteer(x) → Trained(x))","output":"To be a volunteer, you must be trained."}
{"input":"Old(mike) ∧ LiveIn(mike, stableHome)","output":"Mike is an old person living in a stable home."}
{"input":"(∃y (flannelShirt(y) ∧ WearEveryday(mike, y)) ∨ ¬LikeShoppingFor(mike, clothes)) → ¬(Old(mike) ∧ LiveIn(mike, stableHome)) ∧ ¬LikeShoppingFor(mike, clothes)","output":"If Mike wears the same flannel shirts every day or does not like shopping for clothes, then Mike is neither an old person living in a stable home nor does he like shopping for clothes."}
{"input":"¬(Old(mike) ∧ LiveIn(mike, stableHome)) ∧ ¬LikeShoppingFor(mike, clothes)) → ¬LikeShoppingFor(mike, clothes)","output":"If Mike is not an old person living in a stable home and does not like shopping for clothes, then Mike does not like shopping for clothes."}
{"input":"∃x (Japanese(x) ∧ Owns(adam, x))","output":"Adam owns a Japanese car."}
{"input":"∃x (European(x) ∧ Broke(adam, x))","output":"Adam broke a European car."}
{"input":"HigherThan(towerA, num400)","output":"Tower A is higher than 400 meters."}
{"input":"¬HigherThan(towerA, num400)","output":"Tower A is not higher than 400 meters."}
{"input":"HasLogo(towerB, bloomberg) ∨ ManagedBy(x, yaleHousing)","output":"Tower A is a building with the Bloomberg logo or it is managed by Yale Housing."}
{"input":"¬HasLogo(towerB, bloomberg) ∧ (¬ManagedBy(x, yaleHousing))","output":"Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing."}
{"input":"Osprey(bubbles)","output":"Bubbles is an Osprey."}
{"input":"Goldfish(bubbles)","output":"Bubbles is a goldfish."}
{"input":"¬Goldfish(bubbles)","output":"Bubbles is not a goldfish."}
{"input":"∃x (City(x) ∧ Visit(mr.smith, sanFrancisco))","output":"Mr. Smith has been to San Francisco."}
{"input":"∃x (WantToGoTo(x) ∧ City(x) ∧ Florida(x))","output":"They have at leat one candidate city in Florida to visit."}
{"input":"∃x ∃y (¬(x=y) ∧ City(x) ∧ City(y) ∧ WantToGoTo(mr.AndMrs.Smith, x) ∧ California(x) ∧ WantToGoTo(mr.AndMrs.Smith, y) ∧ California(y))","output":"They have at least two candidate cities in California to visit."}
{"input":"Still(bird)","output":"The bird is still."}
{"input":"¬Still(bird)","output":"The bird is not still."}
{"input":"Unpredictable(bird) ∧ Changing(bird)","output":"The bird is unpredictable and changing."}
{"input":"Unpredictable(bird) ∨ Changing(bird)","output":"The bird is unpredictable or changing."}
{"input":"Unpredictable(bird) ⊕ Changing(bird)","output":"The bird is either unpredictable or changing."}
{"input":"Small(bird) ∨ Still(bird) → Unpredictable(bird) ⊕ Changing(bird)","output":"If the bird is small or still, then it is either unpredictable or changing."}
{"input":"∃x (British(x) ∧ Creates(x, dIRay))","output":"DI Ray was created by a Brit."}
{"input":"∃x ∃y(British(x) ∧ TelevisionSeries(y) ∧ Produces(x, y))","output":"Some Brit produced a television series."}
{"input":"GetOn(mike, 180, lSAT)","output":"Mike got 180 on the LSAT."}
{"input":"¬Take(mike, barExam) ∧ ¬(KnowledgeableAbout(mike, criminalProcedures)∧ GetOn(mike, 180, lSAT))","output":"Mike did not take the bar exam and is not both knowledgeable about criminal procedures and someone who got 180 on the LSAT."}
{"input":"Take(mike, barExam)","output":"Mike took the bar exam."}
{"input":"ProfessionalCenterback(stephenCurry)","output":"Stephen Curry is a center-back."}
{"input":"¬(ProfessionalCenterback(stephenCurry) ∧ ProfessionalSoccerDefender(stephenCurry))","output":"Stephen Curry is not both a centerback and a soccer defender."}
{"input":"¬(Centerback(stephenCurry) ∧ SoccerDefender(stephenCurry)) → ¬(SoccerPlayer(stephenCurry) ∨ ProfessionalBasketballPlayer(stephenCurry))","output":"If Stephen Curry is not both a centerback and a soccer defender, then Stephen Curry is neither a soccer player nor a professional basketball player."}
{"input":"∀x (Monitor(x) ∧ OneOEightO(x) → ¬Buy(john, x))","output":"John can't buy a 1080 monitor."}
{"input":"∀x (Monitor(x) ∧ TwoK(x) → ¬Buy(john, x))","output":"John can't buy a 2k monitor."}
{"input":"∀x (ImportantScientificAchievement(x) ∧ USInvention(x))","output":"All important scientific achievements are U.S. inventions."}
{"input":"∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ ¬Pet(x) ∧ ¬Pet(y))","output":"Some mammals are not pets."}
{"input":"InThisNeighborhood(sam) ∧ AddictedTo(sam, coffee)","output":"Sam is living in this neighborhood and he is addicted to coffee."}
{"input":"∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y))","output":"Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home."}
{"input":"(∃y (CoffeemakerAndBlender(y) ∧ Own(sam, y)) ∨ (∃y (TakeOut(y) ∧ Order(sam, y, aDay)))","output":"Sam is living in this neighborhood and he owns at least one coffeemaker and one blender in his home or orders takeout at least once a day."}
{"input":"ProfessionalCenterback(rogerFederer)","output":"Roger Federer is a centerback."}
{"input":"¬ProfessionalCenterback(rogerFederer)","output":"Roger Federer is not a centerback."}
{"input":"ProfessionalSoccerPlayer(rogerFederer)","output":"Roger Federer is a soccer player."}
{"input":"Nice(mary)","output":"Mary is nice."}
{"input":"¬(Nice(mary) ∧ Teacher(mary) ∧ WorkAt(mary, pool))","output":"Mary is not a nice teacher working at a pool."}
{"input":"Nice(mary) ∧ Teacher(mary) ∧ WorkAt(mary, pool)","output":"Mary is is a nice teacher working at a pool."}
{"input":"∃x ∃y (ArtPiece(x) ∧ ¬Require(x, practice) ∧ ArtPiece(y) ∧ ¬Require(y, practice) ∧ ¬(x=y))","output":"There exist art pieces that do not require practice."}
{"input":"BornIn(bernardaBrysonShahn, greece)","output":"Bernarda Bryson Shahn was born in Greece."}
{"input":"American(bernardaBrysonShahn)","output":"Bernarda Bryson Shahn was American."}
{"input":"Divorced(bernardaBrysonShahn)","output":"Bernarda Bryson Shahn had been divorced once."}
{"input":"∃y (LiveWith(emily, y) ∧ Roommate(y))","output":"Emily is in Emma's family and she lives with at least one roommate."}
{"input":"EnjoyReading(emily, techSpec) ∧ KeepUpdatedOn(emily, latestTechnology)","output":"Emily enjoys reading about tech specs and keeping up to date on the latest technology."}
{"input":"FacultyMember(nancy)","output":"Nancy is a faculty member."}
{"input":"PaidBy(nancy, school) ∧ Have(nancy, student)","output":"Nancy is paid by the school and has students."}
{"input":"¬PaidBy(nancy, school) ∨ ¬Have(nancy, student))","output":"Nancy is not paid by the school or does not have students."}
{"input":"∃x (SavesFor(jane, enoughMoney, theSummer)  ∧ Kangaroo(x) → WillSee(x, jane, berlinzoo))","output":"Jane will see a kangaroo if she saves enough money for the summer."}
{"input":"∀x (¬Prereq(x, cpsc201))","output":"CPSC 201 has no prerequisites."}
{"input":"Taken(cpsc201) ∧ ¬Taken(cpsc223) ∧ CanTake(cpsc323)","output":"If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323."}
{"input":"¬CanTake(introgeology)","output":"A student cannot take Intro Geology."}
{"input":"∃x (Taken(x) → CanTake(intermediatemicro))","output":"Intermediate Microeconomics has one prerequisite."}
{"input":"Heptalogy(harryPotter)","output":"The Harry Potter series of books is Heptalogy."}
{"input":"¬Heptalogy(chroniclesOfNarnia)","output":"The Chronicles of Narnia series of books is not Heptalogy."}
{"input":"Heptalogy(lordOfRings)","output":"The Lord of the Rings is Heptalogy."}
{"input":"AttendRegularly(clyde, renaissanceFair)","output":"Clyde attends Renaissance fairs regularly."}
{"input":"Professor(clyde) ∧ Take(clyde, historicalApproach)","output":"Clyde is a professor who takes a historical approach."}
{"input":"(Professor(clyde) ∧ Take(clyde, historicalApproach)) ∨ (ContemporaryAcademic(clyde) ∧ Enjoy(clyde, learning))","output":"Clyde is a professor who takes a historical approach, or is a contemporary academic."}
{"input":"∀x (SportsCar(x) → ¬For(x, familyUse))","output":"No sports cars are automobiles designed for family use."}
{"input":"ComeToWorkWithEveryDay(kat, positiveAttitude)","output":"Kat is a person who comes to work every day with a positive attitude."}
{"input":"(∀y (Colleague(y) ∧ GetAlongWithAtWork(kat, y))) ∧ ReceiveFromAtWork(kat, positiveFeedback, team)","output":"Kat gets along with her colleagues at her work and receives positive feedback from teams at her work."}
{"input":"(∀y (Colleague(y) ∧ GetAlongWithAtWork(kat, y))) ⊕ ReceiveFromAtWork(kat, positiveFeedback, team)","output":"Kat either gets along with her colleagues at her work or receives positive feedback from teams at her work."}
{"input":"FreeToModify(drishti)","output":"Drishti is free to modify."}
{"input":"∀x (EnglishScore(zhang, x) ∧ LowerThan95(x))","output":"Zhang's English class score is lower than 95."}
{"input":"GetGradeIn(wang, aPlus, englishClass)","output":"Wang got an A+ in English class."}
{"input":"¬GetGradeIn(wu, aPlus, englishClass) ∧¬GetGradeIn(wu, a, englishClass)","output":"Wu does not get an A or A+ in English class."}
{"input":"∀x (Prefer(olivia, coolTemperature, x))","output":"At all times, Olivia prefers a cool temperature."}
{"input":"Paid(tora) ∧ Software(tora)","output":"TOra is a paid software."}
{"input":"Free(tora) ∧ Software(tora)","output":"TOra is a free software."}
{"input":"Choose(james, noPlan)","output":"James is a customer who does not choose any plans."}
{"input":"Choose(james, planA) ∨ Choose(james, noPlan)","output":"James is a customer who chooses a Prime Video plan or does not choose any plans."}
{"input":"Choose(james, planA) ∨ Choose(james, noPlan) → RewardWith(james, giftCard) ⊕ Choose(james, planB)","output":"Suppose James is a customer who chooses the Prime Video plan or does not choose any plans, then he is either rewarded a $30 gift card or chooses the HBO Max plan."}
{"input":"MultipleRace(detroitcity)","output":"Detroit City has been in multiple races."}
{"input":"PoseRiskTo(detroitcity, rider)","output":"Detroit City poses risks to its rider."}
{"input":"Racehorse(detroitcity)","output":"Detroit City is a racehorse."}
{"input":"GoodAt(monhoff, physicalArt)","output":"Frederick Monhoff was good at physical art."}
{"input":"¬(∃x (Illustrator(x) ∧ AmericanCitizen(x)))","output":"No illustrator was an American citizen."}
{"input":"∃x (TheSecondSmallestEigenvalueOf(x, theGraphLaplacian) ∧ HonoredBy(miroslavFiedler, x))","output":"Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian."}
{"input":"French(miroslavFiedler) ∧ Mathematician(miroslavFiedler)","output":"Miroslav Fiedler was a French mathematician."}
{"input":"∃x (Czech(x) ∧ Mathematician(x) ∧ KnownFor(x, contributionsToLinearAlgebraAndGraphTheory))","output":"A Czech mathematician is known for his contributions to linear algebra and graph theory."}
{"input":"∀x (Laptop(x) → CanPlayGameOn(x))","output":"You can play games on a laptop."}
{"input":"∀x (Phone(x) → ¬CanPlayGameOn(x))","output":"You can not play games on a phone."}
{"input":"GraduatedWith(walterBrown, bachelorsOfArt)","output":"Walter Folger Brown graduated with a Bachelor of Arts."}
{"input":"∃t(In(walterBrownFather, toledo, t))","output":"Walter Folger Brown's father was in Toledo."}
{"input":"∃t(¬In(walterBrownFather, toledo, t))","output":"Walter Folger Brown was not in Toledo."}
{"input":"With(thinkpadX1, appleM2Chip)","output":"The Thinkpad X1 has an Apple M2 chip."}
{"input":"SoldIn(thinkpadX1, appleStore)","output":"The Thinkpad X1 is sold in Apple Stores."}
{"input":"With(thinkpadX1, appleM2Chip) ∧ Macbook(thinkpadX1)","output":"The Thinkpad X1 has an Apple M2 chip and is a Macbook."}
{"input":"With(thinkpadX1, appleM2Chip)) ⊕ Macbook(thinkpadX1)","output":"The Thinkpad X1 either has an Apple M2 chip or is a Macbook."}
{"input":"(With(thinkpadX1, appleM2Chip) ∧ Macbook(thinkpadX1)) → ¬(With(thinkpadX1, appleM2Chip) ∨ SoldIn(thinkpadX1, appleStore))","output":"If the Thinkpad X1 has an Apple M2 chip and is a Macbook, then it neither has an Apple M2 chip nor is sold in Apple Stores."}
{"input":"In(oxfordCircus, london)","output":"Oxford Circus is in London."}
{"input":"∃x (British(x) ∧ Architect(x) ∧ Design(x, oxfordCircus))","output":"Oxford Circus is designed by a British architect."}
{"input":"∀x (PartOf(x, centralLine) → Design(johnNash, x))","output":"John Nash designed the Central line in 1900."}
{"input":"¬In(regentStreet, london)","output":"Regent Street is not in London."}
{"input":"Ghost(jojo)","output":"Jojo is a ghost."}
{"input":"Cat(jojo) ∨ Ghost(jojo)","output":"Jojo is a cat or a ghost."}
{"input":"Cat(jojo) ∨ Ghost(jojo) → Bark(jojo) ⊕ Dog(jojo)","output":"If Jojo is a cat or a ghost, then Jojo either barks or is a dog."}
{"input":"Husky(fido)","output":"Fido is a husky animal."}
{"input":"¬Husky(fido)","output":"Fido is not a husky."}
{"input":"BengalTiger(fido)","output":"Fido is a Bengal tiger."}
{"input":"¬Dog(fido) ∧ ¬Husky(fido)","output":"Fido is neither a dog nor a husky."}
{"input":"SummerOlympicsIn(unitedStates, yr2028)","output":"The 2028 Summer Olympics will take place in the US."}
{"input":"¬SummerOlympicsIn(georgia, yr1996)","output":"The 1996 Summer Olympics is not in Georgia."}
{"input":"InSummerOlympicsIn(skateboarding, yr2028)","output":"Skateboarding will appear at The 2028 Summer Olympics."}
{"input":"LikePlayingWith(cat, taigaVole)","output":"Cats like playing with taiga vole."}
{"input":"¬LiveIn(taigaVole, coldPlace)","output":"Taiga vole's living place is not cold."}
{"input":"ProstateCancer(adenocarcinoma)","output":"Adenocarcinoma is a prostate cancer."}
{"input":"Affect(adenocarcinoma, men)","output":"Adenocarcinoma is a disease in women."}
{"input":"(Affect(adenocarcinoma, men) ∨ Without(adenocarcinoma, mutation)) → (NonProstateCancer(adenocarcinoma) ∧ Without(adenocarcinoma, mutation))","output":"If adenocarcinoma is a disease in women or without mutations, then adenocarcinoma is without mutations and a non-prostate cancer."}
{"input":"AOC(lg-34)","output":"LG34 machine is produced by AOC."}
{"input":"¬TypeC(lg-34)","output":"LG34 machine does not support the type-c port."}
{"input":"¬A1080p(lg-34)","output":"LG34 is not with a resolution of 1080p."}
{"input":"Fruit(avocado) ∧ SoldAt(avocado, localFarmersMarket)","output":"Avocados are a kind of fruit sold at the local farmers market in New Haven."}
{"input":"SoldAt(avocado, localFarmersMarket) ⊕ SoldIn(avocado, newHaven)","output":"Avocados are either sold at the local farmers market in New Haven or are sold in New Haven."}
{"input":"SoldIn(avocado, newHaven) ⊕ SoldAt(x, nica'sMarket)","output":"Avocados are either sold in New Haven or sold at Nica's market."}
{"input":"¬(SoldAt(avocado, localFarmersMarket) ∧ ShippedFrom(avocado, colombia)) → ¬SoldAt(avocado, localFarmersMarket) ∧ ¬SoldIn(avocado, newHaven)","output":"If avocados are not both sold at the local farmers market in New Haven and shipped from Columbia, then they are neither sold at the local farmers market in New Haven nor in New Haven generally."}
{"input":"ProducedBy(x, aOC)","output":"A-2017 is produced by AOC."}
{"input":"ProducedBy(a-2017, aOC) ∧ In(a-2017, library)","output":"A-2017 is produced by AOC and equipped in the library."}
{"input":"¬(ResolutionLessThan(a-2017, p1080) ⊕ ProducedBy(x, aOC)) → ¬(In(a-2017, library))","output":"If either A-2017 is both with a resolution of 1080p and produced by AOC or it is neither, then it is not equipped in the library."}
{"input":"∃x (SoccerTeam(x) ∧ Holds(x, theLithuanianSuperCup))","output":"Some soccer team holds the Lithuanian Super Cup."}
{"input":"∃x (Village(x) ∧ In(x, england))","output":"There is a village in England."}
{"input":"¬(∃x (CivilParish(x) ∧ In(x, england)))","output":"There is no civil parish in England."}
{"input":"Writer(douglasAdams)","output":"Douglas Adams is a writer."}
{"input":"Create(douglasAdams, innovativeIdea)","output":"Douglas Adams created innovative ideas."}
{"input":"¬Contain(theSalmonOfDoubt, innovativeIdea)","output":"The Salmon of Doubt has no innovative Ideas."}
{"input":"EcoFriendly(reformation) ∧ Brand(reformation)","output":"Reformation is an eco-friendly brand."}
{"input":"FastFashion(reformation) ∧ Product(reformation)","output":"Reformation produces fast fashion products."}
{"input":"¬(FastFashion(reformation) ∧ Product(reformation))","output":"Reformation does not produce fast fashion products."}
{"input":"¬(FastFashion(reformation) ∧ Product(reformation)) ∨ ¬(Disposable(x) ∧ Product(x))","output":"Reformation does not produce fast fashion products or does not produce disposable products."}
{"input":"(Disposable(reformation) ∧ Product(reformation)) → (FastFashion(reformation) ∧ Product(reformation))","output":"If Reformation produces disposable products, then Reformation produces fast fashion products."}
{"input":"(FastFashion(reformation) ∧ Product(reformation)) ∨ ¬HelpSlowDown(reformation, globalWarming)","output":"If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products."}
{"input":"∀x ∀y ((ConsituentCountry(y) ∧ PlayedFor(x, y)) →  ¬Dismissed(shervillehuggins, x))","output":"Sherville Huggins has never dismissed anyone playing cricket for a constituent country."}
{"input":"∀x ((RightHanded(x) ∧ MediumPaceBowler(x)) → ¬PlayedFor(x, sintMaarten))","output":"No right-handed medium-pace bowlers were playing for Sint Maarten."}
{"input":"YaleGraduate(john)","output":"John is a Yale graduate."}
{"input":"AppleMade(unannouncedHuaweiPhone) ∧ Cellphone(unannouncedHuaweiPhone)","output":"Joe is a person taking classes."}
{"input":"Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeByApple(unannouncedHuaweiPhone)","output":"Joe is a PhD student."}
{"input":"¬(Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeByApple(unannouncedHuaweiPhone))","output":"Joe is not a PhD student."}
{"input":"WorldLeadingLightingDesigner(hughVanstone) ∧ From(hughVanstone, unitedKingdom)","output":"Hugh Vanstone is one of the world's leading lighting designers and is from the UK."}
{"input":"∃x(GreaterThan(x, num170) ∧ LitProductions(hughVanstone,x))","output":"Hugh Vanstone has lit 170 productions."}
{"input":"AttendedSchoolIn(hughVanstone, unitedStates)","output":"Hugh Vanstone attended a school in the United States."}
{"input":"RunFasterThan(superman, bolt)","output":"Superman can run faster than Bolt."}
{"input":"∃x (American(x) ∧ ComputerScientist(x) ∧ Called(x, fatherOfTheAnalysisOfAlgorithms))","output":"An American scientist has been called the \"father of the analysis of algorithms\"."}
{"input":"∃x (Mathematician(x) ∧ Called(x, fatherOfTheAnalysisOfAlgorithms))","output":"A mathematician has been called the \"father of the analysis of algorithms\"."}
{"input":"WellKnownFigureIn(donaldErvinKnuth, artificialIntelligence)","output":"Donald Knuth is a well-known figure in the field of artificial intelligence."}
{"input":"∃x (FleaBeetle(x) ∧ In(x, chrysomelidaeFamily))","output":"There is a flea beetle within the Chrysomelidae family."}
{"input":"∀x (FleaBeetle(x) → ¬In(x, chrysomelidaeFamily))","output":"There are no flea beetles within the Chrysomelidae family."}
{"input":"∃x (CarBody(x) ∧ Made(x, carrozzeriaColli) ∧ MadeIn(x, 1931))","output":"Carrozzeria Colli made car bodies in 1931."}
{"input":"∃x (Airplane(x) ∧ Made(x, carrozzeriaColli) ∧ MadeDuring(x, worldWarII))","output":"Carrozzeria Colli built airplanes during World War II."}
{"input":"∃x ∃y (Company(x) ∧ EstablishedBy(x, giuseppeColli) ∧ CarBody(y) ∧ Made(y, x))","output":"Giuseppe Colli established a company that made car bodies."}
{"input":"∃x (Milanese(x) ∧ CoachBuilder(x) ∧ Company(x) ∧ EstablishedBy(x, giuseppeColli) ∧ SpecializesIn(x, usingAluminum))","output":"Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum."}
{"input":"∃x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobil(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))","output":"The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chassis."}
{"input":"GoTo(john, theCinema) ∧ GoTo(john, today)","output":"John will go to the cinema."}
{"input":"¬Bad(weather, today)","output":"The weather is good today."}
{"input":"Sells(quiksilver, beer)","output":"Quiksilver sells beer."}
{"input":"Owns(joe, flannel)","output":"Joe owns a flannel."}
{"input":"∃x (Owns(joe, x) ∧ Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))","output":"Joe owns at least one piece of sportswear, clothing, footwear, or accessory"}
{"input":"VideoGame(beLionel) ∧ PokemonSeries(beLionel)","output":"The video game \"Be Lionel\" is in the pokemon series."}
{"input":"VideoGame(beLionel) ∧  ¬(FIFASeries(beLionel) ⊕ Support(beLionel, pS4))","output":"The video game named “Be Lionel” either is in the FIFA series and supports the PS4 platform, or it neither is in the FIFA series nor supports the PS4 platform."}
{"input":"VideoGame(beLionel) ∧ FIFASeries(beLionel) ⊕ Support(beLionel, pS4)","output":"The video game named “Be Lionel” is either in the FIFA series or supports the PS4 platform."}
{"input":"VideoGame(beLionel) ∧ ¬(FIFASeries(beLionel) ∨ Support(beLionel, pS4))","output":"The video game named “Be Lionel”  is not in the FIFA or Pokemon series."}
{"input":"PaymentCard(bankOfAmerica) ∧ International(bankOfAmerica)","output":"Bank of America payment cards are international."}
{"input":"∀x (PaymentCard(bankOfAmerica) ∧ International(bankOfAmerica) ∧ SocialPayment(x) ∧TransferredTo(x, bankOfAmerica))","output":"Bank of America payment cards are international and can be used to transfer social payments in Russia."}
{"input":"∀x ((PaymentCard(bandOfAmerica) ∧ International(bandOfAmerica) ∧ SocialPayment(x) ∧ TransferredTo(x, bandOfAmerica)) → International(bandOfAmerica))","output":"If Bank of America payment cards are international and can be used to transfer social payments in Russia, then they are international."}
{"input":"Van(luminaAPV)","output":"The Lumina APV is a van."}
{"input":"Car(luminaAPV) ⊕ Van(luminaAPV)","output":"The Lumina APV is either a car or a van."}
{"input":"Van(astro)","output":"The Astro is a van."}
{"input":"Car(astro)","output":"The Astro is a car."}
{"input":"WorkFrom(george, home)","output":"George is a person who works from home."}
{"input":"¬(WorkFrom(george, home) ∧ WorkIn(george, office)) → ¬(Commuter(george) ∨ Have(george, relaxedSchedule))","output":"If George is not a person who works from home and a person who works in the office, then George is neither a commuter nor a person who has a relaxed schedule."}
{"input":"¬(Have(george, homeOffice) ⊕ WorkIn(george, office)) → (WorkFrom(george, home) ⊕ Have(george, relaxedSchedule))","output":"If George is either a person who has a home office setup and a person who works in the office, or neither a person who has a home office setup nor a person who works in the office, then George is either a person who works from home or a person who has a relaxed schedule."}
{"input":"American(joeRogan)","output":"Joe Rogan is American."}
{"input":"MusicSupervisor(jasonKramer)","output":"Jason Kramer is a music supervisor."}
{"input":"RadioPersonality(jasonKramer)","output":"Jason Kramer is a radio personality."}
{"input":"MadeIn(lamborghiniSUV, italy)","output":"A Lamborghini SUV is made in Italy."}
{"input":"¬MadeIn(lamborghiniSUV, italy)","output":"A Lamborghini SUV is not made in Italy."}
{"input":"Bag(kelly) ∧ MadeIn(kelly, maranello) ∧ Birkin(kelly)","output":"A Kelly bag is a Birkin bag made in Maranello."}
{"input":"Bag(kelly) ∧ ¬(MadeIn(kelly, maranello) ∧ Birkin(kelly))","output":"A Kelly bag is not both made in Maranello and a Birkin bag."}
{"input":"∃y (LiveIn(rochelle, y) ∧ Place(y) ∧ Named(y, galicia))","output":"Rochelle lives in a place namedGalicia."}
{"input":"∀x (Live(dominique, x) → ¬In(x, spain))","output":"Dominique does not live in Spain."}
{"input":"∀x (Live(alfonso, x) → In(x, europe))","output":"Alfonso lives in Europe."}
{"input":"Writer(ralphHammerthaler) ∧ BornIn(ralphHammerthaler, asia)","output":"Ralph Hammerthaler is a writer born in Asia."}
{"input":"LivesIn(ralphHammerthaler, germany)","output":"Ralph Hammerthaler lives in Germany."}
{"input":"Win(hamlet, hugoAward)","output":"Hamlet has won a Hugo Award."}
{"input":"Win(hamlet, hugoAward) ∧ WrittenBy(hamlet, tolkien)","output":"Hamlet has won a Hugo Award and is written by Tolkien."}
{"input":"¬(Win(hamlet, hugoAward) ⊕ WrittenBy(hamlet, tolkien)) → (¬Win(hamlet, hugoAward) ∧ (¬WrittenBy(hamlet, neilGaiman)))","output":"If Hamlet has either won a Hugo Award and is written by Tolkien, or neither has won a Hugo Award nor is written by Tolkien, then Hamlet has neither won a Hugo Award nor is written by Neil Gaiman."}
{"input":"Food(grape)","output":"Grapes are food."}
{"input":"¬Food(grape)","output":"Grapes are not a food."}
{"input":"Lemon(banana) ∧ Meadow(banana)","output":"Bananas are both lemons and meadows."}
{"input":"¬(Lemon(banana) ∧ Meadow(banana))","output":"Bananas are not both a lemon and a meadow."}
{"input":"From(bostonCeltics, sanFrancisco)","output":"The Boston Celtics are from San Francisco."}
{"input":"HasMoreThanThirtyYearsOfHistory(bostonCeltics)","output":"The Boston Celtics have more than 30 years of experience."}
{"input":"MoreIncome(goldenStateWarriors)","output":"The Golden State Warriors will have more income from gate receipts."}
{"input":"¬Play(maya, violin)","output":"Maya will not play the violin."}
{"input":"ControlledBy(x, manager)","output":"ModelXX is controlled by managers."}
{"input":"ProducedAfterNewCTOAppointed(modelXX, theCompany) ⊕ ControlledBy(x, manager)","output":"ModelXX is either produced after a new CTO was appointed or it is controlled by managers."}
{"input":"¬With(modelXX, companyLogo) ∧ (¬ControlledBy(x, manager))","output":"ModelXX is not with the company logo, and managers do not control it."}
{"input":"With(modelXX, companyLogo) ⊕ ControlledBy(x, manager)","output":"ModelXX is either with the company logo or controlled by managers."}
{"input":"∃x ∃y (CDPlayer(x) ∧ CDPlayer(y) ∧ Toy(x) ∧ Toy(y) ∧ SuitableFor(x, children) ∧ SuitableFor(y, children) ∧ ¬(x=y))","output":"Some CD players are suitable toys for children."}
{"input":"Sleepy(jumbo)","output":"Jumbo is sleepy."}
{"input":"¬Sleepy(jumbo)","output":"Jumbo is not sleepy."}
{"input":"LivingBeing(jumbo)","output":"Jumbo is a living being."}
{"input":"¬Sleepy(jumbo) ∧ ¬BabyElephant(jumbo))","output":"Jumbo is neither sleepy nor a baby elephant."}
{"input":"¬(Sleepy(jumbo) ⊕ Elephant(jumbo))","output":"Jumbo is not sleepy or an elephant."}
{"input":"CelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)","output":"Europa is a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity."}
{"input":"CelestialBody(europa) ∧ In(europa, solarSystem) ∧ GreaterThan(europa, solarMass, 0.08)","output":"Europa is a celestial body in one of the solar systems that have greater than 0.08 solar masses."}
{"input":"¬(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ GreaterThan(europa, solarMass, 0.08))","output":"Europa is not a celestial body in one of the solar systems that have greater than 0.08 solar masses."}
{"input":"NeedToBeWrittenWith(asItWasByHarryStyles, words)","output":"“As it was” by Harry Styles needs to be written with words."}
{"input":"Song(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury)","output":"\"As it was” by Harry Styles is a song from the 12th century."}
{"input":"¬(Song(asItWasByHarryStyles) ∧ By(asItWasByHarryStyles, kanyeWest) ∧ NeedToBeWrittenWith(asItWasByHarryStyles, words))","output":"\"As it was” by Harry Styles is not both a song from Kanye West and needed to be written with words."}
{"input":"Popular(yourWoman)","output":"\"Your Woman\" was extremely popular."}
{"input":"∀x (Produce(whiteTown, x) → ¬Popular(x))","output":"White Town did not produce any popular songs."}
{"input":"Successful(whiteTown)","output":"White Town was a successful band."}
{"input":"Function(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)","output":"The maximum of quasiconvex functions is a function that represent straight lines on the coordinate plane."}
{"input":"¬RealValuedFunction(maximumOfQuasiConvexFunction)","output":"The maximum of quasiconvex functions is not a real-valued function."}
{"input":"QuasiConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬RealValuedFunction(maximumOfQuasiConvexFunction)","output":"The maximum of quasiconvex functions is a quasi-convex function or it is not a real-valued function."}
{"input":"PlayPenalty(realMadrid, atleticoMadrid)","output":"Real Madrid and Atlético Madrid needed to play a penalty shoot-out in the 2016 UCL final."}
{"input":"¬PlayPenalty(realMadrid, atleticoMadrid)","output":"Real Madrid and Atlético Madrid did not need to play a penalty shoot-out in the 2016 UCL final."}
{"input":"∃x (Form(x, system7) ∧ FormerMemberOf(x, gong))","output":"System 7 was formed by former members of Gong."}
{"input":"∃x (Single(x) ∧ Release(system7, x))","output":"System 7 has released several singles."}
{"input":"¬Band(system7)","output":"System 7 is not a band."}
{"input":"∀x (Model(x) ∧ Extractive(x) → Faithful(x))","output":"Extractive models are always faithful."}
{"input":"∃x (Model(x) ∧ Extractive(x) ∧ ¬Faithful(x))","output":"Extractive models are not always faithful."}
{"input":"RobinsFriends(mark) ∧ StudyHard(mark)","output":"Mark is Robin's friend and he is a person who studies hard."}
{"input":"RobinsFriends(mark) ∧ Practice(mark, codingQuestion) ∧ WantToWorkIn(mark, softwareEngineeringIndustry)","output":"Mark is Robin's friend and he practices coding questions and wants to work in the software engineering industry."}
{"input":"RobinsFriends(mark) ∧ ¬(Practice(mark, codingQuestion) ∨ WantToWorkIn(mark, softwareEngineeringIndustry))","output":"Mark is Robin's friend and he neither practices coding questions nor works to work in the software engineering industry."}
{"input":"SpendFrivolously(thomas, aLotOfMoney)","output":"Thomas frivolously spends a lot of money."}
{"input":"Enjoy(thomas, shopping, materialisticItem) ⊕ GoToSpaFrequently(thomas)","output":"Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently."}
{"input":"Enjoy(thomas, shopping, materialisticItem) ⊕ GoToSpaFrequently(thomas) → ¬((Value(x, qualityManufacturing) ∧ Value(x, luxuryItem)) ∨ GoToSpaFrequently(thomas))","output":"If Thomas either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa frequently, then Thomas neither values quality manufacturing and luxury items nor goes to the spa frequently."}
{"input":"CertifiedGold(wolfgangamAdeusPhoenix)","output":"The album \"Wolfgang Amadeus Phoenix\" is a certified gold album."}
{"input":"CertifiedGold(1901)","output":"The single \"1901\" is a certified gold single."}
{"input":"¬WakesUp(theHulk) → ¬Happy(thor)","output":"If the Hulk does not wake up, then Thor is not happy."}
{"input":"Happy(thor) → Wears(peterParker, uniform)","output":"If Thor is happy, then Peter Parker wears a uniform."}
{"input":"¬Happy(thor) → ¬Breaks(thor, bridge)","output":"If Thor is not happy, then no bridge will be broken."}
{"input":"¬(PreferredTreatmentFor(riverBlindness, diethylcarbamazine))","output":"Diethylcarbamazine is not preferred for the treatment of river blindness."}
{"input":"Treats(diethylcarbamazine, riverBlindness)","output":"Diethylcarbamazine was often used to treat river blindness."}
{"input":"Treats(diethylcarbamazine, filariasis)","output":"Diethylcarbamazine is used in the treatment of filariasis."}
{"input":"RealNumber(one)","output":"One is a real number."}
{"input":"PrimeNumber(one) ∧ NaturalNumber(one)","output":"One is a prime number and a natural number."}
{"input":"PrimeNumber(one) ⊕  NaturalNumber(one)","output":"One is either a prime number or a natural number."}
{"input":"Mild(bladderCancer)","output":"Bladder cancer is a mild disease."}
{"input":"Leukemia(bladderCancer)","output":"Bladder cancer is Leukemia."}
{"input":"RareDisease(bladderCancer) ⊕ Mild(bladderCancer)","output":"Bladder cancer is either a rare disease or a mild disease."}
{"input":"RareEarthElement(lithium)","output":"Lithium is a rare earth element."}
{"input":"Element(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y)) ∧ UsedFor(lithium, batteries)","output":"Lithium is an element with atomic number between 61-63 and is used for batteries."}
{"input":"¬(EssentialFor(lithium, electronics) ⊕ (∃y(Between(y, num61, num63) ∧ AtomicNumber(lithium, y)))) → ¬(¬RareEarthMetals(lithium) ∨ UsedIn(lithium, industry))","output":"If Lithium is not essential for exploring future directions of electronics or an element with atomic number between 61-63, then Lithium is not a non-rare earth element or usable in industry."}
{"input":"¬(CareAbout(jack, cleanliness))","output":"Jack doesn't care about cleanliness."}
{"input":"CareAbout(jack, cleanliness)","output":"Jack does care about cleanliness."}
{"input":"Have(jack, tidyHouse)","output":"Jack has a tidy house."}
{"input":"¬(¬CareAbout(jack, cleanliness) ∨ ¬CleanOften(jack, home)","output":"Jack neither lives in the suburbs nor is too busy to clean."}
{"input":"¬Prioritize(jack, cleaning) ∨ ¬CareAbout(jack, cleanliness)","output":"Jack is overburdened and lives in the suburbs."}
{"input":"¬Falling(bottle) → ToppleOver(bottle)","output":"The bottle not falling is toppled over."}
{"input":"Organized(john)","output":"John is short sighted."}
{"input":"ChooseWhatToDoWith(john, time)","output":"John chooses what he want to do with his time."}
{"input":"(Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ ShortSighted(john)","output":"John is either a hardworking individual with high ambitions and goals for the future or is short sighted."}
{"input":"MultinationalCompany(ableton)","output":"Ableton is a multinational company."}
{"input":"MakesAISoftware(ableton)","output":"Ableton makes AI software."}
{"input":"¬OfficeIn(ableton, germany)","output":"Ableton does not have an office in Germany."}
{"input":"Flightless(fido) ∧ Bird(fido)","output":"Fido is a flightless bird"}
{"input":"¬(NonFlying(fido) ∧ Bird(fido) ∧ In(fido, antarctica)) ∧ ¬GlideInAir(fido)","output":"Fido is not a nonflying bird in Antarctica, and he cannot glid in the air."}
{"input":"(FlyOver(fido, vastDistance) ⊕ ¬FlyOver(fido, vastDistance)) → (NonFlying(fido) ∧ Bird(fido) ∧ In(fido, antarctica))","output":"If Fido either can fly over a vast distance or cannot fly over a vast distance, then Fido is a nonflying bird in Antartica."}
{"input":"MemberOf(leon, universityFaculty)","output":"Leon is a member of university faculty."}
{"input":"¬UndergraduateStudent(leon) ∧ ¬PrincipalInvestigator(leon)","output":"Leon is neither an undergraduate student nor a principal investigator."}
{"input":"¬PrincipalInvestigator(leon) → UndergraduateStudent(leon)","output":"If leon is not a principal investigator, then Leon is an undergraduate student."}
{"input":"¬(∃x (Cutman(x) ∧ AppearIn(x, boxingMatch)))","output":"No cutmen appear in boxing matches."}
{"input":"∀x (¬Cutman(x) → ¬Handle(x, nosebleed))","output":"If someone is not a cutman, then they cannot handle nosebleeds."}
{"input":"Treat(jack, physicalDamageToAFighter)","output":"Jack is responsible for treating physical damage to a fighter."}
{"input":"∃x ∃y (Painting(x) ∧ TheWorldsBestKnown(x) ∧ PaintedBy(x, y) ∧ Scientist(y))","output":"A world's best-known artwork is painted by a scientist."}
{"input":"∃x (PaintedBy(x, leonardodaVinci) ∧ Landscape(x))","output":"Leonardo da Vinci has artworks in the landscape genre."}
{"input":"∀x (WorldsBestKnown(x)  → ¬Portrait(x))","output":"No world's best-known artworks are portraits."}
{"input":"GrandSlamUmpire(nadal)","output":"Nadal is a Grand Slam umpire."}
{"input":"¬GrandSlamUmpire(nadal)","output":"Nadal is not a Grand Slam umpire."}
{"input":"GrandSlamChampion(nadal)","output":"Nadal is a Grand Slam champion."}
{"input":"¬(GrandSlamUmpire(nadal) ∨ ProfessionalTennisUmpire(nadal))","output":"Nadal is neither a Grand Slam umpire nor a professional tennis umpire."}
{"input":"ProfessionalTennisUmpire(nadal) → GrandSlamUmpire(nadal)","output":"If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire."}
{"input":"GrandSlamUmpire(nadal) ∨ ProfessionalTennisPlayer(nadal) → GrandSlamUmpire(nadal)","output":"If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire."}
{"input":"Sanctioned(crudeOilDataExchange)","output":"Crude Oil Data Exchange is sanctioned."}
{"input":"¬Sanctioned(crudeOilDataExchange)","output":"Crude Oil Data Exchange is unsanctioned."}
{"input":"Limited(crudeOilDataExchange)","output":"Crude Oil Data Exchange is limited."}
{"input":"Invigorating(v)","output":"The end of a relationship is invigorating"}
{"input":"Popularized(johnEvans, termPalstave)","output":"John Evans Popularized the term paalstab."}
{"input":"∃x (Axe(x) ∧ FoundIn(x, westernEurope))","output":"There is an axe that is found in Western Europe."}
{"input":"∀x ∀y (Archeologist(x) → ¬Popularize(x, y))","output":"Archeologists haven't popularized anything."}
{"input":"∃x (Company(x) ∧ Holds(koeitecmo, x))","output":"Koei Tecmo holds another company."}
{"input":"∃x (Company(x) ∧ Holds(tecmo, x))","output":"Tecmo holds another company."}
{"input":"AnimeHoldingCompany(koeitecmo)","output":"Koei Tecmo holds anime."}
{"input":"Compatible(playStationEye, playStation2) ∧ Compatible(playStationEye, playStation3)","output":"The Playstation Eye is compatible with the PlayStation 2 and the PlayStation 3."}
{"input":"Compatible(playStationEyeToy, playStation2)","output":"The Playstation EyeToy is compatible with the PlayStation 2."}
{"input":"Compatible(playStationCamera, playStation2) ∧ Compatible(playStationCamera, playStation3) ∧ Compatible(playStationCamera, playStation4) ∧ Compatible(playStationCamera, playStation5)","output":"The Playstation Camera can be used for all Playstation consoles."}
{"input":"∃y (Call(american, y, soccer) ∧ Play(adamBuska, y))","output":"Adam Buska plays what Americans call soccer."}
{"input":"Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)","output":"Pokemon Diamond version supports Windows."}
{"input":"(Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ∧ (Game(PokemonDiamond) ∧ SoldMoreThan100MillionCopies(PokemonDiamond))","output":"Pokemon Diamond version supports Windows and has sold more than 100 million copies."}
{"input":"((Game(PokemonDiamond) ∧ SupportsWindows(PokemonDiamond)) ⊕ ((Game(PokemonDiamond) v (SoldMoreThan100MillionCopies(PokemonDiamond))) → (Multiplatform(PokemonDiamond) ∧ (Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond))) ⊕ (¬Multiplatform(PokemonDiamond) ∧ ¬(Game(PokemonDiamond) ∧ ATop3BestSellingVideoGame(PokemonDiamond)))","output":"If Pokemon Diamond version either supports Windows or has sold more than 100 million copies, then Pokemon Diamond version either is both multiplatform and one of the top-3 best selling video games, or is neither multiplatform nor one of the top-3 best selling video games."}
{"input":"∀x (From(x, countryOfBRICS) → ¬IndianPeople(x))","output":"No people from BRICS are Indian people."}
{"input":"EmergingEconomy(india)","output":"India's economy is not emerging."}
{"input":"∃x (IndianPeople(x) ∧ From(x, countryOfBRICS))","output":"There is an Indian people from BRICS."}
{"input":"Film(hamilton)","output":"Hamilton is a film."}
{"input":"Wins(daveedDiggs, bestActorAward)","output":"Daveed Diggs won the best actor award."}
{"input":"∃x ∃y(Wins(hamilton, x) ∧ (¬(x=y)) ∧ Wins(hamilton, y))","output":"Hamilton won two awards."}
{"input":"¬ScoredOver(ernestPohl, 180Goals)","output":"Ernest Pohl has not scored more than 180 goals."}
{"input":"∀x (GornikZabrzes(x) ∧ Stadium(x) → NamedAfter(x, ernestPohl))","output":"Górnik Zabrze's stadium was named after Ernest Pohl."}
{"input":"ElectedTo(ann, philadelphiaCityCouncil, year1980)","output":"Ann J. Land was elected to the Philadelphia City Council in 1980."}
{"input":"ElectedTo(ann, philadelphiaCityCouncil, year1987)","output":"Ann J. Land was elected to the Philadelphia City Council in 1987."}
{"input":"∃x (MemberOf(x, democraticParty) ∧ ElectedTo(x, philadelphiaCouncil, year1980))","output":"There was some member of the Democratic Party elected to the Philadelphia City Council in 1980."}
{"input":"WonCup(rangers, year2015Final)","output":"Rangers won the cup in 2015."}
{"input":"WonCup(rangers, year2013Final)","output":"Rangers won the cup in 2013."}
{"input":"∃x (WonCup(aberdeen, x))","output":"Aberdeen has once won a cup."}
{"input":"LiveIn(mary, manhattan)","output":"Mary lives in Manhattan."}
{"input":"LiveIn(mary, manhattan) ∧ YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job)","output":"Mary lives in Manhattan and is a young working professional who has a regular 9-5 job."}
{"input":"YoungWorkingProfessional(mary) ∧ Have(mary, regular9-5Job) → ¬LiveIn(mary, manhattan)","output":"If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan."}
{"input":"PrecededBy(pictureMemory, dataProcessing)","output":"Picture memory is preceded by data processing."}
{"input":"BlockDesign(pictureMemory)","output":"Picture memory is a block design."}
{"input":"BlockDesign(pictureMemory) ⊕ Analyze(pictureMemory, data)","output":"Picture memory is either a block design or analyzing data."}
{"input":"¬Analyze(pictureMemory, data) → (BlockDesign(pictureMemory) ∧ Analyze(pictureMemory, data))","output":"If picture memory is not analyzing data, then picture memory is a block design and analyzing data."}
{"input":"CurrentlyDecommissioned(theUSSLyon)","output":"The USS Lyon is currently decommissioned."}
{"input":"EcoFriendly(chopsticks)","output":"The chopsticks used in Tom's house are eco-friendly."}
{"input":"EcoFriendly(chopsticks) ∨ DesignedToBeOnlyUsedOnce(chopsticks)","output":"The chopsticks used in Tom's house are eco-friendly or designed to be used only once."}
{"input":"MadeFrom(chopsticks, plastic) ∨ DesignedBeOnlyUsedOnce(chopsticks) → MadeFrom(chopsticks, plastic) ∧ EcoFriendly(chopsticks)","output":"If chopsticks used in Tom's house are made from plastic or designed to be used only once, then they are made from plastic and are eco-friendly."}
{"input":"Animal(sid)","output":"Sid is an animal."}
{"input":"Energetic(sid) ∧ Animal(sid)","output":"Sid is an energetic person and an animal."}
{"input":"Animal(sid) ⊕ Unproductive(sid)) → ¬Energetic(sid)","output":"If Sid is either an animal or unproductive, then Sid is not an energetic person."}
{"input":"HigherRank(manchesterCity, manchesterUnited)","output":"Manchester City has a higher ranking than Manchester United."}
{"input":"FootballCoach(dennisGreen)","output":"Dennis Green is a football coach."}
{"input":"¬PlayInNFL(johnRandle)","output":"John Randle didn't play in the National Football League."}
{"input":"PlayPositionFor(crisCarter, wr, minnesotaVikings, year1997)","output":"Cris Carter played for Minnesota Vikings."}
{"input":"PrivateStudySpot(room116)","output":"Room 116 is a private study spot."}
{"input":"¬(BookedDuring(room116, day) ⊕ FreelyUsableAtNight(room116) → (UsedFor(room116, officeHour) ⊕ PrivateStudySpot(room116))","output":"If Room 116 is either both booked during the day and freely usable at night, or neither, then it is either used for office hours or for private study spots."}
{"input":"¬(PrivateStudySpot(room116) ∧ FreelyUsableAtNight(room116)) → (UsedFor(room116, lecture) ∨ BookedIn(room116, evening))","output":"If Room 116 is not both a private study spot and freely useable at night, then it is either used for lectures or booked during the day."}
{"input":"SoutheastOf(baku, shafaq-asiman)","output":"Baku is southeast of Shafaq-Asiman."}
{"input":"∃x (LargeComplex(x) ∧ SoutheastOf(x, baku))","output":"A large complex is southeast of Baku."}
{"input":"∀x (GeologicalStructures(x) ∧ Offshore(x) → ¬NorthwestOf(baku, x))","output":"Baku is not northwest of offshore geological structures."}
{"input":"Tutor(herodicus, hippocrates)","output":"Herodicus tutored Hippocrates."}
{"input":"Tutor(hippocrates, herodicus)","output":"Herodicus was tutored by Hippocrates."}
{"input":"∃x (Born(herodicus, x) ∧ CityState(x))","output":"Herodicus was born in a city-state."}
{"input":"¬Recommend(herodicus, massages)","output":"Herodicus did not recommend massages."}
{"input":"∃x ∃y (Born(herodicus, x) ∧ Colony(x, y) ∧ CityState(y))","output":"Herodicus was born in a colony of a city-state."}
{"input":"Student(billy)","output":"Billy is a student."}
{"input":"Student(billy)  ∧ Scientist(billy)","output":"Billy is a student and a scientist."}
{"input":"(Student(billy) ∨ Scientist(billy)) → (Student(billy) ∧ Kid(billy))","output":"If Billy is a student or a scientist, then Billy is a student and a kid."}
{"input":"∃x ∃y(SonOf(x, y) ∧ RefereeObserver(y) ∧ FootballPlayer(x))","output":"There is a son of a referee observer that plays football."}
{"input":"¬RefereeObserver(brianwinter)","output":"Brian Winter was not a referee observer."}
{"input":"Retired(brianwinter)","output":"Brian Winter is retired."}
{"input":"Referee(andywinter)","output":"Andy Winter is a referee."}
{"input":"Planner(erica)","output":"Erica plans."}
{"input":"InterestedIn(erica, puzzle) ∧ Creative(erica)","output":"Erica is interested in puzzles and is creative."}
{"input":"InterestedIn(erica, puzzle) ⊕ Creative(erica)","output":"Erica is either interested in puzzles or is creative."}
{"input":"Planner(erica) ∨ PlaysOften(erica, chess))) → (¬(InterestedIn(erica, puzzle) ∧ Creative(erica))","output":"If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative."}
{"input":"Creative(erica)) → (¬(InterestedIn(erica, puzzle) ∧ Creative(erica))","output":"If Erica is creative, then Erica is not interested in puzzles and creative."}
{"input":"InterestedIn(erica, puzzle) ∧ Creative(erica)) → ¬Creative(erica)","output":"If Erica is interested in puzzles and is creative, then Erica is not creative."}
{"input":"PlaysOften(erica, chess) ⊕ InterestedIn(erica, puzzle) → ¬(InterestedIn(erica, puzzle) ∨ PlaysOften(erica, chess))","output":"If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches."}
{"input":"PlaysOften(erica, chess) ⊕ InterestedIn(erica, puzzle)) → ¬(InterestedIn(erica, puzzle) ∨ PlaysOften(erica, chess)","output":"If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative."}
{"input":"Planner(erica) ∨ InterestedIn(erica, puzzle) → Creative(erica)","output":"If Erica plans ahead or is interested in puzzles, then Erica is creative."}
{"input":"BadAt(erica, chess) ⊕ InterestedIn(erica, puzzle) → ¬(PlaysOften(erica, chess) ∧ Creative(erica))","output":"If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative."}
{"input":"TopSoccerPlayer(ronaldo)","output":"Cristiano Ronaldo is a top soccer player."}
{"input":"¬TopSoccerPlayer(ronaldo)","output":"Cristiano Ronaldo is not a top soccer player."}
{"input":"ForConservation(nationalLobsterhatchery)","output":"The National Lobster Hatchery is for conservation."}
{"input":"∀x (Hatchery(x) → OpenToVisitors(x))","output":"All hatcheries are open to visitors."}
{"input":"ReleaseAnimalToWild(nationalLobsterhatchery)","output":"The National Lobster Hatchery releases animals into the wild."}
{"input":"∃x (Rhosaelwydfc(x) ∧ WonPremierDivisionDuring(x, year2005MonthJune))","output":"Rhos Aelwyd F.C. won Premier Division in June 2005."}
{"input":"∃x (Rhosaelwydfc(x) ∧ PromotedTo(x, cymruAlliance))","output":"Rhos Aelwyd F.C. was promoted to the Cymru Alliance."}
{"input":"Popular(burger)","output":"Burger is popular."}
{"input":"¬Popular(burger)","output":"Burger is not popular."}
{"input":"Popular(pytorch) ∧ WrittenWithCode(pytorch)","output":"PyTorch is popular and written with code."}
{"input":"¬(Popular(pytorch) ∧ WrittenWithCode(pytorch))","output":"PyTorch is not popular and it is not written with code."}
{"input":"LastLonger(firstRoad, secondRoad)","output":"The first road will last longer than the second road."}
{"input":"¬Smoother(firstRoad, secondRoad)","output":"The second road is not smoother than the first one."}
{"input":"Prefer(john, secondRoad)","output":"John prefers the second road."}
{"input":"∃x (Old(x) ∧ TraditionalSummerCamp(x) ∧ ForBoysAndGirls(x))","output":"One of Ontario's oldest summer camps is a traditional summer camp for boys and girls."}
{"input":"∃x (TraditionalSummerCamp(x) ∧ ForBoysAndGirls(x) ∧ OperatedUntil(YMCA, x, year2015))","output":"A traditional summer camp for boys and girls was operated by the YMCA until the year 2015."}
{"input":"EstablishedIn(campdavern, year1989)","output":"Camp Davern was established in 1989."}
{"input":"EmilysFriends(taylor) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))","output":"Taylor is Emily's friend and she often holds tenured and high-ranking positions at her workplace."}
{"input":"EmilysFriends(taylor) ∧ (Receive(taylor, glowingFeedback, colleague) ∧ Receive(taylor, glowingRecommendation, colleague) ∧ AwardWinningNovelist(taylor))","output":"Taylor is Emily's friend and she often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist."}
{"input":"EmilysFriends(taylor) ∧ ¬(Publish(taylor, journal) ∧ AwardWinningNovelist(taylor))","output":"Taylor is Emily's friend and she does not both publish journals and is an award-winning novelist."}
{"input":"WorkedWith(WhalenTurner, greenWillowbooks)","output":"Megan Whalen Turner worked with Greenwillow Books."}
{"input":"PlotsToSwallowUp(medeEmpire, attolia)","output":"The Mede Empire plans to swallow up Attolia."}
{"input":"¬SetIn(thickAsTheives, medeEmpire)","output":"Thick as Thieves is not set in the Mede Empire."}
{"input":"¬WorkedWith(megan, greenWillowbooks)","output":"Megan Whalen Turner did not work with Greenwillow Books."}
{"input":"∃x ∃y (TabletComputer(x) ∧ German(y) ∧ Producer(y) ∧ AnnouncedBy(x, y))","output":"There is a tablet computer announced by a German producer."}
{"input":"¬Speak(neofonie, english) ∧ ¬Speak(neofonie, german)","output":"Neofonie doesn't speak English or German."}
{"input":"EmployeesInJamesSTown(leif) ∧ GoodAt(leif, math)","output":"Leif is good at math."}
{"input":"¬(GoodAt(leif, math) ∧ WorkIn(leif, businessAnalysis))","output":"Leif is not both good at math and working in business analysis."}
{"input":"¬(GoodAt(leif, math) ∧ WorkIn(leif, businessAnalysis)) → (¬WorkFor(x, thisCompany) ∧ ¬WorkIn(x, softwareEngineering))","output":"If Leif is not both good at math and in business analysis, then he is neither working in this company nor working in software engineering."}
{"input":"MostPopular(blueberry)","output":"Blueberries were the most popular fruit at the party."}
{"input":"MostPopular(cherry)","output":"Cherries were the most popular fruit at the party."}
{"input":"Eat(blueberry, benjamin)","output":"Benjamin ate blueberries at the party."}
{"input":"Attend(james) ∧ (¬AttendInPerson(james))","output":"James attends the conference but not in person."}
{"input":"Attend(jack) ∧ AttendInPerson(jack)","output":"Jack attends the conference in person."}
{"input":"Registered(jack)","output":"Jack has registered for the conference."}
{"input":"IsraeliCitizen(davidHaivri)","output":"David Ha'ivri is an Israeli citizen."}
{"input":"American(davidHaivri)","output":"David Ha'ivri is a United States citizen."}
{"input":"ElectedTo(davidHaivri, shomronMunicipalCouncil)","output":"David Ha'ivri has been elected to the Shomron Regional Municipal council."}
{"input":"Has(mary, influenza) ⊕ Has(susan, influenza)","output":"Either Mary or Susan has influenza."}
{"input":"∀x (Lawyer(x) → ¬SatInHouseOfCommons(x))","output":"No lawyer ever sat in the House of Commons."}
{"input":"∃x (European(x) ∧ FamiliarWithLaws(x))","output":"Some European was familiar with laws."}
{"input":"SpeakFrench(james)","output":"James Cocks speaks French."}
{"input":"Fantasy(beastsOfpPrey) ∧ Novel(beastsOfPrey)","output":"Beasts of prey is a fantasy novel."}
{"input":"¬ScienceFiction(beastsofprey) ∧ Novel(beastsOfPrey)","output":"Beasts of prey isn't a science fiction novel."}
{"input":"Mythological(shetani) ⊕ Creature(shetani)","output":"A shetani is either mythological or a creature."}
{"input":"NotablePerson(jackODell)","output":"Jack Odell is a notable person."}
{"input":"Named(amyODell, nameODell)","output":"Odell is Amy Odell's surname."}
{"input":"English(amyODell) ∧ ToyInventor(amyODell)","output":"Amy Odell is an English toy inventor."}
{"input":"Named(amyODell, nameODell) ∧ Named(amyODell, nameO'Dell)","output":"Amy Odell is also Amy O'Dell."}
{"input":"FromAndTo(newHaven, newYork) ∧ GoByTrain(mary)","output":"Mary gets from New Haven to New York City by train."}
{"input":"FromAndTo(newHaven, newYork) ∧ GoByCar(mary)","output":"Mary gets from New Haven to New York City by car."}
{"input":"Meet(mary, trafficJam)","output":"Mary meets a traffic jam."}
{"input":"∀x (¬Hungry(x) → ¬Happy(x))","output":"If a person is not hungry, the person is unhappy."}
{"input":"WhiteCollarWorker(mary)","output":"Mary is a white-collar worker."}
{"input":"Advocate(mary)","output":"Mary is an advocate."}
{"input":"¬Advocate(mary)","output":"Mary is not an advocate."}
{"input":"Advocate(mary) ⊕ TippedEmployee(mary)","output":"Mary is either an advocate or a tipped employee."}
{"input":"(¬(Advocate(mary) ∧ EntitledTo(mary, federalMinimumWage))) → ¬TippedEmployee(mary)","output":"If Mary is not both an advocate and is entitled to be paid the federal minimum wage by their employees, she is not a tipped employee."}
{"input":"(Advocate(mary) ⊕ TippedEmployee(mary)) → Advocate(mary)","output":"If Mary is either an advocate or a tipped employee, she is an advocate."}
{"input":"NewYorker(asaHoffmann)","output":"Asa Hoffmann is a New Yorker."}
{"input":"GrandMaster(asaHoffmann)","output":"Asa Hoffmann is a grandmaster."}
{"input":"¬LiveIn(asaHoffmann, newYorkCity)","output":"Asa Hoffmann does not live in New York."}
{"input":"Get(philip, schengenVisa)","output":"Philip got a Schengen visa."}
{"input":"Apply(philip, schengenVisa) ∧ Get(philip, schengenVisa)","output":"Philip applied for a Schengen visa and got it."}
{"input":"(¬Request(philip, documentsFromBank) ∧ ¬Get(x, schengenVisa)) → Apply(x, schengenVisa)","output":"If Philip did not request documents from the bank or get a Schengen visa, he didn’t apply for a Schengen visa."}
{"input":"∀x ∀y (Fear(x) → ¬(Terror(y) ∧ LeadTo(x, y)))","output":"No fears lead to terror."}
{"input":"∃x ∃y (Erie(y) ∧ MajorSettlementOf(x, y))","output":"Lake Erie has a major settlement."}
{"input":"∃x (GreatLake(x) ∧ ¬FormAtEndOf(x, lastGlacialPeriod))","output":"There is a great lake that did not form at the end of the Last Glacial Period."}
{"input":"Professional(stephenCurry) ∧ BasketballPlayer(stephenCurry)","output":"Stephen Curry is a professional basketball player."}
{"input":"Professional(stephenCurry) ∧ CenterBack(stephenCurry)","output":"Stephen Curry is a professional centerback."}
{"input":"¬(Professional(stephenCurry) ∧ CenterBack(stephenCurry))","output":"Stephen Curry is not a centerback."}
{"input":"Proposed(thomasGilovich, naiveCynicism)","output":"Thomas Gilovich proposed naive cynicism."}
{"input":"∃x (Proposed(justinKruger, x) ∧ PhilosophyOfMind(x))","output":"Justin Kruger proposed a philosophy of mind."}
{"input":"∃x (WorkedOn(thomasGilovich, x) ∧ PhilosophyOfMind(x))","output":"Thomas Gilovich worked on philosophies of mind."}
{"input":"∃x ∃y (¬(x=y) ∧ AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(x, artificialIntelligence)  ∧ ContributedTo(y, artificialIntelligence))","output":"At least two people who have won the Turing Award worked in artificial intelligence."}
{"input":"∃x ∃y (¬(x=y) ∧ ContributedTo(x, artificialIntelligence) ∧ ContributedTo(x, artificialIntelligence) ∧ AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y))","output":"At least two people who worked in artificial intelligence have won the Turing Award."}
{"input":"∃x ∀y ((AwardedTo(turingAward, x) ∧ AwardedTo(turingAward, y) ∧ ContributedTo(y, algorithms) ∧ ¬(x=y)) → ¬ContributedTo(y, algorithms))","output":"Only one person who won the Turing Award made significant contributions to the analysis of algorithms."}
{"input":"∀x (AwardedTo(turingAward, x) → ¬ContributedTo(x, numericalMethods))","output":"No Turing Award winners worked in the field of numerical methods."}
{"input":"LeetcodeProblems(twosum) ∧ Easy(twosum)","output":"2Sum is an easy Leetcode problem."}
{"input":"¬(LeetcodeProblems(twosum) ∧ Easy(twosum))","output":"2Sum is not an easy Leetcode problem."}
{"input":"RecommendedTo(foursum, novices) ∨ Hard(foursum)","output":"4Sum is recommended to novices or is hard."}
{"input":"¬RecommendedTo(foursum, novices) ∧ ¬Hard(foursum)","output":"4Sum is neither recommended to the novice nor a Leetcode problem that's hard."}
{"input":"∀x ∀y (Wrote(x, showYourLove) → ¬(BoyBand(y) ∧ MemberOf(x, y)))","output":"Show Your Love wasn't written by a member of a boy band."}
{"input":"∃x (LeadSingleOf(x, inside) ∧ Contains(x, hopefulMessage))","output":"A lead single of Inside contains a hopeful message."}
{"input":"Korean(hyunsik)","output":"Hyunsik is Korean."}
{"input":"∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Round(x) ∧ Round(y) ∧ ¬(x=y))","output":"Some pieces of furniture are round."}
{"input":"∃x ∃y (Commited(x, crime) ∧ Commited(y, crime) ∧ ProductOf(x, brokenHome) ∧ ProductOf(y, brokenHome) ∧ ¬(x=y))","output":"Some people who have committed a crime are products of broken homes."}
{"input":"MindReading(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)","output":"Multivoxel (pattern) analysis is a brain decoding."}
{"input":"MindReading(multivoxelPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis)","output":"Multivoxel (pattern) analysis is the writing of a novel."}
{"input":"¬(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis))","output":"Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel."}
{"input":"¬(Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∨ NovelWriting(multivoxelPatternAnalysis))","output":"Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel."}
{"input":"¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ⊕ Writing(multivoxelPatternAnalysis, aNovel)","output":"Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel."}
{"input":"(MindReading(multivoxelPatternAnalysis) ∧ NovelWriting(multivoxelPatternAnalysis)) → (Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∨ ¬NovelWriting(multivoxelPatternAnalysis))","output":"If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel."}
{"input":"RoomFor(allison, broccoli)","output":"Allison has room for broccoli."}
{"input":"AtLuisParty(mauricia)","output":"Mauricia is at Luis's dinner party."}
{"input":"RoomFor(gustave, dessert)","output":"Gustav has room for dessert."}
{"input":"∃x ∃y (RockBand(x) ∧ LeadSinger(x, y) ∧ SongWriter(y))","output":"Some rock band has a lead singer who is also a songwriter."}
{"input":"¬Musician(dan)","output":"Dan is not a musician."}
{"input":"BillboardHot100(demons)","output":"Demons has been on Billboard Hot 100."}
{"input":"Sophist(theisticGod)","output":"The theistic God is a sophist."}
{"input":"Sophist(theisticGod) ∧ Philosopher(theisticGod)","output":"The theistic God is a sophist and a philosopher."}
{"input":"Philosopher(theisticGod) → ¬Sophist(theisticGod)","output":"if the theistic God is a philosopher, then he is not a sophist."}
{"input":"∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, water))","output":"Noah needs to pay the water bill."}
{"input":"¬Cover(noah, heating) ∧ ¬Cover(ava, heating)","output":"Noah and Ava both need to pay the heating bill."}
{"input":"∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water))","output":"Susan does not need to pay the water bill."}
{"input":"Perfect(fabricbundle)","output":"The fabric bundle is perfect."}
{"input":"Skirt(fabricbundle)","output":"The fabric bundle is a skirt."}
{"input":"¬Skirt(fabricbundle)","output":"The fabric bundle is not a skirt."}
{"input":"Animal(leo)","output":"Leo is an animal."}
{"input":"¬Liked(leo, charlie) ∧ ¬Cares(charlie, leo)","output":"Charlie does not like Leo and does not care for Leo."}
{"input":"∀x (Dog(x) → ¬Naughty(x))","output":"Dogs are not always naughty."}
{"input":"∀x (Scare(x) → Fun(x))","output":"All scares are fun."}
{"input":"Won(threeBodyProblem, hugoAward)","output":"The Three-Body Problem won the Hugo Award."}
{"input":"AboutFuture(threeBodyProblem)","output":"The Three-Body Problem is forward-looking."}
{"input":"WrittenBy(threeBodyProblem, cixinLiu)","output":"The Three-Body Problem was written by Cixin Liu."}
{"input":"LateNightPerson(james)","output":"James is a late night person."}
{"input":"LateNightPerson(james) ∧ EarlyMorningPerson(james)","output":"James is a late night person and an early-morning person."}
{"input":"EarlyMorningPerson(james) → LateNightPerson(james)","output":"If James is an early-morning person, then he is a late night person."}
{"input":"∃x (GoWrong(x))","output":"Something went wrong."}
{"input":"∃x∃y(Elephantopus(x) ∧ In(x,africa) ∧ Elephantopus(y) ∧ In(y,africa))","output":"Elephantopus is found in Australia and Southern Asia."}
{"input":"∀x (Elephantopus(x) → ¬NativeTo(x, southeasternunitedstates))","output":"No Elephantopus is native to the southeastern United States."}
{"input":"∀x (Elephantopus(x) → TraditionalMedicine(x))","output":"Elephantopus is a traditional medicine."}
{"input":"YaleDormitory(harkness)","output":"Harkness is a Yale dormitory."}
{"input":"¬YaleDormitory(harkness)","output":"Harkness is not a Yale dormitory."}
{"input":"∃y(Before(y, year1701) ∧ Established(x, y))","output":"Harkness is established before 1701."}
{"input":"¬∃y(Before(y, year1701) ∧ Established(x, y))","output":"Harkness is not established before 1701."}
{"input":"Skyscraper(laLaurieHouse)","output":"The LaLaurie House is a skyscraper."}
{"input":"¬Skyscraper(laLaurieHouse)","output":"The LaLaurie House is not a skyscraper."}
{"input":"TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)","output":"The LaLaurie House is a terrifying building on Halloween."}
{"input":"Skyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse)","output":"The LaLaurie House is either a skyscraper or a mansion house."}
{"input":"Skyscraper(laLaurieHouse) ⊕ UrbanArea(laLaurieHouse)","output":"The LaLaurie House is either a skyscraper or in an urban area."}
{"input":"Skyscraper(laLaurieHouse) ⊕ CreepyHauntedHouse(laLaurieHouse)","output":"The LaLaurie House is either a skyscraper or a creepy haunted house."}
{"input":"¬(MansionHouse(laLaurieHouse) ∧ InUrbanArea(laLaurieHouse)) → (Skyscraper(laLaurieHouse) ⊕ InUrbanArea(laLaurieHouse))","output":"If the LaLaurie House is not a mansion or not in an urban area, then it is either a skyscraper or in an urban area."}
{"input":"Skyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse) → InUrbanArea(laLaurieHouse)","output":"If the LaLaurie House is either a skyscraper or a mansion house, then it is in an urban area."}
{"input":"Skyscraper(laLaurieHouse) ⊕ MansionHouse(laLaurieHouse) → ¬(CreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse))","output":"If the LaLaurie House is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying building on Halloween."}
{"input":"Skyscraper(laLaurieHouse) ⊕ CreepyHauntedHouse(laLaurieHouse) → ¬MansionHouse(laLaurieHouse)","output":"If the LaLaurie House is either a skyscraper or a creepy haunted house, then it is not a mansion house."}
{"input":"∃x (NatureReserve(x) ∧ LocatedIn(x, vietnam))","output":"There is a nature reserve in Vietnam."}
{"input":"UNESCOWorldHeritageSite(phuocBinh))","output":"Phuoc Binh is a UNESCO Heritage Site."}
{"input":"Mangedby(phuocBinh, peoplesCommittee)","output":"Phuoc Binh is managed by the People's Committee."}
{"input":"∀x (Coursing(x) ∧ ¬Banned(x))","output":"No coursing is banned."}
{"input":"∀x (GreyhoundRacing(x) → CompetitiveSport(x))","output":"Greyhound racing is a competitive sport."}
{"input":"EjectFromRestOfGame(henry)","output":"Henry will be ejected from the rest of the game."}
{"input":"¬EjectFromRestOfGame(henry)","output":"Henry will not be ejected from the rest of the game."}
{"input":"∃x ∃y (Living(x) ∧ Living(y) ∧ Plant(x) ∧ Plant(y) ∧ ¬(x=y))","output":"Some living things are plants."}
{"input":"NotablePerson(dagfinnAarskog)","output":"Dagfinn Aarskog is a notable person."}
{"input":"Named(dagfinnAarskog, nameDagfinn)","output":"Dagfinn is Dagfinn Aarskog's given name."}
{"input":"Norwegian(dagfinnDahl) ∧ Physician(dagfinnDahl)","output":"Dagfinn Dahl is a Norwegian physician."}
{"input":"∀x (Movie(x) ∧ Popular(x) → Attract(x, attention))","output":"If a movie is popular, then it attracts attention."}
{"input":"Popular(gpt-3)","output":"GPT-3 is popular."}
{"input":"∃x (Scottish(x) ∧ Joined(x, scottishPremiership))","output":"At least one Scottish team has joined the Scottish Premiership."}
{"input":"WonGame(stJohnstone, minsk)","output":"St Johnstone won against Minsk."}
{"input":"Joined(minsk, scottishPremiership))","output":"Minsk joined the Scottish Premiership."}
{"input":"∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ScheduledFor(jake32, shortdistanceflight))","output":"Jake32 was produced before 2010 and is scheduled for a short-distance flight."}
{"input":"¬(∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ScheduledFor(jake32, shortdistanceflight)))","output":"Jake32 is not produced before 2010 and is not scheduled for a short-distance flight."}
{"input":"∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∨ ScheduledFor(jake32, shortdistanceflight))","output":"Jake32 is produced before 2010 or scheduled for a short-distance flight."}
{"input":"¬∃z(Before(z, year2010) ∧ Produced(jake32, z)) ∧ ¬ScheduledFor(jake32, shortdistanceflight))","output":"Jake32 is neither produced before 2010 nor scheduled for a short-distance flight."}
{"input":"OwnedBy(sAT, collegeBoard) ∧ OwnedBy(sAT, otherThirdParties)","output":"The SAT test is owned by the College Board and other third parties."}
{"input":"IntendedToAssess(sAT, studentsMathSkill)","output":"The SAT test assesses students' math skills."}
{"input":"¬BornIn(rafaNadal, mallorca)","output":"Nadal was not born in Mallorca."}
{"input":"InBig3(rafaNadal)","output":"Nadal is in the Big 3."}
{"input":"GreatestOfAllTime(rafaNadal)","output":"Nadal is the greatest player of all time."}
{"input":"∀x (SandwichCookie(x) → Delicious(x))","output":"All sandwich cookies are delicious."}
{"input":"Pupil(bailey)","output":"Bailey is a pupil."}
{"input":"¬Pupil(bailey)","output":"Bailey is not a pupil."}
{"input":"Plant(bailey)","output":"Bailey is a plant."}
{"input":"Human(bailey) → ¬Pupil(bailey)","output":"If Bailey is a human, then Bailey is not a pupil."}
{"input":"Wearable(watch)","output":"A watch is wearable."}
{"input":"Slipper(watch)","output":"A watch is a slipper."}
{"input":"¬Edible(watch) ∧ ¬Slipper(watch)","output":"A watch is neither edible nor a slipper."}
{"input":"Olympian(carlosReyes)","output":"Carlos Reyes is an Olympian."}
{"input":"HeavyWeight(carlosReyes)","output":"Carlos Reyes is a heavy weight."}
{"input":"WonOlympicMedal(carlosReyes)","output":"Carlos Reyes won an Olympic medal."}
{"input":"Attend(sam, festival) ∧ YoungTeenageGirl(sam)","output":"Sam is a young teenage girl who attends music festival frequently"}
{"input":"¬(Attend(sam, festival) ∧ YoungTeenageGirl(sam))","output":"Sam is not a young teenage girl who attends music festival frequently"}
{"input":"BigFanOfMusic(sam)","output":"Sam is a big fan of pop bands and singers."}
{"input":"¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))","output":"Sam neither has high ambitions and future career goals nor is she a young teenage girl attending music festival frequently"}
{"input":"Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam)","output":"Sam has high ambitions and future career goals and is a young teenage girl attending music festival frequently."}
{"input":"Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam)","output":"Sam has high ambitions and future career goals and is a young teenage girl attending college."}
{"input":"Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (BigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)))","output":"If Sam is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers."}
{"input":"Ambitious(sam) ∧ Attend(sam, festival) ∧ YoungTeenageGirl(sam) → ¬(Ambitious(sam) ∨ (Attend(sam, festival) ∧ YoungTeenageGirl(sam)))","output":"If Sam has high ambitions and future career goals and is a young teenage girl attending college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl attending college."}
{"input":"Ambitious(sam) → Attend(sam, festival) ∧ YoungTeenageGirl(sam)","output":"If Sam has high ambitions and future career goals, then Sam is a young teenage girl attending college."}
{"input":"∃x (CargoShip(x) ∧ SeizedBy(x, germany) ∧ SoldTo(x, hongkong))","output":"There was a cargo ship seized by Germany that was sold to Hong Kong."}
{"input":"∀x ∀y (SoldTo(x, hongkong) → ¬SeizedBy(x, y))","output":"Hong Kong hasn't had any seized ships sold to them."}
{"input":"SeizedBy(britta, hongkong)","output":"Hong Kong seized the Britta."}
{"input":"GoodWideReceiver(quincyMcduffie)","output":"Quincy McDuffie is a good wide receiver."}
{"input":"∀x (Ball(x) → CanCatch(quincymcduffie, x))","output":"Quincy McDuffie can catch every ball."}
{"input":"∀x ((Professional(x) ∧ WideReciever(x)) → Good(x, catchingballs))","output":"Professional wide receivers are good at catching balls."}
{"input":"SituatedOn(longueau, pairsLille)","output":"Longueau is situated on the Paris–Lille railway."}
{"input":"¬In(boves, europe)","output":"Boves is not in Europe."}
{"input":"Serve(longueau, hautsDeFrance)","output":"Longueau is served by regional TER Hauts-de-France trains."}
{"input":"Sergeant(tedSmith)","output":"Ted Smith was a sergeant."}
{"input":"∀x ∀y (Rower(x) ∧ Buisness(y) → ¬Own(x, y))","output":"There were no rowers that own a buisness."}
{"input":"∀x (Sergeant(x) → ¬From(x, auckland))","output":"No sergeants were from Auckland."}
{"input":"∀x ∀y (Buisness(x) ∧ Own(y, x) → ¬ServeIn(y, egypt))","output":"No business owner served in Egypt."}
{"input":"∀x (Human(x) → Werewolf(x))","output":"All humans are werewolves."}
{"input":"∀x (Werewolf(x) → Wolf(x))","output":"A werewolf is a wolf."}
{"input":"∀x ∃y (Werewolf(x) → ScratchedBy(y, x))","output":"A werewolf has scratched someone before."}
{"input":"Fight(jung, sadollah, uFCFightNight)","output":"Jung fought Sadollah."}
{"input":"Event(uFCFightNight) ∧ ¬FightIn(jung, uFCFightNight)","output":"Jung did not fight at UFC Fight Night."}
{"input":"Fight(sadollah, musoke, uFCFightNight)","output":"Sadollah fought Musoke at UFC Fight Night."}
{"input":"Fight(nelson, story, uFCFightNight)","output":"Nelson fought Story at UFC Fight Night."}
{"input":"OrangeJuice(coke)","output":"The coke is orange juice."}
{"input":"Edible(coke) ∧ Sweet(coke)","output":"The coke is edible and sweet."}
{"input":"¬(Edible(coke) ∧ Sweet(coke))","output":"The coke is not edible and sweet."}
{"input":"¬Killed(nationalists, daniel)","output":"The Spanish Nationalists killed Daniel."}
{"input":"Killed(nationalists, lorca)","output":"The Spanish Nationalists killed Lorca."}
{"input":"HaveToVisitFrequently(damon, dentist)","output":"Damon is in Franny's family and he has to visit the dentist frequently."}
{"input":"¬((¬(y=z) ∧ ∃y ∃z (BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ Drink(damon, kombucha)) → ¬(HaveToVisitFrequently(damon, dentist) ∨ (∃y (Have(damon, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))))","output":"If Damon is in Franny's family and he either both grew up with extremely busy parents who did not have time to pack his lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack his lunch nor drink kombucha every day, then Damon neither visits the dentist frequently nor drinks Coca Cola or Pepsi products."}
{"input":"HaveToVisitFrequently(damon, dentist) ∨ Drink(damon, kombucha, everyDay) → HaveToVisitFrequently(damon, dentist) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))","output":"If Damon is in Franny's family and he either visits the dentist frequently or drinks kombucha, then Damon both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day."}
{"input":"¬EligibleForThreeFreeMovies(james)","output":"James cannot watch 3 movies every week without any additional fees."}
{"input":"CinemaEveryWeek(james)","output":"James goes to cinemas every week."}
{"input":"¬WatchTVIn(peter, cinemas)","output":"Peter will not watch TV series in cinemas."}
{"input":"¬Orchid(bulbophyllumAttenuatum)","output":"Bulbophyllum attenuatum is not an orchid."}
{"input":"∃x (AdministrativeCenterOf(vladivostok, x) ∧ LargestArea(x))","output":"Vladivostok is the administrative center of the federal district with the largest area."}
{"input":"∃x (AdministrativeCenterOf(moscow, x) ∧ LargestPopulationIn(x))","output":"Moscow is the administrative center of the federal district with the largest population."}
{"input":"EstablishedIn(northwestern, 2000)","output":"The Northwestern federal district was established in 2000."}
{"input":"CanBeTreatedAtHome(arthritis)","output":"Arthritis can be treated at home."}
{"input":"ColorectalCancer(arthritis)","output":"Arthritis is colorectal cancer."}
{"input":"¬ColorectalCancer(arthritis)","output":"Arthritis is not colorectal cancer."}
{"input":"ColorectalCancer(arthritis) ∨ Have(arthritis, mutation)","output":"Arthritis is colorectal cancer or has mutations."}
{"input":"ColorectalCancer(arthritisr) ∧ Cancer(arthritis)","output":"Arthritis is colorectal cancer and a cancer."}
{"input":"¬ColorectalCancer(arthritis) → Have(arthritis, mutation)","output":"If arthritis is not colorectal cancer, then arthritis has mutations."}
{"input":"¬ShouldWorry(jerry, traffic)","output":"Jerry should not worry about traffic."}
{"input":"∃x (ItalianName(x) ∧ Surname(x) ∧ UseAsSurname(albaRoversi, x))","output":"Alba Roversi uses an Italian surname."}
{"input":"¬(∃x ∃y (Photographer(x) ∧ ItalianName(y) ∧ Surname(y) ∧ UseAsSurname(x, y)))","output":"There are no photographers using an Italian surname."}
{"input":"Amateur(paoloRoversi) ∧ Photographer(paoloRoversi)","output":"Paolo is an amateur photographer."}
{"input":"British-Iraqi(zahaHadid)","output":"Zaha Hadid was a citizen of Britain and Iraq."}
{"input":"DidWorkIn(zahaHadid, interiorDesign)","output":"Zaha Hadid did some work in interior design."}
{"input":"BornOn(zahaHadid, 31October1950)","output":"Zaha Hadid was born on the 31st of October in 1982."}
{"input":"Admires(max, zahaHadid)","output":"Max admires Zaha Hadid."}
{"input":"Provides(fMRI, spatialResolutionOfBrains)","output":"FMRI provides a spatial resolution of brains."}
{"input":"Invasive(fMRI) ∧ UsedBy(fMRI, neuroscienceResearchers)","output":"FMRI is an invasive neuroimaging technique and is used by neuroscience researchers."}
{"input":"Invasive(fMRI) ⊕ UsedBy(fMRI, neuroscienceResearchers)","output":"FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers."}
{"input":"¬(Invasive(fMRI) ∧ UsedBy(fMRI, neuroscienceResearchers)) → ¬(Noninvasive(fMRI) ∨ Provides(fMRI, spatialResolutionOfBrains))","output":"If fMRI is not an invasive neuroimaging technique used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains."}
{"input":"ProvidedWith(james, souvenir)","output":"James is provided with souvenirs."}
{"input":"¬ProvidedWith(x, souvenir)","output":"James is not provided with souvenirs."}
{"input":"InvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))","output":"James is invited to take a photo with the audience and is happy to communicate with other guests at the dinner."}
{"input":"InvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))","output":"James is invited to take a photo with the audience or is happy to communicate with other guests(?) during the dinner."}
{"input":"InvitedToTakePhotoWith(james, audience) → ∃y ∃z (¬(y=james) ∧ ¬(z=james) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(james, y) ∧ HappyToCommunicateWithDuringDinner(james, z)))","output":"James is either invited to take a photo with the audience or happy to communicate with other guests(?) during the dinner."}
{"input":"OpenToPublic(usssalem)","output":"The USS Salem is open to the public."}
{"input":"∃x (MuseumShip(x) ∧ OpenToPublic(x) ∧ ServedIn(x, mediterranean))","output":"There is a museum ship open to the public that served in the Mediterranean."}
{"input":"¬LastHeavyCruiserToEnterService(usssalem)","output":"The USS Salem was not the last heavy cruiser to enter service."}
{"input":"∀x (TSLeda(x) → Quiet(x) ∧ GoodAt(x, sea))","output":"TS Leda was quiet and good at sea."}
{"input":"∀x (TSLeda(x) → PowerfulSteamTurbine(x))","output":"TS Leda had powerful steam turbine engines."}
{"input":"∀x (TSLeda(x) → ¬(Norweigian(x) ∧ Vessel(x)))","output":"TS Leda was not a Norwegian vessel."}
{"input":"∃x (BornIn(rosa, x) ∧ LargestCityOf(x, chile))","output":"Rosa was born in the largest city of Chile."}
{"input":"¬Chilean(jose) ∧ ¬Chilean(carmen)","output":"Neither of Rosa's parents is Chilean."}
{"input":"∃x (DaughterOf(rosa, x) ∧ Oversee(x, traffic))","output":"Rosa is the daughter of someone who is responsible for the oversight of traffic."}
{"input":"IsRapAlbum(wellDone3)","output":"Well Done 3 is a rap album."}
{"input":"IsOperaSinger(tyga)","output":"Tyga is an opera singer."}
{"input":"IsWorthListening(wellDone3)","output":"Well Done 3 is worth listening to."}
{"input":"∃x (CoProduces(x, gasland) ∧ WrittenBy(homesick, x))","output":"Gasland was coproduced by the same person Homesick was from."}
{"input":"∀x (Play(x) ∧ WrittenBy(x, deborahwallace) → ¬BasedOn(x, lifeofjamesmirandabarry))","output":"No plays by Deborah Wallace are based on the life of James Miranda Barry."}
{"input":"Play(gasland)","output":"Gasland is a play."}
{"input":"Bear(larry)","output":"Larry is a bear."}
{"input":"¬Bear(larry) ∧ ¬TravelFar(larry)","output":"Larry is not a bear and does not travel far."}
{"input":"TravelFar(larry) ⊕ Need(larry, largeTerritory) → Bear(larry)","output":"If Larry either travels far or needs a large territory, then Larry is a bear."}
{"input":"SentencedToPunishment(garry)","output":"Garry is sentenced to a punishment."}
{"input":"¬CommitCrime(garry) ∧ CanArgueAgainst(garry, punishment)","output":"Garry did not commit a crime and can argue against his punishment."}
{"input":"¬(Innocent(garry) ∧ ¬CommitCrime(garry))","output":"Garry is not both innocent and someone who did not commit a crime."}
{"input":"PopRock(phoenix)","output":"Phoneix's music is classified under the pop rock genre."}
{"input":"∃x (Write(phoenix, y) ∧ Song(x) → InFrench(x))","output":"Phoenix writes songs in French."}
{"input":"∀x (DrinkRegularly(x, coffee) → IsDependentOn(x, caffeine))","output":"All people who regularly drink coffee are dependent on caffeine."}
{"input":"∀x (DrinkRegularly(x, coffee)  ∨ (¬WantToBeAddictedTo(x, caffeine)))","output":"People regularly drink coffee, or they don't want to be addicted to caffeine, or both."}
{"input":"∀x (¬WantToBeAddictedTo(x, caffeine) → ¬AwareThatDrug(x, caffeine))","output":"No one who doesn't want to be addicted to caffeine is unaware that caffeine is a drug."}
{"input":"¬(Student(rina) ⊕  ¬AwareThatDrug(rina, caffeine))","output":"Rina is either a student who is unaware that caffeine is a drug, or she is not a student and is she aware that caffeine is a drug."}
{"input":"¬(IsDependentOn(rina, caffeine) ⊕ Student(rina))","output":"Rina  is either a student who is dependent on caffeine, or she is not a student and not dependent on caffeine."}
{"input":"Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ SpecializeInPerformanceOf(miroslav, renaissanceMusic) ∧ SpecializeInPerformanceOf(miroslav, baroqueMusic)","output":"Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music."}
{"input":"∀x (ChoralConductor(x) → Musician(x))","output":"Any choral conductor is a musician."}
{"input":"∃x ∃y ((Musician(x) → Love(x, music)) ∧ (¬(x=y) ∧ Musician(y) → Love(y, music)))","output":"Some musicians love music."}
{"input":"PublishedBook(miroslav, methodOfStudyingGregorianChant, yr1946)","output":"Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant."}
{"input":"∀x (Eel(x) → Fish(x))","output":"All eels are fish. "}
{"input":"∀x (Fish(x) → ¬Plant(x))","output":"No fish are plants. "}
{"input":"∀x (DisplayedIn(x, collection) → Plant(x) ⊕ Animal(x))","output":"Everything displayed in the collection is either a plant or an animal."}
{"input":"∀x (Multicellular(x) → ¬Bacteria(x))","output":"All multicellular animals are not bacteria."}
{"input":"∀x (DisplayedIn(x, collection) ∧ Animal(x) → Multicellular(x))","output":"All animals displayed in the collection are multicellular."}
{"input":"DisplayedIn(seaEel, collection)","output":"A sea eel is displayed in the collection."}
{"input":"Eel(seaEel) ∨ Animal(seaEel) ∨ ¬Plant(seaEel)","output":"The sea eel is an eel or an animal or not a plant."}
{"input":"Building(blakeMcFallCompanyBuilding) ∧ AddedToIn(blakeMcFallCompanyBuilding, theNationalRegisterOfHistoricPlaces, year1990)","output":"The Blake McFall Company Building is a building added to the National Register of Historic Places in 1990."}
{"input":"Building(emmetBuilding) ∧ Five-Story(emmetBuilding) ∧ LocatedIn(emmetBuilding, portland) ∧ LocatedIn(portland, oregon))","output":"The Emmet Building is a five-story building in Portland, Oregon."}
{"input":"BuiltIn(emmetBuilding, year1915)","output":"The Emmet Building was built in 1915."}
{"input":"emmetBuiling=blakeMcFallCompanyBuilding","output":"The Emmet Building is another name for the Blake McFall Company Building."}
{"input":"WorkAt(john, emmetBuilding)","output":"John works at the Emmet Building."}
{"input":"British(williamDickinson) ∧ Politician(williamDickinson) ∧ SatIn(williamDickinson, houseOfCommons)","output":"William Dickinson was a British politician who sat in the House of Commons"}
{"input":"Attended(williamDickinson, westminsterSchool) ∧ Highschool(westminsterSchool) ∧ Attended(williamDickinson, universityOfEdinburgh)","output":"William Dickinson attended Westminster school for high school and then the University of Edinburgh."}
{"input":"University(universityOfEdinburgh) ∧ LocatedIn(universityOfEdinburgh, unitedKingdom)","output":"The University of Edinburgh is a university located in the United Kingdom."}
{"input":"Supported(williamDickinson, portlandWhigs)","output":"William Dickinson supported the Portland Whigs."}
{"input":"∀x (Supported(x, portlandWhigs) → ¬SatIn(x, parliament))","output":"People who supported the Portland Whigs did not get a seat in the Parliament."}
{"input":"UniversalLanguage(languageA)","output":"LanguageA is a universal language"}
{"input":"∀x ∀y (∃z (¬(x=y) ∧ Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → CanCommunicateWith(x, y) ∧ CanCommunicateWith(y, x))","output":"If a universal language exists, then for every two people if they both know the same universal language they can communicate."}
{"input":"¬CanCommunicateWith(katya, danil)","output":"Katya cannot communicate with Danil."}
{"input":"Know(katya, languageA)","output":"Katya knows LanguageA. "}
{"input":"∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ SubscribedTo(x, aMCAList)) →  EligibleForThreeFreeMoviesEveryWeekWithoutAdditionalFees(x))","output":"All customers in James' family who subscribe to AMC A-List are eligible to watch three movies every week without any additional fees. "}
{"input":"∃x ∃y (Customer(x) ∧ In(x, jameSFamily) ∧ GoToEveryWeek(x, cinema) ∧ (¬(x=y)) ∧ Customer(y) ∧ In(y, jameSFamily) ∧ GoToEveryWeek(y, cinema))","output":"Some of the customers in James' family go to the cinema every week."}
{"input":"∀x (Customer(x) ∧ In(x, jameSFamily) ∧ (SubscribedTo(x, aMCAList) ∨ SubscribedTo(x, hBO)))","output":"Customers in James' family subscribe to AMC A-List or HBO service. "}
{"input":"∀x ((Customer(x) ∧ In(x, jameSFamily) ∧ Prefer(x, tVSeries)) → (¬WatchIn(x, tV, cinema)))","output":"Customers in James' family who prefer TV series will not watch TV series in cinemas."}
{"input":"∀x ((Customer(x) ∧ In(x, jameSFamily) ∧  SubscribedTo(x, hBO)) → Prefer(x, tVSeries))","output":"All customers in James' family who subscribe to HBO services prefer TV series to movies. "}
{"input":"Customer(lily) ∧ In(lily, jameSFamily ∧ WatchIn(lily, tV, cinema)","output":"Lily is in James' family; she watches TV series in cinemas. "}
{"input":"∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ MorePoints(x, y) → RankHigherThan(x, y))","output":"A La Liga soccer team ranks higher than another La Liga soccer team if it receives more points."}
{"input":"∀x ∀y (LaLigaSoccerTeam(x) ∧ LaLigaSoccerTeam(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) →  RankHigherThan(x, y))","output":"If there are two La Liga soccer teams and neither has more points than the other, then the team which receives more points from the games between the two teams ranks higher."}
{"input":"LaLigaSoccerTeam(realMadrid) ∧ LaLigaSoccerTeam(barcelona)","output":"Real Madrid and Barcelona are both La Liga soccer teams."}
{"input":"MorePoints(realMadrid, barcelona)","output":"Real Madrid received more points than Barcelona."}
{"input":"¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)","output":"Neither Real Madrid nor Barcelona received more points from the games between them."}
{"input":"NeighbourhoodIn(lawtonPark, seattle)","output":"Lawton Park is a neighborhood in Seattle. "}
{"input":"∀x (Residentof(x, lawtonPark) → UseZipCode(x, num98199))","output":"All citizens of Lawton Park use the zip code 98199. "}
{"input":"ResidentOf(tom, lawtonPark)","output":"Tom is a citizen of Lawton Park."}
{"input":"UseZipCode(daniel, num98199)","output":"Daniel uses the zip code 98199. "}
{"input":"∀x ((Legislator(x) ∧ StealsFunds(x)) → Suspended(x))","output":"If a legislator is found guilty of stealing government funds, they will be suspended from office."}
{"input":"Legislator(tiffanyTAlston)","output":"Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013."}
{"input":"StealsFunds(tiffanyTAlston) ∧ StealsFundsInYr(tiffanyTAlston, yr2012)","output":"Tiffany T. Alston was found guilty of stealing government funds in 2012."}
{"input":"∃x ∃y (Fish(x) → Sting(x,y))","output":"Some fish stings people."}
{"input":"Fish(stonefish)","output":"Stonefish is a fish."}
{"input":"∀x (SteppedOnBy(stonefish, x) → Sting(stonefish, x))","output":"Stonefish stings when stepped on. "}
{"input":"∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeathTo(stonefish, x))","output":"If a stonefish stings someone and they are not treated, it can cause death to them."}
{"input":"∀x (Sting(stonefish, x) ∧ (ApplyHeatTo(x) ∨ UseAntivenomOn(x)) → Treated(x))","output":"To treat stonefish stings, apply heat to the affected area or use an antivenom."}
{"input":"∃x (Monitor(x) ∧ ProducedBy(x, lG) ∧ Have(x, typeCPort) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, lG) ∧ Have(y, typeCPort))","output":"Some monitors made by LG have a type-c port."}
{"input":"∀x (Have(x, typeCPort) → ¬ProducedBefore(x, yr2010))","output":"Monitors that have a type-c port were not made before 2010."}
{"input":"∀x ((Monitor(x) ∧ In(x, library)) → ProducedBefore(x, yr2010))","output":"All monitors in the library are made before 2010. "}
{"input":"Monitor(l-2021) ∧ (In(l-2021, library) ⊕ Have(l-2021, typeCPort))","output":"The L-2021 monitor is either used in the library or has a type-c port."}
{"input":"¬(ProducedBefore(l-2021, yr2010) ⊕ ProducedBy(l-2021, lG))","output":"The L-2021 monitor is either both produced before 2010 and made by LG, or neither is true."}
{"input":"∀x (Outside(x, solarSystem) ⊕ In(x, solarSystem))","output":"Everything is either outside the solar system or in the solar system. "}
{"input":"∀x (Outside(x, solarSystem) → ¬SunAs(x, star))","output":"Nothing outside the solar system has the Sun as its star."}
{"input":"∀x (In(x, solarSystem) → BoundBy(x, sun, gravitationally))","output":"Everything in the solar system is gravitationally bound by the Sun."}
{"input":"∀x (Planet(x) ∧ BoundBy(x, sun, gravitationally) → ¬(Planet(x) ∧ Rogue(x)))","output":"No planets gravitationally bound by the Sun are rogue planets. "}
{"input":"∀x (Planet(x) ∧ Orphan(x) → Planet(x) ∧ Rogue(x))","output":"All orphan planets are rogue planets."}
{"input":"¬(Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22) ∧ BoundBy(pSOJ318.5-22, sun, gravitationally)) → (Planet(pSOJ318.5-22) ∧ Rogue(pSOJ318.5-22))","output":"If PSO J318.5−22 is not both a rogue planet and a planet gravitationally bound by the Sun, then it is a rogue planet."}
{"input":"∃x (Project(x) ∧ Do(sam, x))","output":"Sam is doing a project."}
{"input":"∀x (Project(x) → (WrittenIn(x, cplusplus) ⊕ WrittenIn(x, python)))","output":"A project is written either in C++ or Python."}
{"input":"∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))","output":"If Sam does a project written in Python, he will not use a Mac."}
{"input":"Use(sam, mac)","output":"Sam is using a Mac."}
{"input":"∃x (Use(sam, mac) ∧ Song(x) → Play(sam, x))","output":"If Sam uses a Mac, he will play a song."}
{"input":"∀x (Song(x) ∧ Play(sam, x) → Titled(x, perfect))","output":"If a song is not titled \"Perfect,\" Sam will never play it."}
{"input":"∀x (Rabbit(x) → Have(x, fur))","output":"All rabbits have fur"}
{"input":"∃x (Pet(x) ∧ Rabbit(x))","output":"Some pets are rabbits."}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, chatFeature) → Software(x))","output":"All social media applications containing chat features are software. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧ AllowToSendTo(x, user, message) → Contain(x, chatFeature))","output":"All social media applications that allow users to send messages to each other have chat features. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) → Contain(x, chatFeature) ∨ Contain(x, videoFeature))","output":"All social media applications have chat features or video features. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧ Contain(x, videoFeature) → Allow(x, user, uploadVideo))","output":"All social media applications that have video features allow users to upload videos. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧ Software(x) → ComputerProgram(x))","output":"All software that is social media applications are computer programs. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧Have(x, highEngagementMetric) → Addictive(x))","output":"All social media applications that have high engagement metrics are addictive. "}
{"input":"∀x (SocialMedia(x) ∧ Application(x) ∧ Addictive(x) → ¬IdealFor(x, preteen))","output":"If a social media application is addictive, then it is not ideal for preteens. "}
{"input":"SocialMedia(tikTok) ∧ Application(tikTok) ∧ ¬IdealFor(tikTok, preteen)","output":"TikTok is a social media application, and it is not ideal for preteens. "}
{"input":"UnincorporatedCommunity(ordinary)","output":"Ordinary is an unincorporated community."}
{"input":"LocatedIn(ordinary, elliotCounty) ∧ On(ordinary, kentuckyRoute32)","output":"Located within Elliot County, Ordinary is on Kentucky Route 32."}
{"input":"LocatedNorthwestOf(ordinary, sandyHook)","output":"Ordinary is located northwest of Sandy Hook."}
{"input":"∀x (At(x, event) ∧ YoungAdult(x) → Like(x, independence))","output":"All young adults at the event like independence."}
{"input":"∀x (At(x, event) ∧ CollegeStudent(x) → YoungAdult(x))","output":"All college students at the event are young adults."}
{"input":"∀x (At(x, event) ∧ YaleStudent(x) → CollegeStudent(x))","output":"All Yale students at the event are college students."}
{"input":"∀x (At(x, event) → (YaleStudent(x) ⊕ HarvardStudent(x)))","output":"Everyone at the event is a Yale student or a Harvard student."}
{"input":"∀x (At(x, event) ∧ HarvardStudent(x) → Diligent(x))","output":"All Harvard students at the event are diligent."}
{"input":"At(susan, event) ∧ (HarvardStudent(susan) → YoungAdult(susan))","output":"Susan is at the event, and if Susan is a Harvard student, then she is a young adult."}
{"input":"YaleStudent(susan) → ¬Like(susan, independence)","output":"If Susan is a Yale student, then she does not like independence."}
{"input":"Play(vicDicara, guitar) ∧ Play(vicDicara, bass)","output":"Vic DiCara plays guitar and bass."}
{"input":"∀x (Music(vicDicara, x) → ¬(x=punk)))","output":"The only style of music Vic DiCara plays is punk music."}
{"input":"Band(vicDicara, insideOut)","output":"Vic DiCara played in the band Inside Out."}
{"input":"∀x (ProfessionalAthlete(x) → SpendOn(x, mostOfTheirTime, sports))","output":"All professional athletes spend most of their time on sports."}
{"input":"∀x (OlympicGoldMedalWinner(x) → ProfessionalAthlete(x))","output":"All Olympic gold medal winners are professional athletes."}
{"input":"∀x (FullTimeScientist(x) → ¬SpendOn(x, mostOfTheirTime, sports))","output":"No full-time scientists spend the majority of their time on sports."}
{"input":"∀x (NobelPhysicsLaureate(x) → FullTimeScientist(x))","output":"All Nobel physics laureates are full-time scientists."}
{"input":"SpendOn(amy, mostOfTheirTime, sports) ∨ OlympicGoldMedalWinner(amy)","output":"Amy spends the most time on sports, or Amy is an Olympic gold medal winner."}
{"input":"¬NobelPhysicsLaureate(amy) → ¬OlympicGoldMedalWinner(amy)","output":"If Amy is not a Nobel physics laureate, then Amy is not an Olympic gold medal winner."}
{"input":"∀x ((GrownIn(x, benSYard) ∧ RedFruit(x)) → Contain(x, vitaminC))","output":"All red fruits that grow in Ben's yard contain some Vitamin C."}
{"input":"∀x (GrownIn(x, benSYard) ∧ Is(x, apple) → RedFruit(x))","output":"All apples that grow in Ben's yard are red fruits."}
{"input":"∀x ((GrownIn(x, benSYard) ∧ Contain(x, vitaminC)) → healthy(x))","output":"All fruits that grow in Ben's yard and contain some Vitamin C are healthy. "}
{"input":"∀x ((GrownIn(x, benSYard) ∧ Healthy(x)) → ¬On(x, warningList))","output":"No fruits that grow in Ben's yard and are healthy are on a warning list."}
{"input":"GrownIn(cherry, benSYard)","output":"The cherries grow in Ben's yard."}
{"input":"¬(Healthy(cherry) ∧ Is(cherry, apple)) → RedFruit(cherry)","output":"If cherries are not apples and are not healthy, then they are red fruits."}
{"input":"∀x (WorkAt(x, meta) → HighIncome(x))","output":"Everyone working at Meta has a high income. "}
{"input":"∀x (HighIncome(x) → ¬MeansToDestination(x, bus))","output":"A person with a high income will not take a bus to their destination."}
{"input":"∀x (MeansToDestination(x, bus) ⊕ MeansToDestination(x, drive))","output":"People will either take a bus or drive to their destination. "}
{"input":"∀x (HaveCar(x) → MeansToDestination(x, drive))","output":"Everyone who has a car will choose to drive to their destination. "}
{"input":"∀x (Student(x) → ¬ MeansToDestination(x, drive))","output":"No students drive to their destination. "}
{"input":"HaveCar(james) ∨ WorkAt(james, meta)","output":"James has a car or works at Meta."}
{"input":"∀x (At(x, businessConference) → (Investor(x) ⊕ Entrepreneur(x)))","output":"Everyone at the business conference is either an investor or an entrepreneur."}
{"input":"∀x ((At(x, businessConference) ∧ Enjoy(x, opportunityOfStartingOwnBusiness)) → ¬Prefer(x, plannedEconomy))","output":"None of those at the business conference who enjoy the opportunity of starting a business prefer a planned economy. "}
{"input":"∀x ((At(x, businessConference) ∧ Entrepreneur(x)) → Enjoy(x, opportunityOfStartingOwnBusiness))","output":"All entrepreneurs at the business conference enjoy the opportunity of starting a business. "}
{"input":"∀x ((At(x, businessConference) ∧ Enjoy(x, stateOwnershipOfMeansOfProduction)) → Prefer(x, plannedEconomy))","output":"Everyone at the business conference who enjoys state ownership of means of production prefers a planned economy. "}
{"input":"∀x ((At(x, businessConference) ∧ ArdentCommunist(x)) → Prefer(x, stateOwnershipOfMeansOfProduction))","output":"Everyone at the business conference who is an ardent communist prefers state ownership of the means of production."}
{"input":"At(ho, businessConference) ∧ Prefer(ho, stateOwnershipOfMeansOfProduction)","output":"Ho is at the business conference and prefers state ownership of the means of production. "}
{"input":"∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x))","output":"No television stars are certified public accountants."}
{"input":"∀x (CertifiedPublicAccoutant(x) → Have(x, goodBusinessSense))","output":"All certified public accountants have good business sense."}
{"input":"∃x ∃y (StudentInTheClass(x) ∧ GoodAt(x, math) ∧ GoodAt(x, chemistry) ∧ (¬(x=y)) ∧ StudentInTheClass(y) ∧ GoodAt(y, math) ∧ GoodAt(y, chemistry))","output":"Some students in the class who are good at math are also good at chemistry."}
{"input":"∀x ((StudentInTheClass(x) ∧ GoodAt(x, chemistry)) → Enjoy(x, conductingExperiment))","output":"All students in the class who are good at chemistry enjoy conducting experiments. "}
{"input":"∀x ((StudentInTheClass(x) ∧ Enjoy(x, conductingExperiment)) → GoodAt(x, planning))","output":"All students in the class that enjoy conducting experiments are good at planning. "}
{"input":"∀x ((StudentInTheClass(x) ∧ GoodAt(x, planning)) → ¬Failed(x, theClass))","output":"None of the students who are good at planning failed the class."}
{"input":"StudentInTheClass(james) ∧ (¬(GoodAt(james, chemistry) ⊕ Failed(james, theClass)))","output":"James is a student in the class; he is either good at chemistry and failed the class, or bad at chemistry and passed the class."}
{"input":"∀x (Easy(x) → ∃y (LessThan(y, percent20) ∧ ACRate(x,y)))","output":"If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. "}
{"input":"∀x (Recommended(x) → Easy(x))","output":"All Leetcode problems that are recommended to novices are easy. "}
{"input":"∀x (Easy(x) ⊕ Hard(x))","output":"A Leetode problem is either easy or hard."}
{"input":"∀x (Starred(x)) → Hard(x))","output":"Leetcode problems that are starred by more than one thousand users are hard."}
{"input":"Recommended(twosum) ","output":"2Sum is recommended to novices. "}
{"input":"Starred(foursum)","output":"4Sum is starred by more than 1,000 users."}
{"input":"∀x (Rent(x, car) → Spend(x, money))","output":"Everyone who rents a car spends money."}
{"input":"GoTo(sarah, vermont) → DriveTo(sarah, vermont)","output":"Whenever Sarah goes to Vermont, Sarah drives there."}
{"input":"∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))","output":"Someone who does not own a car to drive somewhere must either borrow a car or rent a car."}
{"input":"¬Own(sarah, car)","output":"Sarah doesn’t own a car."}
{"input":"∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))","output":"Sarah never borrows a car to go camping."}
{"input":"Camping(sarah, vermont)","output":"Sarah is going to go camping in Vermont."}
{"input":"∀x ∀y (Camping(x, y) → GoTo(x, y))","output":"To go camping somewhere, you must go to that place."}
{"input":"∀x (Attend(x, wedding) → GettingMarried(x) ∨ (∃y (Know(x, y) ∧ GettingMarried(y)))","output":"All people who attend weddings are getting married or know the people who are getting married."}
{"input":"∀x (PreTeen(x) ∨ YoungChild(x) → ¬(GettingMarried(x) ⊕ (∃y (Know(x, y) ∧ GettingMarried(y)))))","output":"No preteens or young children are getting married or know the people who are getting married."}
{"input":"∀x (∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEvent, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)) → Attend(x, wedding))","output":"People who enjoy celebrating life milestone events with other people attend weddings."}
{"input":"∀x (FondOf(x, largeGroupFunction) → ∃y ∃z (¬(x=y) ∧ ¬(x=z) ∧ ¬(y=z) ∧ Enjoy(x, celebratingLifeMileStoneEventWith, y) ∧ Enjoy(x, celebratingLifeStoneEvent, z)))","output":"People who are fond of large group functions enjoy celebrating life milestone events with other people."}
{"input":"∀x (Outgoing(x) ∧ Sprited(x)  → FondOf(x, largeGroupFunction))","output":"All people who are outgoing and spirited are fond of large group functions."}
{"input":"¬((PreTeen(carol) ∨ YoungChildren(carol)) ∧ Attend(carol, wedding)) → ¬(GettingMarried(carol) ∨ (∃y (Know(carol, y) ∧ GettingMarried(y))))","output":"If Carol is not both a pre-teen or young child and attends a wedding, then Carol is not getting married or knows the people who are getting married.  "}
{"input":"∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ VelvetFinish(x)) → Refillable(x))","output":"All velvet-finish lipsticks in the Rouge Dior set, Lunar New Year Limited Edition are refillable."}
{"input":"∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (VelvetFinish(x) ⊕ SatinFinish(x))","output":"Lipsticks in the Rouge Dior set, Lunar New Year Limited Edition have either a velvet-finish or a satin-finish."}
{"input":"∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition) ∧ SatinFinish(x)) → ¬RosewoodInDescription(x))","output":"No satin-finish lipsticks in the set do not have \"rosewood\" in its offical description. "}
{"input":"∀x ((Lipstick(x) ∧ In(x, rougeDiorSet) ∧ In(x, lunarNewYearLimitedEdition)) → (RosewoodInDescription(x) ⊕ ¬RosewoodInDescription(x)))","output":"Lipstcks in the Rouge Dior set, Lunar New Year Limited Edition either does not have \"rosewood\" in its offical description or it has \"rosewood\" in its official description. "}
{"input":"Lipstick(rougeDiorColoredLipBalm999) ∧ In(rougeDiorColoredLipBalm999, rougeDiorSet) ∧ In(rougeDiorColoredLipBalm999, lunarNewYearLimitedEdition) ∧ (RosewoodInDescription(rougeDiorColoredLipBalm999) ⊕ VelvetFinish(rougeDiorColoredLipBalm999))","output":"ROUGE Dior Colored Lip Balm 999 is a lipstick in the set, and it either has \"rosewood\" in its official description or has a velvet finish."}
{"input":"∀x (SenateRepublican(x) → ElectedOfficial(x))","output":"All Senate Republicans are elected officials."}
{"input":"∃x ∃y (ElectedOfficial(x) ∧ ElectedOfficial(y) ∧ ¬Conservative(x) ∧ ¬Conservative(y) ∧ ¬(x=y))","output":"Some elected officials are not conservatives."}
{"input":"∀x (Athlete(x) → ¬NeverExercises(x)) Never: does not exist a time","output":"No athletes never exercise."}
{"input":"∀x (ProfessionalBasketballPlayer(x) → Athlete(x))","output":"All professional basketball players are athletes. "}
{"input":"∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))","output":"All NBA players are professional basketball players. "}
{"input":"∀x (KnicksPlayer(x) → NBAPlayer(x))","output":"All Knicks players are NBA players. "}
{"input":"¬(ProfessionalBasketballPlayer(jim) ⊕ NeverExercises(jim))","output":"Either John is a professional basketball player and he never exercises, or he is not a professional basketball player and he sometimes exercises."}
{"input":"∀x (Kid(x) → Young(x))","output":"All kids are young."}
{"input":"∀x (Toddler(x) → Kid(x))","output":"All toddlers are kids."}
{"input":"∀x (Young(x) → ¬Elderly(x))","output":"If someone is young, then they are not elderly."}
{"input":"∀x (Pirate(x) → Seafarer(x))","output":"All pirates are seafarers."}
{"input":"¬Pirate(nancy) → Young(nancy)","output":"If Nancy is not a pirate, then Nancy is young."}
{"input":"¬Toddler(nancy) → Seafarer(nancy)","output":"If Nancy is not a toddler, then Nancy is a seafarer."}
{"input":"DirectedBy(afterTiller, lanaWilson) ∧ DirectedBy(theDeparture, lanaWilson) ∧ DirectedBy(missAmericana, lanaWilson)","output":"Lana Wilson directed After Tiller, The Departure, and Miss Americana."}
{"input":"∀x ∀y (DirectedBy(x, y) → Filmmaker(y))","output":"If a film is directed by a person, the person is a filmmaker."}
{"input":"Documentary(afterTiller)","output":"After Tiller is a documentary."}
{"input":"∀x (Documentary(x) → Film(x))","output":"The documentary is a type of film."}
{"input":"From(lanaWilson, kirkland)","output":"Lana Wilson is from Kirkland."}
{"input":"In(kirkland, unitedStates)","output":"Kirkland is a US city."}
{"input":"∀x ∀y ∀z ((From(x, y) ∧ In(y, z)) → From(x, z))","output":"If a person is from a city in a country, the person is from the country."}
{"input":"Nomination(afterTiller, theIndependentSpiritAwardForBestDocumentary)","output":"After Tiller is nominated for the Independent Spirit Award for Best Documentary."}
{"input":"∀x ((Bear(x) ∧ In(x, zoo)) → ¬Wild(x))","output":"All bears in zoos are not wild. "}
{"input":"∃x ∃y (Bear(x) ∧ Bear(y) ∧ In(x, zoo) ∧ In(y, zoo) ∧ ¬(x=y))","output":"Some bears are in zoos. "}
{"input":"∀x (Leader(x) → HavePower(x))","output":"If a person is the leader of a country for life, that person has power."}
{"input":"∀x (Leader(x) → (King(x) ⊕ Queen(x)))","output":"Leaders of a country for life are either a king or a queen."}
{"input":"∀x (Queen(x) → Female(x))","output":"Queens are female."}
{"input":"∀x (King(x) → Male(x))","output":"Kings are male. "}
{"input":"Queen(elizabeth)","output":"Elizabeth is a queen."}
{"input":"Leader(elizabeth)","output":"Elizabeth is a leader of a country for life."}
{"input":"∀x (GoTo(x, claysSchool) ∧ MakeWith(x, theirOwnMatchTea, ceremonialGradePowder) → ¬(WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))","output":"All people who went to Clay's school and who make their own matcha teas every morning with ceremonial-grade matcha powder do not wake up late and start their schedules past noon regularly."}
{"input":"∀x (GoTo(x, claysSchool) ∧ LiveIn(x, california) ∧ AttendRegularly(x, yogaClass) → MakeWith(x, ownMatch, ceremonialGradePowder))","output":"All people who went to Clay's school, who live in California, and attend yoga classes regularly, make their own matcha teas every morning with ceremonial-grade matcha powder."}
{"input":"∀x (GoTo(x, claysSchool) ∧ WorkInAs(x, entertainmentIndustry, highProfileCelebrity) → (WakeUpLate(x) ∧ StartPastNoonRegularly(x, schedule)))","output":"All people who went to Clay's school, and work in the entertainment industry as high-profile celebrities, wake up late and start their schedules past noon regularly."}
{"input":"∀x (GoTo(x, claysSchool) ∧ ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)) → WorkInAs(x, entertainmentIndustry, highProfileCelebrity))","output":"All people who went to Clay's school that do not have regular 9-5 jobs, work in the entertainment industry as high-profile celebrities."}
{"input":"∀x (GoTo(x, claysSchool) ∧ Prefer(x, workingAtHome, goingToTheOffice) → ¬(Have(x, y) ∧ Regular(y) ∧ NineToFiveJob(y)))","output":"All people who went to Clay's school and prefer working at home over going to the office daily do not have regular 9-5 jobs."}
{"input":"GoTo(bunny, claysSchool) ∧ ¬(Prefer(bunny, workingAtHome, goingToTheOffice) ⊕ MakeWith(bunny, theirOwnMatchTea, ceremonialGradePowder))","output":"Bunny went to Clay's school, and she either prefers to work at home over going to the office and makes her own matcha teas every morning with ceremonial-grade matcha powder, or does not prefer to work at home over going to the office every day and does not make her own matcha teas every morning with ceremonial-grade matcha powder."}
{"input":"English(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)","output":"Thomas Barber was an English professional footballer."}
{"input":"PlayedFor(thomasBarber, astonVilla) ∧ PlayedIn(astonVilla,theFootballLeague)","output":"Thomas Barber played in the Football League for Aston Villa."}
{"input":"PlayedAs(thomasBarber, halfBack) ∧ PlayedAs(thomasBarber, insideLeft)","output":"Thomas Barber played as a halfback and inside left."}
{"input":"ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)","output":"Thomas Barber scored the winning goal in the 1913 FA Cup Final."}
{"input":"∀x ∀y (PlayIn(y, x, concert) → GoodAtPlaying(y, x))","output":"If a person plays an instrument in a concert, they are good at playing this kind of instrument."}
{"input":"Play(peter, piano) ∧ Play(peter, violin) ∧ Play(peter, saxophone)","output":"Peter plays piano, violin, and saxophone."}
{"input":"PlayIn(peter, piano, concert)","output":"Peter plays piano in a concert."}
{"input":"∃x ∃y (PlayIn(peter, x, concert) ∧ PlayIn(oliver, y, concert))","output":"Oliver and Peter both play instruments in a concert."}
{"input":"∀x (PlayIn(oliver, x, concert) → ¬PlayIn(peter, y, concert))","output":"Oliver plays a different musical instrument from Peter in the concert."}
{"input":"∀x (CanControl(x, breath) → FunctionalBrainStem(x))","output":"Functional brainstems are necessary for breath control."}
{"input":"∀x (Human(x) ∧ CanSwim(x) → CanControl(x, breath))","output":"All humans that can swim can control their breath. "}
{"input":"∀x (Human(x) → (CanSwim(x) ∨ CanWalk(x)))","output":"Humans can swim or walk. "}
{"input":"∀x (Human(x) ∧ CanWalk(x) → CanStandOnTheGround(x, themselves))","output":"Humans who can walk can stand on the ground by themselves. "}
{"input":"∀x (Human(x) ∧ FunctionalBrainStem(x) → CanControl(x, balance))","output":"Humans whose brainstems are functional can control their balance."}
{"input":"∀x (Human(x) ∧ CanStandOnTheGround(x, themselves) → FunctionalLegMuscle(x)))","output":"Every human who can stand on the ground by themselves has functional leg muscles. "}
{"input":"Human(george) ∧ Human(archie)","output":"George and Archie are humans."}
{"input":"CanControl(george, balance) ∧ CanSwim(george)","output":"George can control his balance and can swim."}
{"input":"¬(CanWalk(archie) ⊕ FunctionalBrainStem(x))","output":"Archie can walk if and only if he has functional brainstems."}
{"input":"Finding(cancerBiology, geneticAlteration) ∧ Confer(geneticAlteration, selectiveAdvantage, toCancerCell)","output":"Cancer biology is finding genetic alterations that confer a selective advantage to cancer cells. "}
{"input":"∃x ∃y (CancerResearcher(x) ∧ Ranked(x, importanceOfSubstitutionsToCancerGrowth) ∧ PValue(y) ∧ RankedBy(importanceOfSubstitutionsToCancerGrowth, y))","output":"Cancer researchers have frequently ranked the importance of substitutions to cancer growth by the P value."}
{"input":"∀x (PValue(x) → ThresholdForBelief(x) ∧ ¬MetricOfEffect(x))","output":"P values are thresholds for belief, not metrics of effect. "}
{"input":"∀x (Biodegradable(x) → EnvironmentFriendly(x))","output":"All biodegradable things are environment-friendly. "}
{"input":"∀x (Woodware(x) → Biodegradable(x))","output":"All woodware is biodegradable."}
{"input":"∀x (Paper(x) → Woodware(x))","output":"All paper is woodware. "}
{"input":"¬(∃x (Good(x) ∧ Bad(x)))","output":"Nothing is a good thing and also a bad thing."}
{"input":"∀x (EnvironmentFriendly(x) → Good(x))","output":"All environment-friendly things are good."}
{"input":"Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)","output":"A worksheet is either paper or environment-friendly."}
{"input":"∀x (Reptile(x) → ¬Have(x, fur))","output":"No reptile has fur."}
{"input":"∀x (Snake(x) → Reptile(x))","output":"All snakes are reptiles."}
{"input":"∀x (In(x, newHaven) → ¬High(x))","output":"All buildings in New Haven are not high."}
{"input":"∀x (YaleHousing(x) → In(x, newHaven))","output":"All buildings managed by Yale Housing are located in New Haven. "}
{"input":"∀x (In(x, manhattan) → High(x))","output":"All buildings in Manhattans are high. "}
{"input":"∀x (Bloomberg(x) → In(x, manhattan))","output":"All buildings owned by Bloomberg are located in Manhattans. "}
{"input":"∀x (BloombergLogo(x) → Bloomberg(x))","output":"All buildings with the Bloomberg logo are owned by Bloomberg. "}
{"input":"YaleHousing(tower-a)","output":"Tower A is managed by Yale Housing."}
{"input":"BloombergLogo(tower-b)","output":"Tower B is with the Bloomberg logo."}
{"input":"∀x (Bird(x) → ¬Ectothermic(x))","output":"No birds are ectothermic."}
{"input":"∀x (Penguin(x) → Bird(x))","output":"All penguins are birds."}
{"input":"∀x (Animal(x) → Ectothermic(x) ∨ Endothermic(x))","output":"An animal is ectothermic or endothermic."}
{"input":"∀x (Endothermic(x) → ProduceWithIn(x, heat, body))","output":"All endothermic animals produce heat within the body."}
{"input":"Animal(ron) ∧ Animal(henry)","output":"Ron and Henry are both animals."}
{"input":"¬Bird(ron) ∧ ¬ProduceWithIn(ron, heat, body)","output":"Ron is not a bird and does not produce heat with the body. "}
{"input":"¬Cat(henry) ∧ ¬ProduceWithIn(henry, heat, body)","output":"Henry is not a cat and does not produce heat with the body. "}
{"input":"Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)","output":"Ambiortus is a prehistoric bird genus."}
{"input":"∀x(KnownSpeciesOf(x, ambiortus) → IsSpecies(x, ambiortusDementjevi))","output":"Ambiortus Dementjevi is the only known species of Ambiortus."}
{"input":"LiveIn(ambiortusDementjevi, mongolia)","output":"Mongolia was where Ambiortus Dementjevi lived."}
{"input":"Discover(yevgenykurochkin, ambiortus)","output":"Yevgeny Kurochkin was the discoverer of Ambiortus."}
{"input":"∀x (Know(x, breathFirstSearch) → Know(x, howToUseQueue))","output":"Everyone that knows about breath-first-search knows how to use a queue. "}
{"input":"∀x (Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google) → Know(x, breathFirstSearch))","output":"If someone is a seasoned software engineer interviewer at Google, then they know what breath-first-search is. "}
{"input":"∀x ((Seasoned(x) ∧ SoftwareEngineerInterviewer(x) ∧ At(x, google)) ∨ Have(x, humanRights))","output":"Someone is either a seasoned software engineer interviewer at Google, has human rights, or both. "}
{"input":"∀x (Have(x, humanRights) → EntitledTo(x, rightToLifeAndLiberty))","output":"Every person who has human rights is entitled to the right to life and liberty. "}
{"input":"∀x (Know(x, howToUseQueue) → Know(x, firstInFirstOutDataStructure))","output":"Everyone that knows how to use a queue knows about the first-in-first-out data structure. "}
{"input":"∀x (EntitledTo(x, rightToLifeAndLiberty) → ¬DeprivedOfWithout(x, rights, dueProcessOfLaw))","output":"Everyone that is entitled to the right to life and liberty cannot be deprived of their rights without due process of law. "}
{"input":"(EntitledTo(jack, rightToLifeAndLiberty) ∨ Have(jack, humanRights) ∨ Know(jack, firstInFirstOutDataStructure))","output":"Jack is entitled to the right to life and liberty, has human rights, or knows about the first-in-first-out data structure. "}
{"input":"RenamedAs(fortCarillon, fortTiconderoga)","output":"Fort Ticonderoga is the current name for Fort Carillon."}
{"input":"Built(pierredeRigauddeVaudreuil, fortCarillon)","output":"Pierre de Rigaud de Vaudreuil built Fort Carillon."}
{"input":"LocatedIn(fortCarillon, newFrance)","output":"Fort Carillon was located in New France."}
{"input":"¬LocatedIn(newFrance, europe) ","output":"New France is not in Europe."}
{"input":"∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))","output":"No soccer players are professional basketball players."}
{"input":"∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))","output":"All NBA players are professional basketball players."}
{"input":"∀x (ProfessionalSoccerDefender(x) → ProfessionalSoccerPlayer(x))","output":"All soccer defenders are soccer players."}
{"input":"∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))","output":"All centerback players are soccer defenders."}
{"input":"(NBAPlayer(stephencurry) ⊕ ProfessionalSoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)","output":"If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player."}
{"input":"∀x (Song(x) → ¬Visual(x))","output":"No songs are visuals. "}
{"input":"∀x (FolkSong(x) → Song(x))","output":"All folk songs are songs. "}
{"input":"∀x (Video(x) → Visual(x))","output":"All videos are visuals. "}
{"input":"∀x (Movie(x) → Video(x))","output":"All movies are videos."}
{"input":"∀x (ScifiMovie(x) → Movie(x))","output":"All sci-fi movies are movies."}
{"input":"ScifiMovie(inception)","output":"Inception is a sci-fi movie."}
{"input":"¬FolkSong(mac) ∧ ¬ScifiMovie(mac)","output":"Mac is neither a folk song nor a sci-fi movie."}
{"input":"∀x (InductiveReasoning(x) → DeriveFrom(generalPrinciple, observations))","output":"All inductive reasoning processes derive general principles from a body of observations."}
{"input":"∀x (MajorArgumentForm(x) → (InductiveReasoning(x) ⊕ DeductiveReasoning(x))","output":"Two major types of reasoning rules are inductive reasoning and deductive reasoning. "}
{"input":"∀x (DeductiveReasoning(x) → (BasedOn(x, fact) ∨ BasedOn(x, rule)))","output":"All deductive reasoning processes are only based on facts and rules. "}
{"input":"∀x ((BasedOn(x, fact) ∨ BasedOn(x, rule)) → (¬UsedFor(x, statisticalGeneralization)))","output":"Nothing only based on facts and rules is used for statistical generalization. "}
{"input":"¬(InductiveReasoning(modusPonens) ∧ UsedFor(modusPonens, statisticalGeneralization))","output":"Modus Ponens is not both used in inductive reasoning and used for statistical generalization. "}
{"input":"ArgumentForm(modusPonens)","output":"Modus Ponens is a component of a major part of reasoning rule. "}
{"input":"∀x ((In(x, yaleSVarsityTeam) ∧ TrickShotArtist(x)) → ¬StruggleAt(x, halfCourtShot))","output":"No trick-shot artist in Yale's varsity team struggles with half court shots."}
{"input":"∀x (In(x, yaleSVarsityTeam) → (StruggleAt(x, halfCourtShot) ∨ GoodAt(x, threes)))","output":"Everyone on Yale's varsity team is someone who struggles with half court shots or who successfully shoots a high percentage of 3-pointers.  "}
{"input":"∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, threes)) → GoodAt(x, twos))","output":"Everyone on Yale's varsity team who successfully shoots a high percentage of 3-pointers is solid at shooting 2-pointers.  "}
{"input":"∀x ((In(x, yaleSVarsityTeam) ∧ GoodAt(x, twos)) → BadAt(x, midRangeShot))","output":"No one on Yale's varsity team who is solid at shooting 2-pointers is bad at mid-range shots.  "}
{"input":"In(jack, yaleSVarsityTeam) ∧ (TrickShotArtist(jack) ⊕  GoodAt(jack, threes))","output":"Jack is on Yale's varsity team, and he is either a trick-shot artist or he successfully shoots a high percentage of 3-pointers."}
{"input":"∀x (Plant(x) → ¬Fungi(x))","output":"No plants are fungi."}
{"input":"∀x (Mushroom(x) → Fungi(x))","output":"Mushrooms are fungi."}
{"input":"∀x (Road(x) → ¬Dustless(x))","output":"No road is dustless."}
{"input":"∃x ∃y (Street(x) ∧ Street(y) ∧ Road(x) ∧ Road(y) ∧ ¬(x=y))","output":"Some streets are roads."}
{"input":"LocatedOn(newYorkCity, eastCoast)","output":"New York City is located on the East Coast. "}
{"input":"LocatedOn(seattle, westCoast)","output":"Seattle is located on the West Coast. "}
{"input":"∀x ∀y ∀z ((TravelingFrom(x, y) ∧ LocatedOn(y, eastcoast) ∧ TravelingTo(x, z) ∧ LocatedOn(z, westcoast)) → OnLongFlight(x))","output":"If a person is somewhere located on the East coast and is traveling to somewhere located on the west coast, they will be on a long flight."}
{"input":"∀x (InBuisnessClass(x) ∧ TravelingTo(x, seattle) ∧ TravelingFrom(x, newYorkCity) → ¬InFirstClass(x))","output":"People in business class from New York City to Seattle are not in first class."}
{"input":"∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))","output":"People on long flights are uncomfortable unless they're in first class."}
{"input":"∀x (Musician(x) → Have(x, busyLife))","output":"Musicians have very busy lives."}
{"input":"Musician(singhKaur) ∧ Famous(singhKaur)","output":"Singh Kaur is a musician and famous."}
{"input":"∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeALotOfMoney(x))","output":"If a musician is not famous, that musician will not make a lot of money."}
{"input":"∃x (Musician(x) ∧ (Singer(x) ∨ Writer(x)))","output":"A musician can be a singer or a writer."}
{"input":"∀x (Building(x) → Tall(x))","output":"Each building is tall. "}
{"input":"∀x (Tall(x) → Height(x))","output":"Everything tall has height."}
{"input":"Cat(garfield) ∧ MainCharacterOf(garfield, filmGarfield) ∧ Orange(garfield) ∧ Fat(garfield) ∧ Like(garfield, lasagna)","output":"A cat named Garfield, the main character of the film Garfield, is orange and fat and likes having lasagna. "}
{"input":"PetOf(garfield, jon) ∧ PetOf(odie, jon) ∧ ShareHomeWith(garfield, odie)","output":"Garfield shares a home with Odie, another pet of Jon's. "}
{"input":"Hate(garfield, odie)","output":"Garfield hates Odie."}
{"input":"∀x ∀y ∃z (PetOf(x, z) ∧ PetOf(y, z) ∧ Hate(x, y) → Childish(x) ∧ Possessive(x))","output":"A pet who hates the pet with whom he shares the same owner is childish and possessive."}
{"input":"∀x (Human(x) → CapableOf(x, abstractThought))","output":"All humans are capable of abstract thoughts."}
{"input":"∀x (Plant(x) → ¬CapableOf(x, abstractThought))","output":"Plants are not capable of abstract thoughts."}
{"input":"∀x (MulticellularCreature(x) ∧ (Autotrophic(x) ∨ DigestFoodInternally (x)) → Plant(x) ⊕ Animal(x))","output":"All multicellular creatures that are autotrophic or digest food internally are plants and animals."}
{"input":"∀x (Goat(x) → Animal(x))","output":"All goats are animals."}
{"input":"∀x (Dirt(x) → ¬Animal(x))","output":"Dirt is not an animal."}
{"input":"Goat(hulu) ∨ HumanBeing(hulu)","output":"Hulu is a goat or a human."}
{"input":"(MulticellularCreature(hulu) ∧ (Autotrophic(hulu) ∨ DigestFoodInternally (hulu))","output":"Hulu is a multicellular creature that is autotrophic or digests food internally. "}
{"input":"∀x (ControlledSubstances(x) → Drugs(x))","output":"A controlled substance is a drug."}
{"input":"∃x ∃y (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ (¬(x=y)) ∧ Beneficial(x) ∧ Harmful(y))","output":"There exist both harmful and beneficial controlled substances."}
{"input":"∀x ∀y ((Child(x) ∧ ControlledSubstances(y) ∧ ExposedTo(x, y)) → InChemicalEndangerment(x))","output":"If a child is exposed to a controlled substance, they are in chemical endangerment."}
{"input":"∀x (InChemicalEndangerment(x) → Harmful(x))","output":"Chemical Endangerment is harmful. "}
{"input":"PassedIn(controlledSubstancesAct, yr1971) ∧ Act(controlledSubstancesAct)","output":"The Controlled Substances Act was an act passed in 1971."}
{"input":"∃x ∃y(Act(x) ∧ PreventsHarm(x) ∧ (¬(x=y)) ∧ Act(y) ∧ PreventsHarm(y))","output":"Some Acts prevent harmful things."}
{"input":"∀x (Have(x, corporateJob) → ¬Take(x, financialRisk))","output":"No people who have corporate jobs are taking more than normal financial risks."}
{"input":"∀x (Entrepreneur(x) → Take(x, financialRisk))","output":"All entrepreneurs are taking more than normal financial risks."}
{"input":"∀x (RiskAverse(x) → Have(x, corporateJob))","output":"All risk-averse working people are people who have corporate jobs."}
{"input":"∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HateWorkingFor(x, y) ∧ HateWorkingFor(x, z)) → Entrepreneur(x))","output":"All working people who hate working for others want to be entrepreneurs."}
{"input":"¬Entrepreneur(markZuckerberg) ∧ ¬(∃y ∃z (¬(y=markZuckerberg) ∧ ¬(z=markZuckerberg) ∧ ¬(y=z) ∧ HateWorkingFor(markZuckerberg, y) ∧ HateWorkingFor(markZuckerberg, z))) → ¬RiskAverse(markZuckerberg)","output":"If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse working person."}
{"input":"∃x (Wildfeed(x) ∧ Unannounced(x) ∧ Program(x))","output":"Wildfeed exists as an unannounced program."}
{"input":"∀x (Wildfeed(x) → SportingEvent(x) ∨ News(x) ∨ SyndicatedShow(x))","output":"Wildfeed can be sporting events, news, or syndicated shows."}
{"input":"∀x (Prerecorded(x) → CopyrightViolation(x))","output":"Pre-recorded content is a copyright violation."}
{"input":"∀x (Program(x) → Prerecorded(x))","output":"Programs are pre-recorded."}
{"input":"LocatedIn(newYorkCity, unitedStatesOfAmerica)","output":"New York City is Located in the United States of America."}
{"input":"LocatedIn(usa, northAmerica)","output":"The United States of America is part of North America."}
{"input":"LocatedIn(northAmerica, westernHemisphere)","output":"North America is in the western hemisphere of the earth."}
{"input":"HighlyDeveloped(newYorkCity)","output":"New York City is a highly developed city."}
{"input":"∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))","output":"If place A is located in place B and place B is located in place C, then place A is located in place C."}
{"input":"Poem(catullus4) ∧ WrittenBy(catullus4, catullus) ∧ AncientRomanWriter(catullus)","output":"Catullus 4 is a poem written by the ancient Roman writer Catullus."}
{"input":"Story(catullus4) ∧ About(catullus4, retirementOfAWellTraveledShip)","output":"Catullus 4 is a story about the retirement of a well-traveled ship."}
{"input":"Poem(catullus4) ∧ StrongAgingAnalogy(catullus4)","output":"There is a strong analogy of human aging in the poem Catullus 4."}
{"input":"Poem(catullus4) ∧ WrittenIn(catullus4, iambicTrimeter) ∧ Convey(catullus4, aSenseOfSpeedOverTheWaves)","output":"Catullus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves."}
{"input":"American(westworld) ∧ ScienceFictionThriller(westworld)","output":"Westworld is an American science fiction-thriller TV series."}
{"input":"Debut(westworld, year2016) ∧ TvSeries(westworld)","output":"In 2016, a television series named Westworld debuted on HBO."}
{"input":"Adapted(westworld, westworldTheFilm) ∧ Produce(westworldTheFilm, year1973) ∧ Wrote(michael, westworldTheFilm) ∧ Directed(michael, westworldTheFilm)","output":"The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton."}
{"input":"Film(westworldTheFilm) ∧ About(westworldTheFilm, malfunctioningRobots)","output":"The 1973 film Westworld is about robots that malfunction and begin killing human visitors."}
{"input":"HeldIn(2008SummerOlympics, beijingChina)","output":"The 2008 Summer Olympics were held in Beijing, China."}
{"input":"SecondSummerOlympicsGames(2008SummerOlympics) ∧ BeHeldIn(2008SummerOlympics, communistState)","output":"The 2008 Summer Olympics was the second Summer Olympic Games held in a communist state."}
{"input":"Won(china, theMostGoldMedals)","output":"China won the most gold medals (48) in the 2008 Summer Olympics."}
{"input":"PlacedSecondInGoldMedalsIn(unitedStates, 2008SummerOlympics) ∧ Won(unitedStates, highestNumberOfMedals)","output":"The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics."}
{"input":"PlacedThirdInGoldMedalsIn(russia, 2008SummerOlympics)","output":"The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics."}
{"input":"∀x ∀y (Placed(x, thirdInGoldMedals) ∧ Won(y, mostGoldMedals) → FewerGoldMedalsThan(x, y))","output":"If a country placed third in gold medals, then it had fewer gold medals than the team that won the most gold medals."}
{"input":"DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)","output":"Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin."}
{"input":"¬DistrictIn(yangshuo, guilin)","output":"Yangshuo is not a district in Guilin. "}
{"input":"∀x (MichaelsNeightbor(x) ∧ GrowIn(x, vegetable, garden) → Have(x, ampleSpace))","output":"All of Michael's neighbors who grow their own fresh vegetables in their home gardens also have ample space."}
{"input":"∀x (MichaelsNeightbor(x) ∧ YoungWorkingProfession(x) ∧ LiveIn(x, largeCity) → ¬Have(x, ampleSpace))","output":"All of Michael's neighbors who are young working professionals and live in large cities, do not have ample space."}
{"input":"∀x (MichaelsNeightbor(x) ∧ OrderOften(x, takeout) → Grow(x, vegetable, garden))","output":"All of Michael's neighbors who order takeout from delivery services often grow their own fresh vegetables in their home garden."}
{"input":"∀x (MichaelsNeightbor(x) ∧ EnjoyGoingOutOftenToWith(x, restaurant, friend) → OrderOften(x, takeout))","output":"All of Michael's neighbors who enjoy going out often to restaurants with friends order takeout from delivery services often."}
{"input":"∀x (MichaelsNeightbor(x) ∧ ToutOver(x, homecookedMeals, fastFood) → EnjoyGoingOutOftenToWith(x, restaurant, friend))","output":"All of Michael's neighbors who regularly tout the benefits of homegrown and homecooked meals over fast food enjoy going out often to restaurants with friends. "}
{"input":"MichaelsNeightbor(peter) ∧ (GrowIn(peter, vegetable, garden) ∨ ToutOver(peter, homecookedMeals, fastFood))","output":"Peter, Michael's neighbor, grows his own fresh vegetables in his home garden, or regularly touts the benefits of homegrown and homecooked meals over fast food, or both."}
{"input":"∀x (OwnedBy(x, company) → ConnectedTo(x, googleHome))","output":"All devices belonging to the company are connected to Google Home. "}
{"input":"∀x (OwnedBy(x, employee) → ConnectedTo(x, companyWiFi))","output":"All devices belonging to employees are connected to the company's wifi. "}
{"input":"∀x (ConnectedTo(x, googleHome) → ControlledBy(x, managers))","output":"All devices connected to Google Home are controlled by the managers. "}
{"input":"∀x (ConnectedTo(x, companyWiFi) → EasyToOperate(x))","output":"All devices that connect to the company's wifi are easy to operate. "}
{"input":"OwnedBy(modelXX, employee)","output":"ModelXX belongs to employees. "}
{"input":"∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusician(x)) → ¬PermanentMemberOf(x, theOrchestra))","output":"No touring musicians who perform at the New Haven Symphony Orchestra are permanent members of the orchestra."}
{"input":"∀x (PerformAt(x, newHavenSymphonyOrchestra) → (PermanentMemberOf(x, theOrchestra) ∨ HaveTemporaryRoleAt(x, theOrchestra)))","output":"Musicians who perform at the New Haven Symphony Orchestra are permanent members of an orchestra, or they have temporary roles at the orchestra."}
{"input":"∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ TouringMusicians(x)) → HaveTemporaryRoleAt(x, theOrchestra))","output":"All touring musicians who perform at the New Haven Symphony Orchestra have temporary roles at the orchestra."}
{"input":"∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ HaveTemporaryRoleAt(x, theOrchestra)) → InterestingSoloist(x))","output":"All musicians performing at the New Haven Symphony Orchestra who have temporary roles at the orchestra are interesting soloists."}
{"input":"∀x ((PerformAt(x, newHavenSymphonyOrchestra) ∧ InterestingSoloist(x)) → CapableOfAttractingAudiences(x))","output":"All musicians performing at New Haven Symphony Orchestra who are interesting soloists are capable of attracting audiences."}
{"input":"PerformAt(ryan, newHavenSymphonyOrchestra)","output":"Ryan is performing at New Haven Symphony Orchestra."}
{"input":"(InterestingSoloist(ryan) ∧ HaveTemporaryRoleAt(ryan, theOrchestra)) → ¬(TouringMusician(ryan) ⊕ CapableOfAttractingAudiences(ryan))","output":"If Ryan is an interesting soloist and has a temporary role at the orchestra, then he is capable of attracting large audiences if and only if he is a touring soloist musician. "}
{"input":"∀x (In(x, potterville) ∧ Yell(x) → ¬Cool(x))","output":"If someone in Potterville yells, then they are not cool."}
{"input":"∀x (In(x, potterville) ∧ Angry(x) → Yell(x))","output":"If someone in Potterville is angry, then they yell."}
{"input":"∀x (In(x, potterville) ∧ Fly(x) → Cool(x))","output":"If someone in Potterville flies, then they are cool."}
{"input":"∀x (In(x, potterville) ∧ Know(x, magic) → Fly(x))","output":"Every person in Potterville that knows magic flies."}
{"input":"∀x (In(x, potterville) ∧ Wizard(x) → Know(x, magic))","output":"All wizards in Potterville know magic."}
{"input":"In(harry, potterville) ∧ (Yell(harry) ⊕ Fly(harry))","output":"Harry, who lives in Potterville either yells or flies. "}
{"input":"Wizard(potter) ∧ Fly(potter)","output":"Potter, who lives in Potterville, is a wizard and flies."}
{"input":"∀x (ThisBrand(x) ∧ Product(x) → (ProducedIn(x, china) ⊕ ProducedIn(x, uS)))","output":"All of this brand's products are either produced in China or in the US. "}
{"input":"∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, china)) → Labeled(x))","output":"All of this brand's products produced in China are labeled. "}
{"input":"∀x ((ThisBrand(x) ∧ Product(x) ∧ ProducedIn(x, us)) → SoldIn(x, us))","output":"All of this brand's products produced in the US are sold in the US. "}
{"input":"∀x ((ThisBrand(x) ∧ Product(x) ∧ Labeled(x)) → Cheaper(x))","output":"The products of this brand that are labeled are cheaper."}
{"input":"∀x ((ThisBrand(x) ∧ Product(x) ∧ SoldIn(x, us)) → SoldIn(x, walmart))","output":"All of this brand's products sold in the US are sold at Walmart. "}
{"input":"∀x (ThisBrand(x) ∧ Product(x) ∧ DisplayedIn(x, homepage) → SoldIn(x, walmart))","output":"All products of this brand displayed on the homepage are sold at Walmart. "}
{"input":"∀x (ThisBrand(x) ∧ Product(x) ∧ ReturnedBy(x, customer) → ¬SoldIn(x, walmart))","output":"None of this brand's products that are returned by customers are sold at Walmart. "}
{"input":"Product(g910) ∧ ThisBrand(g910) ∧ (¬(DisplayedIn(g910, homepage) ⊕ Cheaper(g910)))","output":"G-910 is a product of this brand, and it is either displayed on the homepage and is cheaper, or it is neither displayed on the homepage nor is it cheaper."}
{"input":"∀x (BelieveIn(x, santaClaus) ⊕ ThinkMadeUp(x, santaClaus))","output":"People either believe in Santa Claus, or think he is made up."}
{"input":"∀x (BelieveIn(x, santaClaus) → Expect(x, present, christmasMorning))","output":"People who believe in Santa Claus expect to get presents on Christmas morning."}
{"input":"∀x (ThinkMadeUp(x, santaClaus) → WouldBeSurprisedToSeeIn(x, santaClaus, house))","output":"People who think Santa Claus is made up, then they would be surprised to see him in their house."}
{"input":"∀x (Expect(x, present, christmasMorning) → ExcitedFor(x, christmas))","output":"People who expect presents on Christmas morning are excited for it to be Christmas."}
{"input":"∀x (WouldBeSurprisedToSeeIn(x, santaClaus, house) → ¬LeaveOut(x, cookies))","output":"If people would be surprised to see Santa Claus in their house, then they don't leave out cookies on Chrismtas Eve."}
{"input":"¬(Expect(marcy, present, christmasMorning) ∧ ExcitedFor(marcy, christmas) ∧ BelieveIn(marcy, santaClaus))","output":"Mercy is not someone who expects presents Christmas morning, is excited for Chrismtas, and believes in Santa Claus."}
{"input":"Country(indonesia)","output":"Indonesia is a country."}
{"input":"∀x ∃y (In(indonesia) ∧ Prosecutor(x) ∧ SpecialCrime(y) → InvestigatePersonally(x, y))","output":"In Indonesia, the prosecutor only personally investigates cases of some special crimes."}
{"input":"Crime(corruption)","output":"Corruption is a type of crime."}
{"input":"∀x ∀y ∀z (Crime(y) ∧ PoliceCompleteInvestigation(y) ∧ Prosecutor(x) → Evidence(z) ∧ HandedTo(z, x))","output":"Once the police complete crime investigations, the evidence is handed to the prosecutor. "}
{"input":"∀x (Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))","output":"Evidence can be either satisfactory or unsatisfactory."}
{"input":"∀x ∀y (Evidence(y) ∧ Prosecutor(x) ∧ HandedTo(x) ∧ Satisfactory(y) → ProsecuteInAppropriateCourt(x, theOffender))","output":"If the evidence is handed to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court."}
{"input":"∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))","output":"No battery-powered watch is automatic."}
{"input":"∀x (DigitalWatch(x) → BatteryPoweredWatch(x))","output":"All digital watches are battery-powered."}
{"input":"∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))","output":"Some mechanical watches are automatic."}
{"input":"∀x (SmartWatch(x) → DigitalWatch(x))","output":"All smart watches are digital."}
{"input":"¬(DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch))","output":"Moonwatch is either a digital watch and an automatic, or it is neither."}
{"input":"∀x (Person(x) ∧ Can(x, distinguishTheTasteOfDifferentCondiments) → Can(x, useDifferentCondimentsToCook))","output":"If a person can distinguish the taste of different condiments, then they can also use different condiments for cooking."}
{"input":"∀x (Person(x) ∧ Has(x, talentOfCooking) → Can(x, distinguishTheTasteOfDifferentCondiments))","output":"People who have a talent of cooking can distinguish the taste of different condiments."}
{"input":"∀x ∀y (CanMake(x, y) ∧ Meal(y) ∧ Delicious(y) ∧ Person(x) → Has(x, talentOfCooking)) ","output":"Only people with the talent of cooking can make delicious meals."}
{"input":"∀x ∀y (Meal(y) ∧ PopularAt(y, party) → Delicious(y))","output":"If the meal is popular at the party, then it is delicious."}
{"input":"∃x (Person(john) ∧ MakeMeal(john, x) ∧ Meal(x) ∧ PopularAt(x, party))","output":"John can make meals which are popular at the party."}
{"input":"∀x (Country(x) ∧ PossibleEffectiveMonetaryPolicy(x) → SuccessfulInflationControl(x) ∧ StongNationalCurrency(x))","output":"For a country, if effective monetary policy is possible, it must have successful inflation control and a strong national currency."}
{"input":"¬(∃x (Country(x) ∧ SuccessfulInflationControl(x) ∧ RegulateExchangeRate(x)))","output":"A country cannot simultaneously regulate the exchange rate and successfully control inflation."}
{"input":"∀x (IntroductionOfOn(x, embargo, foreightTradeGoods) → SharpDecreasesInExport(x))","output":"The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports."}
{"input":"∀x (SharpDecreasesInExport(x) → ¬StongNationalCurrency(x))","output":"If exports fall sharply, this country's national currency cannot be strong."}
{"input":"∀x (InflationControl(x) → StongNationalCurrency(x))","output":"Inflation control is required to have a strong national currency. "}
{"input":"IntroductionOfOn(russia, embargo, foreightTradeGoods)","output":"There is an embargo on Russian foreign trade goods."}
{"input":"FrenchTelevision(videoGag) ∧ AirWeekly(videoGag)","output":"Video Gag is a French television series that airs weekly."}
{"input":"AirOn(videoGag, frenchBroadcastChannelTF1)","output":"Video Gag airs on the French broadcast channel TF1. "}
{"input":"∀x (Funny(x) ∧ Video(x) ∧ SendIn(viewers, x, frenchBroadcastChannelTF1)  → AirWeekly(x) ) ∧ AirOn(videoGag, x))","output":"If viewers send funny videos to the French broadcast channel TF1, then Video Gag airs them weekly."}
{"input":"∀x (Video(x) ∧ AirOn(videoGag, x) → In(x, french))","output":"All videos aired on Video Gag are in French."}
{"input":"∀x (Phone(x) → Thing(x))","output":"All phones are things."}
{"input":"∀x (Cellphone(x) → Phone(x))","output":"All cell phones are phones. "}
{"input":"∀x (Iphone(x) → Cellphone(x))","output":"All iPhones are cell phones. "}
{"input":"∀x (Employee(x) → WageEarner(x))","output":"All employees are wage earners."}
{"input":"∀x (WageEarner(x) → Human(x))","output":"All wage earners are human. "}
{"input":"Employee(jack) ⊕ WageEarner(jack) ","output":"Jack is either an employee or a wage earner."}
{"input":"Human(jack) ⊕ Phone(jack)","output":"Jack is either a human or a phone."}
{"input":"∀x (IPhone(x) → Electronic(x))","output":"All iPhones are electronic."}
{"input":"∃x ∃y (Phone(x) ∧ Phone(y) ∧ IPhone(x) ∧ IPhone(y) ∧ ¬(x=y))","output":"Some phones are iPhones."}
{"input":"Museum(metropolitanMuseumOfArt) ∧ In(metropolitanMuseumOfArt, nYC)","output":"The Metropolitan Museum of Art is a museum in NYC."}
{"input":"Museum(whitneyMuseumOfAmericanArt) ∧ In(metropolitanMuseumOfArt, nYC)","output":"Whitney Museum of American Art is a museum in NYC."}
{"input":"Museum(museumOfModernArt) ∧ In(museumOfModernArt, nYC)","output":"The Museum of Modern Art (MoMA) is a museum in NYC. "}
{"input":"Include(metropolitanMuseumOfArt, byzantineArt) ∧ Include(metropolitanMuseumOfArt, islamicArt)","output":"The Metropolitan Museum of Art includes Byzantine and Islamic Art. "}
{"input":"Include(whitneyMuseumOfAmericanArt, americanArt)","output":"Whitney Museum of American Art includes American art."}
{"input":"∃x (InBenjiSFamily(x) → (LikeEating(x, cheese) ∨ Francophile(x)))","output":"There's a person in Benji's family who likes eating cheese or is a francophile."}
{"input":"∀x ((InBenjiSFamily(x) ∧ Francophile(x)) → ¬Favor(x, spain))","output":"There is no francophile in Benji's family whose favorite country is Spain."}
{"input":"∃x (InBenjiSFamily(x) ∧ (Favor(x, spain) ∨ LikeEating(x, cheese)))","output":"There is a person in Benji's family who likes eating cheese or whose favorite country is Spain."}
{"input":"InBenjiSFamily(fabien) ∧ (¬(LikeEating(fabien, cheese) ∧ Study(fabien, spanish)))","output":"Fabien is in Benji's family and  does not both study Spanish and also like eating cheese."}
{"input":"Study(fabien, spanish)","output":"Fabien studies Spanish."}
{"input":"Village(gasteren) ∧ Province(drenthe) ∧ In(gasteren, drenthe)","output":"Gasteren is a village located in the province of Drenthe."}
{"input":"Province(drenthe) ∧ In(drenthe, netherlands)","output":"Drenthe is a Dutch province. "}
{"input":"∀x (City(x) → ¬Village(x))","output":"No cities are villages."}
{"input":"∃x (Population(x, num155) ∧ Village(x) ∧ In(x, drenthe))","output":"The population of a village in Drenthe was 155 people."}
{"input":"∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypus(x) ⊕ Echidna(x)))","output":"The only types of mammals that lay eggs are either platypuses or echidnas."}
{"input":"∀x (Platypuses(x) → ¬Hyrax(x))","output":"Platypuses are not hyrax."}
{"input":"∀x (Echidnas(x) → ¬Hyrax(x))","output":"Echidnas are not hyrax."}
{"input":"∀x (Mammal(x) → ¬Invertebrate(x))","output":"No mammals are invertebrates."}
{"input":"∀x (Animal(x) → (Vertebrate(x) ∨ Invertebrate(x)))","output":"All animals are either vertebrates or invertebrates."}
{"input":"∀x (Mammal(x) → Animal(x))","output":"Mammals are animals."}
{"input":"∀x (Hyrax(x) → Mammal(x))","output":"Hyraxes are mammals."}
{"input":"∀x (Grebes(x) → LayEgg(x))","output":"Grebes lay eggs."}
{"input":"∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))","output":"Grebes are not platypuses and also not echidnas."}
{"input":"Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)","output":"Bobby Flynn is a singer-songwriter. "}
{"input":"FinishesIn(bobbyFlynn, number7) ∧ CompetesOnAustralianIdol(bobbyFlynn)","output":"Bobby Flynn finished 7th while competing on Australian Idol."}
{"input":"∀x (CompetesOnAustralianIdol(x) → AustralianCitizen(x))","output":"Australian Idol competitors are Australian citizens."}
{"input":"NationWideTourIn(theOmegaThreeBand, year2007) ","output":"The Omega Three band made a nationwide tour in 2007."}
{"input":"Member(bobbyFlynn, theOmegaThreeBand)","output":"Bobby Flynn is a member of The Omega Three band."}
{"input":"BornIn(bobbyFlynn, queensland)","output":"Bobby Flynn was born in Queensland."}
{"input":"∀x (Protein(x) → OrganicCompound(x))","output":"All proteins are organic compounds."}
{"input":"∀x (Enzyme(x) → OrganicCompound(x))","output":"All enzymes are organic compounds."}
{"input":"American(maggieFriedman) ∧ Screenwriter(maggieFriedman) ∧ Producer(maggieFriedman)","output":"Maggie Friedman is an American screenwriter and producer."}
{"input":"ShowRunnerOf(maggieFriedman, witchesOfEastEnd) ∧ ExecutiveProducerOf(maggieFriedman, witchesOfEastEnd) ∧ LifetimeTelevisionSeries(maggieFriedman)","output":"Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End."}
{"input":"FantasyDrama(witchesOfEastEnd) ∧ Series(witchesOfEastEnd)","output":"Witches of East End is a fantasy-drama series."}
{"input":"Produces(maggieFriedman, eastwick) ∧ Develops(maggieFriedman, eastwick)","output":"Maggie Friedman produced and developed Eastwick."}
{"input":"Series(eastwick) ∧ AiredOn(eastwick, aBC)","output":"Eastwick is a series by ABC."}
{"input":"Greek(evangelosEleftheriou) ∧ ElectricalEngineer(evangelosEleftheriou)","output":"Evangelos Eleftheriou is a Greek electrical engineer."}
{"input":"WorkForIn(evangelosEleftheriou, iBM, zurich)","output":"Evangelos Eleftheriou worked for IBM in Zurich."}
{"input":"∀x ∀x ∀z (Company(x) ∧ WorkForIn(y, x, z) → HaveOfficeIn(x, z))","output":"If a company has employees working for them somewhere, then they have an office there."}
{"input":"Company(ibm)","output":"IBM is a company."}
{"input":"∃x (Song(x) ∧ By(x, boneym,) ∧ Number1GermanSingle(x))","output":"Boney M. had several German #1 singles."}
{"input":"Song(hoorayHoorayItsAHoliHoliday) ∧ HitAllOverEurope(hoorayHoorayItsAHoliHoliday)","output":"\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe."}
{"input":"Song(hoorayHoorayItsAHoliHoliday) ∧ ¬Number1GermanSingle(hoorayHoorayItsAHoliHoliday)","output":"\"Hooray! Hooray! It's a Holi-Holiday!\" was not in German #1 singles."}
{"input":"∀x (PeakBelowOn(x, number1, germanChart) → ¬Number1GermanSingle(x))","output":"A song that peaks below #1 on the german charts is also a song that is not the #1 single in Germany."}
{"input":"∀x (Chef(x) → Can(x, cook))","output":"Every chef can cook."}
{"input":"∃x (¬Chef(x) ∧ Can(x, cook))","output":"Some people who aren’t chefs can cook."}
{"input":"∀x (Can(x, cook) → (CanMake(x, scrambledEggs) ∧ CanMake(x, pasta)))","output":"People who cook can make scrambled eggs and pasta."}
{"input":"∀x (CanMake(x, cookies) ∧ CanMake(x, muffins) → Baker(x))","output":"If someone can make cookies and muffins, they are a baker."}
{"input":"∀x ((Baker(x) ∧ CanMake(x, scrambledEggs)) → CanMake(x, goodBreakfast))","output":"Bakers who can also make scrambled eggs can make a good breakfast."}
{"input":"CanMake(luke, cookies) ∧ (CanMake(luke, scrambledEggs) ∧ CanMake(luke, muffins) ∧ ¬CanMake(luke, pasta)","output":"Luke can make cookies, scrambled eggs, and muffins, but not pasta."}
{"input":"∃x ∃y (Develop(eTS, x) ∧ Develop(eTS, y) ∧ StandardizedTest(x) ∧ StandardizedTest(y) ∧ In(x, unitedState) ∧ In(y, unitedState) ∧ For(x, k12AndHigherEducation) ∧ For(y, k12AndHigherEducation))","output":"ETS develops various standardized tests primarily in the United States for K-12 and higher education. "}
{"input":"∃x (Administer(eTS, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTest(x)))","output":"ETS administers international tests, including the TOEFL, TOEIC, GRE, and subject tests."}
{"input":"∃x (Develop(eTS, x) ∧ AssociatedWith(x, entryToUSEducationInstitution))","output":"Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. "}
{"input":"∃x (Develop(eTS, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilityTesting))","output":"ETS also develops K-12 statewide assessments used for accountability testing in many states."}
{"input":"∀x (Hodophiles(x) ∧ EnjoyEating(x, gelato) → Enjoy(x, vacationToItaly))","output":"All hodophiles who enjoy eating gelato ice cream would enjoy a vacation to Italy."}
{"input":"∀x (Hodophiles(x) ∧ ¬(∃y (Resist(x, y) ∧ Hallmark(y) ∧ Delectabl(y) ∧ Dessert(y) ∧ FamousIn(y, italy))))","output":"No hodophiles can resist the hallmark delectable desserts famous in Italy."}
{"input":"∀x (Hodophiles(x) → (EnjoyEating(x, gelato) ∨ LoveToTravelOften(x))","output":"Hodophiles enjoy eating gelato ice cream or love to travel and vacation often, or both."}
{"input":"∀x (Hodophiles(x) ∧ TakeIn(x, studyAbroadSemester, europe) → ¬Regret(x, collegeExperience))","output":"No hodophiles who study abroad in Europe regret their college experiences."}
{"input":"∀x (Hodophiles(x) ∧ LoveToTravelOften(x) → TakeIn(x, studyAbroadSemester, europe))","output":"If hodophiles love to travel and vacation often, then they study abroad in Europe."}
{"input":"Hodophiles(robert) ∧ ¬(EnjoyEating(robert, gelato) ⊕ LoveToTravelOften(robert))","output":"Robert is a hodophile, and he either enjoys eating gelato ice cream and loves to travel and vacation often, or does not enjoy eating gelato ice cream and does not love to travel and vacation often."}
{"input":"∀x (Have(x, authorization, studyIn, unitedStates) → EnrolledIn(x, academicProgram))","output":"To have the authorization to study in the United States as a foreigner, you must be enrolled in an academic program."}
{"input":"∀x (EnrolledIn(x, academicProgram) → ¬Work(x, fullTime))","output":"Those who are enrolled in an academic program can not work full-time."}
{"input":"∀x (StudyIn(x, unitedStates) → Have(x, authorization, studyIn, unitedStates))","output":"Every who studies in the United States as a foreigner has the authorization to study in the U.S."}
{"input":"∀x (PhDGraduate(x) → Work(x, fullTime))","output":"All PhD graduate can work full-time. "}
{"input":"¬StudyIn(x, unitedStates) → EnrolledIn(x, academicProgram)","output":"If Tom does not study in the United States as a foreigner, he is enrolled in an academic program."}
{"input":"Speedway(islip) ∧ SmallestRaceTrack(islip)","output":"Islip Speedway is the smallest race track."}
{"input":"∃x ∃y (DemolitionDerby(x) ∧ SmallestRaceTrack(y) ∧ On(x, y))","output":"There was a demolition derby on the smallest race track."}
{"input":"Demolished(islip) ⊕ StillUsed(islip)","output":"Islip is either demolished or still being used."}
{"input":"∀x (Speedway(x) ∧ StillUsed(x) → Have(races, heldAt, x))","output":"Speedways that are still being used have races held at them."}
{"input":"¬Have(races, heldAt, islip)","output":"Islip doesn't have races held at it."}
{"input":"∀x (Taxpayer(x) → ContributeTo(x, country))","output":"If a person pays their taxes, then they contribute to the country. "}
{"input":"∀x (WorkFor(x, governmentAgency) → Taxpayer(x))","output":"Everyone who works for a government department pays a tax on their salary. "}
{"input":"∀x (ServesIn(x, theArmy) → WorkFor(x, governmentAgency))","output":"Everyone in the army is an employee of a government department."}
{"input":"∀x (SentencedForMurder(x) → Imprisoned(x))","output":"Everyone convicted of murder goes to prison. "}
{"input":"∀x (Imprisoned((x) → Has(x, criminalRecord))","output":"Everyone who has been to prison has a criminal record."}
{"input":"SentencedForMurder(james) ⊕ Imprisoned(james) ","output":"James was either once convicted of murder, or spent time in prison."}
{"input":"Has(james, criminalRecord) ⊕ Taxpayer(james)","output":"James either has a criminal record, or pays his taxes. "}
{"input":"DrainageBasinOf(crotonRiverWatershed, crotonRiver)","output":"The Croton River watershed is the drainage basin of the Croton River."}
{"input":"In(crotonRiver, southwesternNewYork)","output":"The Croton River is in southwestern New York."}
{"input":"∀x ((Water(x) ∧ In(x, crotonRiverWatershed)) → FlowsTo(x, bronx))","output":"Water from the Croton River watershed flows to the Bronx."}
{"input":"In(bronx, newYork)","output":"The Bronx is in New York."}
{"input":"∀x (NuclearPoweredSubmarine(x) → Warship(x))","output":"All nuclear-powered submarines are warships."}
{"input":"∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x))","output":"No nuclear-powered submarines are commercial vessels."}
{"input":"∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))","output":"If an album is written by a rock band, then the genre of the album is rock."}
{"input":"∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))","output":"If a band writes an album winning an award, then this band wins this award."}
{"input":"AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)","output":"Trouble at the Henhouse is an album by The Tragically Hip."}
{"input":"RockBand(the_Tragically_Hip, canada)","output":"The Tragically Hip is a Canadian rock band."}
{"input":"SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)","output":"The song \"Butts Wigglin'\" is in Trouble at the Henhouse."}
{"input":"AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)","output":"Trouble at the Henhouse won the Album of the Year award."}
{"input":"∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))","output":"A song in Trouble at the Henhouse appeared in a film."}
{"input":"SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)","output":"Daniel is a software engineer, and he works at Palantir Technologies."}
{"input":"Studied(daniel, bioengineering) ∧ UndergraduateAt(daniel, riceUniversity)","output":"Daniel studied bioengineering during his undergraduate at Rice University."}
{"input":"WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)","output":"Daniel’s older sister works at Meta as a technical sourcer. "}
{"input":" GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)","output":"Daniel’s dad and older sister both graduated from Stanford University."}
{"input":"Doctor(danielsDad) ∧ Practicing(danielsDad, internalMedicine) ∧ PracticingAt(danielsDad, veteransHospital) ∧ In(veteransHospital, minneapolis)","output":"Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis."}
{"input":"∀x (WorldMajorLargePassengerAircraftManufacturer(x) → x=boeing ⊕ x=airbus)","output":"The world's only major large passenger aircraft manufacturers are Boeing and Airbus."}
{"input":"∀x (AmericanAirlinesAircraft(x) → WorldMajorLargePassengerAircraftManufacturer(x))","output":"All American Airlines planes are from the world's major large passenger aircraft manufacturers. "}
{"input":"MoreInRevenue(airbus, boeing)","output":"Airbus made more revenue than Boeing last year."}
{"input":"Island(luzon) ∧ In(luzon, philippines)","output":"Luzon is an island in the Philippines."}
{"input":"∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon))","output":"In December 1999, an earthquake struck Luzon."}
{"input":"∃x (Earthquake(x) ∧ StrikeInYr(x, year1999) ∧ StrikeInMo(x, december) ∧ StrikeInCity(x, luzon) ∧ Deadly(x))","output":"People died in the December 1999 earthquake in Luzon."}
{"input":"∀x (Like(x, financialRisk) → InvestInRegularly(x, publicStockMarket) ∨ EnjoyRegularly(x, gambling))","output":"People who like financial risks invest in the public stock market regularly or enjoy gambling regularly."}
{"input":"∀x (InvestInRegularly(x, publicStockMarket) → ReadToKeepUpdatedOn(x, theWallStreetJournal, financialMetric) ∨ (∃y (¬(y=theWallStreetJournal) ∧ NewsPaper(y) ∧ ReadToKeepUpdatedOn(x, y, financialMetric))))","output":"If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics."}
{"input":"∀x (EnjoyRegularly(x, gambling) → SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)))","output":"All people who enjoy enjoy gambling regularly spend a lot of money at casinos or other betting games."}
{"input":"∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y))) → EnjoyVisiting(x, theLasVegasStrip))","output":"People who spend a lot of money at casinos and other betting games would enjoy visiting the Las Vegas Strip."}
{"input":"∀x (SpendAt(x, alotOfMoney, casino) ∨ (∃y (¬(y=casino) ∧ BettingGame(y) ∧ SpendAt(x, aLotOfMoney, y)) → AtRiskOf(x, gamblingAddiction))","output":"People who spend a lot of money at casinos and other betting games are at risk of gambling addiction."}
{"input":"InvestInRegularly(matt, publicStockMarket)","output":"Matt does not invest in the public stock market regularly. "}
{"input":"Like(matt, financialRisk)","output":"Matt likes financial risks."}
{"input":"∀x (Student(x) ∧ LearningPiano(x) → Can(x, strike, rightNote))","output":"All students learning piano can strike the right notes. "}
{"input":"∀x (Student(x) ∧  Can(x, strike, rightNote) → Can(x, getTheRhythmRight))","output":"All students who can strike the right note can get the rhythms right. "}
{"input":"∀x (Student(x) ∧ Can(x, getTheRhythmRight) → Start(x, workingOnCoordinationBetweenTheLeftAndRightHands))","output":"If a student can get the rhythms right, he will start working on coordination between the left and the right hands. "}
{"input":"∀x (Student(x) ∧ Start(x, workingOnCoordinationBetweenTheLeftAndRightHands) → Become(x, goodAtCoordination) ⊕ Find(x, coordinationChallenging))","output":"Some students who start working on coordination between the left and the right hands become good at it, while other students find it challenging. "}
{"input":"(Can(john, getTheRhythmRight) ∧ Can(john, getTheRhythmRight)) ∧  Become(john, goodAtCoordination)  → PutEmotionInto(john, hisPlaying)","output":"If John can strike the right notes, get the rhythms right, and is good at coordination between right and left hands, then he puts emotions into his playing. "}
{"input":"Student(john) ∧ LearningPiano(john)","output":"John is a student learning piano. "}
{"input":"¬Find(john, coordinationChallenging)","output":"John does not find coordination between the left and the right hands challenging. "}
{"input":"FormerSwimmer(barbaraAnnMarshall) ∧ FormerWorldRecordHolder(barbaraAnnMarshall)","output":"Barbara Ann Marshall is a former swimmer and former world record-holder."}
{"input":"ParticipatedIn(barbaraAnnMarshall, 1972SummerOlympics)","output":"Barbara Ann Marshall participated in the 1972 Summer Olympics."}
{"input":"HomeCountry(barbaraAnnMarshall, unitedStates)","output":"Barbara Ann Marshall's home country is the United States."}
{"input":"∀x ∃y (ParticipatedIn(x, 1972SummerOlympics) ∧ HomeCountry(x, y) → Represented(x, y))","output":"All people who competed in the 1972 Summer Olympics represented their home country."}
{"input":"ParticipatedIn(barbaraAnnMarshall, preliminaryHeatFreestyleRelay)","output":"Barbara Ann Marshall participated in the preliminary heat in the freestyle relay."}
{"input":"¬ParticipatedIn(barbaraAnnMarshall, finalHeatFreestyleRelay)","output":"Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay."}
{"input":"∀x ((ParticipatedIn(x, 1972SummerOlympics) ∧ RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalHeatFreestyleRelay)) ↔ ¬Recieved(x, medal)))","output":"Only relay swimmers who participated in the final event at the 1972 Summer Olympics received medals."}
{"input":"∃x ∃y ∃y ∃w (Game(x) ∧ StageNumber(x,3) ∧ Stage(y) ∧ Stage(z) ∧ Stage(w) ∧ ¬(y=z) ∧ ¬(z=w) ∧ ¬(y=w) ∧ Red(y) ∧ Yellow(z) ∧ Green(w))","output":"A game is played with three stages: red stage, yellow stage, and green stage."}
{"input":"∀x (Player(x) → StartRed(x))","output":"Each player begins at the red stage."}
{"input":"∀x (Player(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))","output":"All players must reach the yellow stage before they can reach the green stage."}
{"input":"∀x (Player(x) ∧ StartRed(x) → ReachYellow(x))","output":"The yellow stage comes after the red stage."}
{"input":"∀x (Player(x) ∧ StartRed(x) ∧ ¬ReachYellow(x) → ¬ReachGreen(x))","output":"All players must proceed one stage at a time."}
{"input":"∀x (In(x, loveCity) → (ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∨ ConsidersMostImportantLoveLanguage(x, wordOfAffirmation))","output":"In Love City, everyone considers physical touch or words of affirmation to be their most important love language."}
{"input":"∀x ((ConsidersMostImportantLoveLanguage(x, physicalTouch)  ∧ In(x, loveCity) → GoodWith(x, pet))","output":"If someone in Love City considers physical touch as their most important love language, then they are good with pets."}
{"input":"∀x ((GoodWith(x, pet) ∧ In(x, loveCity)) → ¬ScaredOf(x, animal))","output":"If someone in Love City is good with pets, then they are not scared of animals."}
{"input":"∀x (In(x, loveCity) → (ScaredOf(x, animal) ∨ Loves(x, animal)))","output":"In Love City, everyone is scared of animals, or loves animals, or both."}
{"input":"(ConsidersMostImportantLoveLanguage(adam, physicalTouch) ⊕ Loves(adam, animal)) ∧ In(adam, loveCity)","output":"Adam, who is in Love City, either values physical touch as his most important love language or loves animals."}
{"input":"∀x (Bird(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))","output":"All birds have wings."}
{"input":"∀x (Animal(x) ∧ (∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z))) → ¬Reptile(x))","output":"Animals with wings aren't reptiles."}
{"input":"∃x (Animal(x) ∧ Fly(x) ∧ Bird(x))","output":"Some animals that fly are birds."}
{"input":"∀x (Iguana(x) → Reptile(x))","output":"If something is an iguana, then it is a reptile. Simeng: All iguanas are reptiles. "}
{"input":"¬(Iguana(john) ⊕ Bird(john))","output":"John is either both an iguana and a bird, or he is neither. "}
{"input":"Animal(john)","output":"John is an animal. "}
{"input":"Movie(endGame) ∧ Released(endGame, yr2006)","output":"EndGame is a movie released in 2006."}
{"input":"SetIn(endGame, washington)","output":"EndGame was set in Washington."}
{"input":"¬(FilmedIn(endGame, washington))","output":"EndGame was filmed outside of Washington."}
{"input":"∃x∃y(FilmedIn(x, newYork) ∧ (¬(x=y)) ∧ FilmedIn(y, newYork))","output":"Some movies are filmed in New York."}
{"input":"Directed(andyChang, endGame)","output":"Andy Chang directed EndGame."}
{"input":"From(andyChang, hongKong)","output":"Andy Chang is from Hong Kong."}
{"input":"RealNum(num6) ∧ RealNum(num7) ∧ RealNum(num8)","output":"Six, seven and eight are real numbers."}
{"input":"∀x ∀y ((RealNum(x) ∧ RealNum(y) ∧ IsSuccessorOf(x, y)) → Larger(x, y))","output":"If a real number equals another real number added by one, the first number is larger."}
{"input":"∀x ∀y (Larger(x, y) → ¬Larger(y, x))","output":"If the number x is larger than the number y, then y is not larger than x."}
{"input":"∃y(IsSuccessorOf(y, num6) ∧ Equals(num7, y))","output":"Seven equals six plus one."}
{"input":"∃y(IsSuccessorOf(y, num7) ∧ Equals(num8, y))","output":"Eight equals seven plus one."}
{"input":"Positive(num2)","output":"Two is positive."}
{"input":"∀x ∀y ((Positive(x) ∧ IsDouble(y, x)) → Positive(y))","output":"If a number is positive, then the double of it is also positive."}
{"input":"IsDouble(num8, num4)","output":"Eight is the double of four."}
{"input":"IsDouble(num4, num2)","output":"Four is the double of two."}
{"input":"∀x (Dog(x) → Sleep(x))","output":"All dogs sleep."}
{"input":"∃x ∃y (FourLegged(x) ∧ Animal(x) ∧ Dog(x) ∧ FourLegged(y) ∧ Animal(y) ∧ Dog(y) ∧ ¬(x=y))","output":"Some four-legged animals are dogs."}
{"input":"∀x (EntitledTo(x, nationalSocialInsuranceCoverage) → CanHavePartiallyCovered(x, medicalBills))","output":"Everyone who is entitled to national social insurance coverage can have their medical bills partially covered. "}
{"input":"∀x (PRCNational(x) → EntitledTo(x, nationalSocialInsuranceCoverage))","output":"All PRC nationals are entitled to national social insurance coverage."}
{"input":"∀x (In(x, franco-ChinaDiplomaticConference) → PRCNational(x) ⊕ FrenchNational(x))","output":"Everyone in the Franco-China diplomatic conference is either a PRC national or a French national, but not both. "}
{"input":"∀x (FrenchNational(x) → CitizenOf(x, europeanUnion))","output":"All French nationals are citizens of the European Union. "}
{"input":"∀x (SpanishNational(x) → CitizenOf(x, europeanUnion))","output":"All Spanish nationals are citizens of the European Union. "}
{"input":"∀x (NorthKoreanNational(x) → ¬CitizenOf(x, europeanUnion))","output":"No North Korean nationals are citizens of the European Union. "}
{"input":"In(mei, franco-ChinaDiplomaticConference)","output":"Mei is at the Franco-China diplomatic conference. "}
{"input":"¬(NorthKoreanNational(mei) ⊕ CanHavePartiallyCovered(mei, medicalBills))","output":"Either Mei is a North Korean and can have medical bills partially covered, or neither is true."}
{"input":"∀x (¬Admit(x, mistake) → ¬GoodTeacher(x))","output":"No people who do not admit a mistake are good teachers."}
{"input":"∃x ∃y (WellInformed(x) ∧ WellInformed(y) ∧ ¬Admit(x, mistake) ∧ ¬Admit(y, mistake) ∧ ¬(x=y))","output":"Some well-informed people are people who do not admit a mistake."}
{"input":"∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))","output":"Philatelic literature is divided into the following categories: Stamp catalogs, Periodicals, Auction catalogs, Books, Bibliographies, and Background Material."}
{"input":"¬Stamp(mort)","output":"Mort is not a Stamp catalog."}
{"input":"¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))","output":"Mort is not a periodical, auction catalog, bibliography, or background material."}
{"input":"PhilatelicLit(mort)","output":"Mort is a piece of Philatelic literature."}
{"input":"DramaFilm(adventuresOfRusty) ∧ ChildrensFilm(adventuresOfRusty)","output":"Adventures of Rusty is a drama film and children's film."}
{"input":"Produces(columbiaPictures, adventuresOfRusty)","output":"Columbia Pictures produced Adventures of Rusty."}
{"input":"Produces(paramount, tintin)","output":"Tintin was produced by Paramount."}
{"input":"AdventureFilm(tintin)","output":"Tintin is an adventure film."}
{"input":"ParamountLeaderOf(dengXiaoping, peoplesRepublicOfChina)","output":"Deng Xiaoping served as the paramount leader of the People's Republic of China."}
{"input":"PraisedFor(dengXiaoping, reaffirmationOfReformProgram) ∧ PraisedFor(dengXiaoping, reversionOfHongKong) ∧ PraisedFor(dengXiaoping, returnOfMacau)","output":"Deng Xiaoping was praised for his reaffirmation of the reform program, as well as the reversion of Hong Kong to Chinese control and the return of Macau."}
{"input":"PartysSecretaryGeneral(dengXiaoping) ∧ Under(dengXiaoping, mao) ∧ VicePremierInThe1950s(dengXiaoping) ∧ PresidedOver(dengXiaoping, antiRightistCampaign) ∧ LaunchedBy(antiRightistCampaign, mao)","output":"As the party's Secretary-General under Mao and Vice Premier in the 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao."}
{"input":"InstrumentalIn(dengXiaoping, chinasEconomicReconstruction) ∧ Following(chinasEconomicReconstruction, greatLeapForward) ∧ Disastrous(greatLeapForward)","output":"Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward."}
{"input":"DiedIn(mao, year1976)","output":"Mao Zedong died in 1976."}
{"input":"GraduallyRoseTo(dengXiaoping, supremePower)","output":"After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."}
{"input":"∀x ((Knows(dan, x) ∧ ImaginativeProcess(x)) → ResultOf(x, creativeProcess))","output":"All imaginative processes that Dan knows are results of creative processes."}
{"input":"∀x ((Knows(dan, x) ∧ ScienceFiction(x)) → ImaginativeProcess(x)) ","output":"All science fiction that Dan knows comes from an imaginative process."}
{"input":"∀x (Knows(dan, x) → (ScienceFiction(x) ⊕ RealisticFiction(x)))","output":"Everthing that Dan knows comes from either science-fiction or realistic fiction."}
{"input":"∀x ((Knows(dan, x) ∧ Fact(x)) → ¬ProvedToBe(x, false)) ","output":"No facts that Dan knows have proven to be false."}
{"input":"(Knows(dan, dune) ∧ ScienceFiction(dune)) ∨ ProvedToBe(dune, false))","output":"Dan knows that Dune is science fiction or has proven to be false."}
{"input":"∀x (Superhero(x) ∧ American(x) → ComeFrom(x, dCUniverse) ⊕ ComeFrom(x, marvelUniverse)) ","output":"American superheroes come from either the DC Universe or Marvel Universe."}
{"input":"American(captainAmerica) ∧ TopTenFavorite(captainAmerica) ∧ Superhero(captainAmerica) ","output":"Captain America is one of America's top-ten favorite superheroes"}
{"input":"¬ComeFrom(captainAmerica, dCUniverse)","output":"Captain America does not come from the DC Universe."}
{"input":"∀x (American(x) ∧ TopTenFavorite(x) ∧ Superhero(x)  → Speak(x, english)) ","output":"America's top-ten favorite superheroes speak English."}
{"input":"∃x (Superhero(x) → (Speak(x, english) ∧ Speak(x, spanish)))","output":"Some superheroes speak both English and Spanish. "}
{"input":"BornIn(robertZimmer, germany) ∧ Philosopher(robertZimmer)","output":"Robert Zimmer was a philosopher born in Germany."}
{"input":"Essayist(robertZimmer)","output":"Robert Zimmer is an essayist."}
{"input":"BornIn(robertZimmer, yr1953)","output":"Robert Zimmer was born in 1953."}
{"input":"∀x (Essayist(x) → Writer(x))","output":"Every essayist is a writer."}
{"input":"∀x (RepayOnTime(x) → Has(x, highCreditScore))","output":"All people who repay their loans on time have a high credit score."}
{"input":"∃x ((Has(x, highCreditScore) ∧ Has(x, highSalary)) → ApprovedFor(x, mortgage))","output":"Some people with high credit scores and high salaries are approved for mortgages."}
{"input":"Has(john, highSalary)","output":"John has a high salary."}
{"input":"∀x (Student(x) → MemberOf(x, university))","output":"All students are members of the university."}
{"input":"∀x (GraduateStudent(x) → Student(x))","output":"All graduate students are students."}
{"input":"∀x (PhDStudent(x) → GraduateStudent(x))","output":"All PhD students are graduate students."}
{"input":"∃x (PhDStudent(x) ∧ TeachingFellow(x))","output":"Some PhD students are Teaching Fellows."}
{"input":"¬PhDStudent(john) → ¬MemberOf(john, university)","output":"If John is not a PhD student, then he is not a member of the university."}
{"input":"TeachingFellow(john) → PhDStudent(john) ⊕ GraduateStudent(john)","output":"If John is a Teaching Fellow, then he is a PhD student or a graduate student."}
{"input":"EuropeanCountry(belgium) ∧ EuropeanCountry(france) ∧ EuropeanCountry(germany)","output":"Belgium, France, and Germany are European countries."}
{"input":"CapitalOf(paris, france)","output":"Paris is the capital of France."}
{"input":"TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)","output":"The Eiffel Tower is one of the main tourist attractions located in Paris."}
{"input":"∃x (LiveIn(x, belgium) → Speak(x, french))","output":"Some people who live in Belgium speak French."}
{"input":"∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))","output":"If John goes to Europe, he will see some tourist attractions."}
{"input":"Speak(john, french)","output":"John speaks French."}
{"input":"∀x (SportsCar(x) → LoudCar(x))","output":"All sports cars are loud."}
{"input":"∀x (LoudCar(x) → ¬ElectricCar(x))","output":"No loud cars are electric."}
{"input":"∀x (Ferrari(x) → SportsCar(x))","output":"If a car is a Ferrari, then it is a sports car."}
{"input":"∀x ((Car(x) ∧ MadeIn(x, maranello)) → Ferrari(x))","output":"All cars made in Maranello are Ferraris."}
{"input":"(Car(toyotaPrius) ∧ MadeIn(toyotaPrius, maranello)) ∨ LoudCar(toyotaPrius)","output":"The Toyota Prius is made in Maranello or is a loud car, or both."}
{"input":"∀x (Plant(x) → ¬CuteAnimal(x))","output":"If something is a plant, then it is not a cute animal. Simeng: All plants are not cute animals. "}
{"input":"∀x (Flower(x) → Plant(x))","output":"All flowers are plants."}
{"input":"∀x (Kitten(x) → CuteAnimal(x))","output":"Every kitten is a cute animal."}
{"input":"∀x (GrownIn(x, garden) → Flower(x))","output":"If something is grown in a garden, then it is a flower."}
{"input":"Kitten(piper) ∨ CuteAnimal(piper)","output":"Piper is a kitten or a cute animal."}
{"input":"","output":""}
{"input":"∃x (Send(guam, athlete, calgaryWinterOlympics))","output":"Guam sent an athlete to the Calgary Winter Olympics."}
{"input":"∀x (Athlete(x) ∧ SendTo(guam, x, calgaryWinterOlympics) → ParticipatedIn(x, winterOlympics, year1988))","output":"If Guan sent an athlete to the Calgary Winter Olympics, then the athelete participated in the Olympics in 1988."}
{"input":"∀x ∀y (Athlete(x) ∧ From(x, guam) ∧ ParticipatedIn(x, winterOlympics, y) → x=juddBankert)","output":"Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics."}
{"input":"British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)","output":"Michael O'Donnell is a British physician, journalist, author, and broadcaster."}
{"input":"WordSetter(michael)","output":"One of the word-setters of My Word! was Michael O'Donnell."}
{"input":"Magazine(worldMedicine) ∧ EditedBy(worldMedicine, michael)","output":"The magazine World Medicine was edited by Michael O'Donnell."}
{"input":"BornIn(michael, yorkshire) ∧ ∃x(SonOf(michael, x) ∧ GeneralPractitioner(x))","output":"Michael O'Donnell was born in Yorkshire as the son of a general practitioner."}
{"input":"∀x (Homework(x) → ¬Fun(x))","output":"No homework is fun."}
{"input":"∃x (Reading(x) ∧ Homework(x))","output":"Some reading is homework."}
{"input":"∀x ∀y (HandbrakeOf(x, y) ∧ Car(y) → Up(x) ⊕ Down(x))","output":"The handbrake of a car is either up or down."}
{"input":"∀x ∀y (HandbrakeOf(x, y) ∧ Parked(y) ∧ Car(y) → Down(x))","output":"The handbrake is down when a car is parked."}
{"input":"∀x (InThisMidwestTown(x) ∧ Have(x, horseRanch) → RegularlyRideHorseForPleasure(x))","output":"All people in this midwest town who own horse ranches regularly ride horses for pleasure and sport."}
{"input":"∀x (InThisMidwestTown(x) ∧ Have(x, disposableIncome) → Have(x, horseRank))","output":"All people in this midwest town with a lot of disposable income have a horse ranch."}
{"input":"∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → Have(x, disposableIncome))","output":"If people in this midwest town compete in horse dressage shows, then they have a lot of disposable income."}
{"input":"∀x (InThisMidwestTown(x) ∧ CompeteIn(x, horseDressageShow) → InvestedIn(x, equestrianGearAndEquipment))","output":"If people in this midwest town compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment."}
{"input":"∀x (InThisMidwestTown(x) ∧ RegularlyRideHorseForPleasure(x) → ¬LiveIn(x, crampedBuilding))","output":"If people in this midwest town regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings."}
{"input":"InThisMidwestTown(manny) ∧ ¬(Have(manny, horseRanch) ⊕ LiveIn(manny, crampedBuilding))","output":"Manny is in this midwest town, and she either has a horse ranch and lives in a cramped residential building, or she does neither."}
{"input":"∀x (Roundel(x) → (Rounded(x) ∧ ArtilleryFortification(x)))","output":"A roundel is a rounded artillery fortification."}
{"input":"∀x ∀y ((Roundel(x) ∧ AdjacentWalls(x,y)) → ¬Higher(x, y))","output":"A roundel is not higher than adjacent walls. "}
{"input":"∀x (ArtilleryFortification(x) → DeployCannons(x))","output":"Cannons can be deployed on artillery fortifications. "}
{"input":"∀x ∀y ((Roundel(x) ∧ ArtilleryFortification(y)) → Older(x, y))","output":"Roundels are the oldest artillery fortifications."}
{"input":"∀x (BatteryTower(x) → ArtilleryFortification(x))","output":"Battery towers are artillery fortifications."}
{"input":"∀x (Tissue(x) → Soft(x))","output":"Tissues are soft."}
{"input":"∃x ∃y (Paper(x) ∧ Paper(x) ∧ Tissue(x) ∧ Tissue(y) ∧ ¬(x=y))","output":"Some papers are tissues."}
{"input":"∀x (Volunteer(x) → Receive(x, intangibleBenefit))","output":"All volunteers receive intangible benefits for their work."}
{"input":"∀x (Volunteer(x) → WorkRegularly(x) ⊕ WorkAsNeeded(x))","output":"Volunteers work regularly or on an as-needed basis."}
{"input":"∃x (Volunteer(x) → Trained(x))","output":"Some volunteers are trained."}
{"input":"∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))","output":"Volunteers work in groups or individually."}
{"input":"∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalManagement) ∨ ContributeTo(x, environmentalConservation)))","output":"Environmental volunteers contribute toward environmental management or conservation."}
{"input":"∃x (Volunteer(x) ∧ ContributeTo(x, naturalDisasterResponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))","output":"Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis."}
{"input":"∀x (InThisTechCompany(x) ∧ Consistent(x) ∧ StickTo(x, theirRegularRoutine) → ¬Like(x, surprise))","output":"All people in this tech company who are consistent and enjoy sticking to their regular routines do not like surprises."}
{"input":"∀x (InThisTechCompany(x) ∧ ∃y (flannelShirt(y) ∧ WearEveryday(x, y)) → Consistent(x) ∧ StickTo(x, theirRegularRoutine))","output":"People in this tech company who wear the same flannel shirts every day are consistent and enjoy sticking to their regular routines."}
{"input":"∀x (InThisTechCompany(x) ∧ ¬LikeShoppingFor(x, clothes) → ∃y (flannelShirt(y) ∧ WearEveryday(x, y)))","output":"People in this tech company who do not like shopping for clothes wear the same flannel shirts every day."}
{"input":"∀x (InThisTechCompany(x) ∧ Old(x) ∧ LiveIn(x, stableHome) → ¬Like(x, surprise))","output":"Old people living in stable homes do not like surprises."}
{"input":"∀x (InThisTechCompany(x) ∧ Have(x, highEnergy) ∧ Impulsive(x) → ¬Like(x, surprise))","output":"People in this tech company who have very high energy and are impulsive like surprises."}
{"input":"InThisTechCompany(mike)","output":"Mike works in this tech company."}
{"input":"¬(∃y (flannelShirt(y) ∧ WearEveryday(x, y)) ∧ Have(mike, highEnergy) ∧ Impulsive(mike)) → (Consistent(mike) ∧ StickTo(mike, theirRegularRoutine)) ⊕ ¬Like(mike, surprise)","output":"If Mike is not a person who wears the same flannel shirts every day, has very high energy, and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises."}
{"input":"∃x∃y (Car(x) ∧ Car(y) ∧ (x≠y) ∧ Owns(adam, x)) ","output":"Adam owns cars."}
{"input":"∃x (Car(x) ∧ Favorite(adam, x))","output":"Adam has a favorite car."}
{"input":"∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → European(x))","output":"Among the cars he owns, Adam's favorite car is European."}
{"input":"∀x ((Car(x) ∧ Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))","output":"Adam broke his favorite car."}
{"input":"∀x ((Buildings(x) ∧ In(x, newHaven)) → ¬HigherThan(x, num400))","output":"There are no buildings in New Haven higher than 400 meters. "}
{"input":"∀x ((Buildings(x) ∧ ManagedBy(x, yaleHousing)) → In(x, newHaven))","output":"All buildings managed by Yale Housing are in New Haven. "}
{"input":"∀x ((Buildings(x) ∧ Skyscraper(x) ∧ In(x, manhattan)) → HigherThan(x, num400))","output":"All Manhattan skyscrapers are higher than 400 meters. "}
{"input":"∀x ((Buildings(x) ∧ OwnedBy(x, bloomberg)) → Skyscraper(x) ∧ In(x, manhattan))","output":"All buildings owned by Bloomberg are in Manhattan. "}
{"input":"∀x ((Buildings(x) ∧ HasLogo(x, bloomberg)) → OwnedBy(x, bloomberg))","output":"All buildings with the Bloomberg logo are buildings owned by Bloomberg. "}
{"input":"Buildings(towerA) ∧ (¬InNewHaven(towerA)) ∧ (¬ManhattanSkyscraper(towerA))","output":"Tower A is neither a building in New Haven nor a skyscraper in Manhattan."}
{"input":"Buildings(towerB) ∧ HasLogo(towerB, bloomberg) ∧ Skyscraper(towerB) ∧ In(towerB, manhattan)","output":"Tower B is a skyscraper building in Manhattan with a Bloomberg logo. "}
{"input":"∀x (Fish(x) → ¬Bird(x))","output":"No fish are birds."}
{"input":"∀x (Osprey(x) → Bird(x))","output":"An osprey is a bird."}
{"input":"∀x (Carp(x) → Fish(x))","output":"A carp is a fish."}
{"input":"∀x (Goldfish(x) → Carp(x))","output":"All goldfish are carp."}
{"input":"Osprey(bubbles) ⊕ Goldfish(bubbles) → ¬Fish(bubbles)","output":"If Bubbles is either an osprey or a goldfish, then Bubbles is not also a fish."}
{"input":"∀x (WantToGoTo(mr.AndMrs.Smith, x) ∧ City(x) → (California(x) ∨ Florida(x)) ∧ NeverGo(x))","output":"Mr. and Mrs. Smith make a travel plan: they want to go to a city in California or Florida where neither of them has ever been."}
{"input":"City(sanFrancisco) ∧ California(sanFrancisco) ∧ WantToGoTo(mr.AndMrs.Smith, sanFrancisco) ∧ City(losAngeles) ∧ California(losAngeles) ∧ WantToGoTo(mr.AndMrs.Smith, losAngeles) ∧ City(sanDiego) ∧ California(sanDiego) ∧ WantToGoTo(mr.AndMrs.Smith, sanDiego)","output":"The cities in California that they are interested in are San Francisco, Los Angeles, and San Diego."}
{"input":"City(orlando) ∧ Florida(orlando) ∧ WantToGo(mr.AndMrs.Smith, orlando) ∧ City(miami) ∧ Florida(miami) ∧ WantToGo(mr.AndMrs.Smith, miami)","output":"Cities in Florida that they are interested in are Orlando and Miami."}
{"input":"∃x ∃y ∀z (¬(x=z) ∧ ¬(y=z) ∧ ¬(x=y) ∧ City(x) ∧ City(y) ∧ City(z) ∧ California(x) ∧ California(y) ∧ California(z) → Visit(mr.smith, x) ∧ Visit(mr.smith, y) ∧ ¬Visit(mr.smith, z))","output":"Mr. Smith has been to two cities in California."}
{"input":"∃x ∀y (¬(x=y) ∧ City(x) ∧ City(y) ∧ Florida(x) ∧ Florida(y) → Visit(mrs.smith, x) ∧ ¬Visit(mrs.smith, y))","output":"Mrs. Smith has been to one city in Florida."}
{"input":"∀x (In(x, sizeTown) → (Big(x) ∨ Small(x)))","output":"Everything in Size Town is big or small."}
{"input":"∀x (Big(x) ∧ In(x, sizeTown) → Heavy(x))","output":"All big things in Size Town are heavy."}
{"input":"∀x (Small(x) ∧ In(x, sizeTown) → Light(x))","output":"All small things in Size Town are light."}
{"input":"∀x (Heavy(x) ∧ In(x, sizeTown) → Still(x))","output":"All heavy things in Size Town are still."}
{"input":"∀x (Light(x) ∧ In(x, sizeTown) → Unstable(x))","output":"All light things in Size Town are unstable."}
{"input":"∀x (Unstable(x) ∧ In(x, sizeTown) → Changing(x))","output":"All unstable things in Size Town are changing."}
{"input":"∀x (Unstable(x) ∧ In(x, sizeTown) → Unpredictable(x))","output":"All unstable things in Size Town are unpredictable."}
{"input":"In(bird, sizeTown) ∧ ¬(Heavy(bird) ∧ Still(bird))","output":"The bird is in Size Town and it is not both heavy and still."}
{"input":"TelevisionSeries(dIRay) ∧ PoliceProcedural(dIRay)","output":"DI Ray is a police procedural television series."}
{"input":"Creates(maya, dIRay) ∧ Writes(maya, dIRay)","output":"DI Ray was created and written by Maya Sondhi."}
{"input":"Produces(jed, dIRay)","output":"DI Ray was produced by Jed Mercurio."}
{"input":"British(maya) ∧ British(jed) ","output":"Maya Sondhi and Jed Mercurio are both British."}
{"input":"∀x (Take(x, barExam) → CanRead(x))","output":"Everyone who took the bar exam can read. "}
{"input":"∀x (Lawyer(x) → Take(x, barExam))","output":"All lawyers took the bar exam. "}
{"input":"∀x (Take(x, barExam) → KnowledgeableAbout(x, criminalProceeder))","output":"Everyone who took the bar exam is knowledgeable about criminal procedures. "}
{"input":"∀x (GetOn(x, scoreOf180, lSAT) → CanRead(x))","output":"All people who got a score of 180 on the LSAT can read. "}
{"input":"∀x (Elephant(x) → ¬CanRead(x))","output":"No elephants can read. "}
{"input":"¬(CanRead(mike) ∧ Elephant(mike)) → Take(mike, barExam) ⊕ CanRead(mike)","output":"If Mike can not read or is not an elephant, then Mike either took the bar exam or can read. "}
{"input":"∃x (ProfessionalSoccerDefender(x) ∧ ProfessionalCenterback(x))","output":"Some soccer defenders are center-backs."}
{"input":"∀x (ProfessionalSoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x)))","output":"No soccer players are professional basketball players."}
{"input":"NBAPlayer(stephencurry)","output":"Stephen Curry is an NBA player."}
{"input":"∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))","output":"If a person doesn't have enough money to buy a product, then that person can't buy it."}
{"input":"∀x (Monitor(x) → Product(x))","output":"Monitors are products."}
{"input":"∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))","output":"4k monitors are more expensive than 1080 monitors and 2k monitors."}
{"input":"Person(john)","output":"John is a person."}
{"input":"∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))","output":"John doesn't have enough money to buy a 2k monitor."}
{"input":"∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))","output":"All artificial satellites are important scientific achievements."}
{"input":"∃x (ArtificialSatellite(x) ∧ ¬USInvention(x))","output":"Some artificial satellites are not U.S. inventions."}
{"input":"∃x (Cat(x) ∧ ¬Pet(x))","output":"Some cats are not pets."}
{"input":"∀x (Cat(x) → Mammal(x))","output":"All cats are mammals."}
{"input":"∀x (In(x, thisNeighborhood) ∧ VisitRegularly(x, coffeeShop) → AddictedTo(x, coffee))","output":"If people in this neighborhood visit a coffee shop regularly, then they are addicted to coffee. "}
{"input":"∀x (In(x, thisNeighborhood) → (VisitRegularly(x, coffeeShop) ∨ (∃y (TakeOut(y) ∧ Order(x, y, aDay))))","output":"People in this neighborhood visit a coffee shop regularly or order takeout at least once a day."}
{"input":"∀x (In(x, thisNeighborhood) ∧ MakeAtUsing(x, home, ownFood, recipe) → ∃y (TakeOut(y) ∧ Order(x, y)))","output":"If people in this neighborhood make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day."}
{"input":"∀x (In(x, thisNeighborhood) ∧ ∃y (CoffeemakerAndBlender(y) ∧ Own(x, y)) → ¬OrderAtLeastOnceADay(x, takeout))","output":"If people in this neighborhood own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day."}
{"input":"∀x (In(x, thisNeighborhood) ∧ BusyWith(x, 12HourWorkHour) → MakeAtUsing(x, home, ownFood, recipe))","output":"All people in this neighborhood who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides."}
{"input":"In(sam, thisNeighborhood) ∧ ¬(AddictedTo(sam, coffee) ⊕ BusyWith(sam, 12HourWorkHour))","output":"Sam is living in this neighborhood, and he is either addicted to coffee or other caffeinated drinks and leads a very busy life that include 12-hour work hours, or is not addicted to coffee and does not lead a very busy life that include 12-hour work hours"}
{"input":"∀x (ProfessionalBasketballPlayer(x) → ¬ProfessionalSoccerPlayer(x))","output":"No professional basketball players are soccer players."}
{"input":"∀x (ProfessionalCenterback(x) → ProfessionalSoccerDefender(x))","output":"All centerbacks are soccer defenders."}
{"input":"¬(NBAPlayer(rogerfederer) ⊕ ProfessionalSoccerDefender(rogerfederer))","output":"Roger Federer is either both an NBA player and a soccer defender, or neither."}
{"input":"∃x (Teacher(x) ∧ WorkAt(x, pool) ∧ ¬Nice(x))","output":"Some teachers who work at pools are not nice."}
{"input":"∀x (Teacher(x) ∧ WorkAt(x, pool) → PoolManager(x))","output":"All teachers working at pools are pool managers."}
{"input":"∀x (PoolManager(x) → Lifeguard(x))","output":"All pool managers are lifeguards."}
{"input":"∀x (Lifeguard(x) → WorkAt(x, pool))","output":"If someone is a lifeguard, then they work at a pool."}
{"input":"¬WorkAt(mary, pool)","output":"Mary does not work at a pool."}
{"input":"∃x (ArtPiece(x) ∧ ¬Require(x, talent))","output":"Not all art pieces require talent."}
{"input":"∀x (Require(x, talent) → Require(x, practice))","output":"Everything that requires talent requires practice."}
{"input":"Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ","output":"Bernarda Bryson Shahn was a painter and lithographer."}
{"input":"BornIn(bernardaBrysonShahn, athensOhio)","output":"Bernarda Bryson Shahn was born in Athens, Ohio. "}
{"input":"MarriedTo(bernardaBrysonShahn, benShahn)","output":"Bernarda Bryson Shahn was married to Ben Shahn."}
{"input":"∀x (BornIn(x, athensOhio) → American(x))","output":"People born in Athens, Ohio, are Americans."}
{"input":"∀x (InEmmasFamily(x) ∧ UpgradeToEveryYear(x, newestIphoneModel) → ¬SavingMoneyForOn(x, downPayment, newHouse))","output":"Everybody in Emma's family who upgrade to the newest iPhone model every year, are not saving money for a down payment on a new house."}
{"input":"∀x (InEmmasFamily(x) ∧ EnjoyReading(x, techSpec) ∧ KeepUpdatedOn(x, latestTechnology) → UpgradeToEveryYear(x, newestIphoneModel))","output":"Everybody in Emma's family who enjoy reading about tech specs and keeping up to date on the latest technology upgrade to the newest iPhone model every year."}
{"input":"∀x (InEmmasFamily(x) ∧ (SavingMoneyForOn(x, downPayment, newHouse) ∨ LiveIn(x, apartment, bigMetropolitanCity)))","output":"Everybody in Emma's family is saving money for a down payment on a new house, or lives in an apartment in a big metropolitan cities."}
{"input":"∀x (InEmmasFamily(x) ∧ (∃y (LiveWith(x, y) ∧ Roommate(y))) → ¬(∃y (Own(x, y) ∧ Pet(y))))","output":"Everybody in Emma's family live with at least one roommate, does not own any pets."}
{"input":"∀x (InEmmasFamily(x) ∧ (∃y (Own(x, y) ∧ Pet(y))) → (∃y (LiveWith(x, y) ∧ Roommate(y))))","output":"Everybody in Emma's family who owns at least one pet lives with at least one roommate."}
{"input":"InEmmasFamily(emily)","output":"Emily is in Emma's family."}
{"input":"((∃y (Own(emily, y) ∧ Roommate(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) → ((∃y (Own(emily, y) ∧ Pet(y))) ∧ LiveIn(emily, apartment, bigMetropolitanCity)) ⊕ ¬((∃y (Own(emily, y) ∧ Roommate(y))) ∨ LiveIn(emily, apartment, bigMetropolitanCity))","output":"If Emily does not both own at least one pet and lives in apartments in big metropolitan cities, then Emily either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. "}
{"input":"∀x (OnPayroll(x) → PaidBy(x, school))","output":"People on the payroll are being paid by the school."}
{"input":"∀x (HaveJobAt(x, school) → OnPayroll(x))","output":"If someone has a job at a school, then they are on the payroll."}
{"input":"∀x (FacultyMember(x) → HaveJobAt(x, school))","output":"All faculty members have a job at a school."}
{"input":"∀x (Teach(x, student) → FacultyMember(x) ∨ Teacher(x))","output":"If someone teaches students, they are a faculty member or a teacher."}
{"input":"∀x (Teacher(x) → Have(x, student))","output":"Every teacher has students."}
{"input":"Teacher(nancy) → OnPayroll(nancy)","output":"If Nancy is a teacher, then they are on the payroll."}
{"input":"¬Teacher(nancy) → ¬OnPayroll(nancy)","output":"If Nancy is not a teacher, then they are not paid by the school."}
{"input":"Teach(nancy, student)","output":"Nancy teaches students."}
{"input":"∀x (Kangaroo(x) → Animal(x))","output":"Kangaroos are an animal."}
{"input":"∀x (Kangaroo(x) → ¬LiveIn(x, germany))","output":"No Kangaroos live in Germany."}
{"input":"SavesFor(jane, enoughMoney, theSummer) → FlyTo(jane, germany)","output":"Jane will fly to Germany if she saves enough money for the summer."}
{"input":"FlyTo(jane, germany) → GoTo(jane, berlinzoo) ","output":"If Jane flies to Germany, she will go to the Berlin Zoo."}
{"input":"∀x ∃y (GoTo(x, berlinzoo) ∧ LiveIn(x, germany) ∧ Animal(y) → WillSee(y, x, berlinzoo))","output":"If someone goes to the Berlin Zoo, they will see some of the animals in Germany."}
{"input":"∀x ∀y ∀z (Class(x) ∧ Student(y) ∧ Prereq(z,x) ∧ ¬Take(y, z) → ¬CanTake(y, x))","output":"If a class has prerequisites, the student must take the prerequisites to take the class."}
{"input":"∀x ∀y ((Class(x) ∧ Student(y) ∧ ¬∃z Prereq(z,x)) → CanTake(y, x))","output":"If a class has no prerequisites, then the student can take the class"}
{"input":"Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)","output":"CPSC 201 and CPSC 223 are prerequisites for CPSC 323."}
{"input":"∀x (Prereq(x,intermediateMicro) → x=introMicroeconomics)","output":"Intro Microeconomics is the only prerequisite for Intermediate Microeconomics."}
{"input":"¬(∃x (Prereq(x, introGeology)))","output":"Intro Geology has no prerequisites."}
{"input":"∀x (SevenDistinctWorks(x) → Heptalogy(x))","output":"Heptalogyy is a compound literary or narrative work that is made up of seven distinct works."}
{"input":"SevenDistinctWorks(harryPotter)","output":"The Harry Potter series consists of 7 distinct works."}
{"input":"SevenDistinctWorks(chroniclesOfNarnia)","output":"The Chronicles of Narnia consists of 7 distinct works."}
{"input":"∀x (AttendRegularly(x, renaissanceFair) → Enjoy(x, dressingUp, oldFashionedClothing) ∧ Enjoy(x, dressingUp, historicalPeriodClothing))","output":"All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing."}
{"input":"∀x (FascinatedBy(x, historyOfRenaissance) → AttendRegularly(x, renaissanceFair))","output":"If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly."}
{"input":"∀x (FascinatedBy(x, historyOfRenaissance) ⊕ (ContemporaryAcademic(x) ∧ Enjoy(x, learning)))","output":"People are fascinated by the history of the Renaissance and other past eras, or they are contemporary academics who enjoy learning."}
{"input":"∀x (FocusedOn(x, futuristicSubject) ∧ FocusedOn(x, vocationalSubject) → ContemporaryAcademic(x) ∧ Enjoy(x, learning))","output":"People who are focused on futuristic and vocational subjects are contemporary academics who enjoy learning."}
{"input":"∀x (Professor(x) ∧ Take(x, historicalApproach) → ¬(ContemporaryAcademic(x) ∧ Enjoy(x, learning)))","output":"If people are professors who take a historical approach, then they are not contemporary academics who enjoy learning."}
{"input":"¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject))→ ¬(FocusedOn(clyde, futuristicSubject) ∧ FocusedOn(clyde, vocationalSubject) ∨ (Enjoy(clyde, dressingUp, oldFashionedClothing) ∧ Enjoy(clyde, dressingUp, historicalPeriodClothing)))","output":"If Clyde is not focused on futuristic and voctional subjects, then he is neither focused on futuristic and vocational subjects nor enjoys dressing up in old-fashioned and historical period clothing."}
{"input":"∀x (SportsCar(x) → ¬IntendedToBeDrivenAt(x, moderateSpeed))","output":"No sports cars are vehicles intended to be driven at moderate speeds."}
{"input":"∀x (DesignedFor(x, familyUse) → IntendedToBeDrivenAt(x, moderateSpeed))","output":"All automobiles designed for family use are vehicles intended to be driven at moderate speeds."}
{"input":"∀x (WorkWellInTeamsIn(x, workPlace) → ∀y (Colleague(y) ∧ GetAlongWithAtWork(x, y)))","output":"If people work well in teams in the workplace, then they get along with all their colleagues at their work."}
{"input":"∀x (ComeToWorkWithEveryDay(x, positiveAttitude) → WorkWellInTeamsIn(x, workPlace))","output":"If people come to work every day with a positive attitude, then they work well in teams in the workplace."}
{"input":"∀x (ComeToWorkWithEveryDay(x, positiveAttitude) ⊕ AlwaysTiredInMorning(x))","output":"People either come to work every day with a positive attitude or are always tired every morning."}
{"input":"∀x (AlwaysTiredInMorning(x) → CriticizedBy(x, boss))","output":"If people are always tired in the morning, then they are criticized by their boss."}
{"input":"∀x (CriticizedBy(x, boss) → ¬ReceiveFromAtWork(x, positiveFeedback, team))","output":"If people are criticized by their boss, then they do not receive positive feedback from teams at work."}
{"input":"¬(WorkWellInTeamsIn(kat, workPlace) ⊕ Tired(kat))","output":"Kat either is a person who works well in teams in the workplac and is always tired every morning, or she is neither."}
{"input":"OpenSourceSoftware(drishti)","output":"Drishti is an open-source software."}
{"input":"∀x (OpenSourceSoftware(x) → FreeToModify(x))","output":"Open-source software is free to modify."}
{"input":"GradeIn(aPlus, englishClass) ∨ GradeIn(a, englishClass) ∨ GradeIn(bPlus, englishClass) ∨ GradeIn(b, englishClass) ∨ GradeIn(c, englishClass) ∧ (GradeIn(aPlus, englishClass) → ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(a, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(bPlus, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(b, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(b, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(c, englishClass)) ∧ (GradeIn(c, englishClass) → ¬GradeIn(aPlus, englishClass) ∧ ¬GradeIn(a, englishClass) ∧ ¬GradeIn(bPlus, englishClass) ∧ ¬GradeIn(b, englishClass)) ","output":"There are five grades in English class: A+, A, B+, B, and C. "}
{"input":"∀x ∀y (Student(x) ∧ GetGradeIn(x, aPlus, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan95(y))","output":"If a student gets an A+ in English class, then his score is greater than 95."}
{"input":"∀x ∀y (Student(x) ∧ GetGradeIn(x, a, englishClass) → EnglishClassScore(x, y) ∧ GreaterThan90(y) ∧ LowerThan95(y)) ","output":"If a student gets an A in English class, then his score is greater than 90 but lower than 95."}
{"input":"Student(zhang) ∧ GetGradeIn(zhang, a, englishClass)","output":"Zhang got an A in English class."}
{"input":"∀x ∀y (Student(zhang) ∧ Student(wang) ∧ EnglishScore(zhang, x) ∧ EnglishScore(wang, y) ∧ Better(y, x))","output":"Wang's English class score is better than Zhang's."}
{"input":"∀x (Student(wu) ∧ EnglishScore(wu, x) ∧ LowerThan90(x))","output":"Wu's English class score is lower than 90."}
{"input":"∀x ∀y (Student(x) ∧ EnglishScore(x, y) ∧ LowerThan90(y) → ¬GreaterThan95(y) ∧ ¬GreaterThan90(y) ∧ LowerThan95(y))","output":"If a student's English class score is lower than 90, then it is not greater than 95 or 90, and lower than 95."}
{"input":"∀x (Day(x) → ¬Prefer(olivia, warmTemperature, x))","output":"Olivia doesn't prefer warm temperatures during the day."}
{"input":"∀x (Sleep(olivia, x) → Prefer(olivia, coolTemperature, x))","output":"When Olivia sleeps, she prefers a cool temperature."}
{"input":"∀x (Night(x) → Sleep(olivia, x))","output":"Olivia sleeps during the night."}
{"input":"∀x (Day(x) → Work(olivia, x))","output":"Olivia works during the day."}
{"input":"Work(olivia) ⊕ Sleep(olivia)","output":"Olivia either works or sleeps."}
{"input":"∀x (Day(x) ⊕ Night(x))","output":"It is either the day or the night."}
{"input":"∀x (Prefer(olivia, warmTemperature, x) ⊕ Prefer(olivia, coolTemperature, x))","output":"Olivia either prefers warm temperatures or prefers cool temperatures."}
{"input":"GUI(tora)","output":"TOra is a GUI."}
{"input":"∀x (GUI(x) → Software(x))","output":"GUIs are software."}
{"input":"∀x (Software(x) → Free(x) ⊕ Paid(x))","output":"Software can be free or paid."}
{"input":"∀x (Paid(x) ∧ Software(x) → ¬UnderGNULicense(x))","output":"Paid Software is not under the GNU General Public License."}
{"input":"UnderGNULicense(tora)","output":"TOra is under the GNU General Public License."}
{"input":"∀x (Customer(x) → (Choose(x, primeVideoPlan) ∨ Choose(x, hBOMaxPlan)))","output":"Customers choose a Prime Video plan or an HBO Max Plan, or both. "}
{"input":"∀x ((Customer(x) ∧ Choose(x, hBOMaxPlan)) → RewardWith(x, giftCard))","output":"All customers who choose a Prime Video Plan are rewarded with a $30 gift card. "}
{"input":"∀x (Customer(x) → (∃y(Plan(y) ∧ Choose(x, y))))","output":"There are no customers who do not choose any plan. "}
{"input":"∀x ((Customer(x) ∧ RewardWith(x, giftCard)) → (¬OlderThan(x, num80)))","output":"None of the customers who are rewarded with a $30 gift card are older than 80."}
{"input":"∀x (Customer(x) → (∃y(GreaterThan(y, num80) ∧ Age(james,y)) ⊕ (∃y(Between(y, num60, num80) ∧ Age(james, y)))))","output":"All the customers are either older than 80 or between the ages of 60 and 80."}
{"input":"Customer(james) ∧ (¬∃y(Between(y, num60, num80) ∧ Age(james, y)))","output":"James is a customer who is not between the ages of 60 and 80. "}
{"input":"Horse(detroitcity)","output":"Detroit City is a horse."}
{"input":"∃x (Horse(x) ∧ Racehorse(x))","output":"Some horses are racehorses."}
{"input":"∀x (Horse(x) ∧ InRace(x) ∧ Falls(x) → PoseRiskTo(x, rider))","output":"If a horse falls in a race, it poses risks to its rider."}
{"input":"InRace(detroitcity) ∧ Fall(detroitcity)","output":"Detroit City fell in a race."}
{"input":"∀x (Horse(x) ∧ InRace(x) → Racehorse(x))","output":"A horse is a racehorse if it is in a race."}
{"input":"Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)","output":"Frederick Monhoff was an architect, artist, and illustrator."}
{"input":"American(monhoff)","output":"Frederick Monhoff was an American."}
{"input":"∀x (Artist(x) → GoodAt(x, physicalArt) ∨ GoodAt(x, conceptualArt))","output":"An artist is good at physical or conceptual art."}
{"input":"∀x (American(x) → AmericanCitizen(x))","output":"All Americans are American citizens."}
{"input":"Czech(miroslavFiedler) ∧ Mathematician(miroslavFiedler)","output":"Miroslav Fiedler was a Czech mathematician."}
{"input":"KnownFor(miroslavFiedler, contributionsToLinearAlgebraAndGraphTheory)","output":"Miroslav Fiedler is known for his contributions to linear algebra and graph theory."}
{"input":"HonoredBy(miroslavFiedler, fiedlerEigenvalue)","output":"Miroslav Fiedler is honored by the Fiedler eigenvalue."}
{"input":"TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)","output":"Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian."}
{"input":"∀x (Laptop(x) → Computer(x))","output":"A laptop is a computer."}
{"input":"∀x (Computer(x) → CanPlayGameOn(x))","output":"You can play games on a computer."}
{"input":"∀x (Phone(x) → ¬Computer(x))","output":"A phone is not a computer."}
{"input":"AmericanPolitician(walterBrown) ∧ Lawyer(walterBrown) ∧ ServedAs(walterBrown, postMasterGeneral)","output":"Walter Folger Brown was an American politician and lawyer who served as the postmaster general."}
{"input":"Graduated(walterBrown, harvard) ∧ GraduatedWith(walterBrown, bachelorsOfArt)","output":"Walter Folger Brown graduated from Harvard University with a Bachelor of Arts."}
{"input":"∃t(In(walterBrown, toledo, t) ∧ In(walterBrownFather, toledo, t) ∧ PracticedLawTogether(walterBrown, walterBrownFather, t))","output":"While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown."}
{"input":"Married(katherinHafer, walterBrown)","output":"Katherin Hafer married Walter Folger Brown."}
{"input":"∀x ((Product(x) ∧ DesignedBy(x, apple)) → SoldIn(x, appleStore))","output":"All products designed by Apple are sold at Apple Stores."}
{"input":"∀x ((Product(x) ∧ With(x, appleLogo)) → DesignedBy(x, apple))","output":"All products with Apple logos are designed by Apple."}
{"input":"∀x (Macbook(x) → With(x, appleLogo))","output":"All Macbooks have Apple logos."}
{"input":"∀x ((Product(x) ∧ With(x, appleM2Chip)) → Macbook(x))","output":"All products with Apple M2 chips are Mackbooks."}
{"input":"¬(SoldIn(thinkpadX1, appleStore) ∧ Macbook(thinkpadX1))","output":"A Thinkpad X1 is not both sold in Apple Stores and is a Macbook."}
{"input":"RoadJunction(oxfordCircus) ∧ Connect(oxfordCircus, oxfordSt, regentSt)","output":"Oxford Circus is a road junction connecting Oxford Street and Regent Street."}
{"input":"In(oxfordSt, london) ∧ In(regentSt, london)","output":"Oxford Street and Regent Street are in London."}
{"input":"Designed(nash, construction) ∧ On(construction, regentSt)","output":"John Nash designed a construction on Regent Street."}
{"input":"Designed(nash, oxfordCircus)","output":"John Nash designed Oxford Circus."}
{"input":"Architect(nash) ∧ British(nash)","output":"John Nash is a British architect."}
{"input":"EntraceTo(oxfordCircus, tubeStation) ∧ PartOf(tubeStation, centralline) ∧ In(tubeStation, 1900)","output":"Oxford Circus is the entrance to Oxford Circus tube station, a part of the Central line in 1900."}
{"input":"∀x (Pet(x) ∧ In(x, myHouse) → Cat(x) ⊕ Dog(x))","output":"All pets in my house are either cats or dogs."}
{"input":"∀x (Dog(x) ∧ In(x, myHouse) → Bark(x))","output":"All the dogs in my house bark."}
{"input":"∀x (¬Ghost(x))","output":"Ghosts do not exist."}
{"input":"∀x (Bark(x) ∧ Pet(x) ∧ In(x, myHouse) → ¬Dead(x))","output":"If some pet in my house barks, then it is not dead."}
{"input":"∀x (Pet(x) ∧ In(x, myHouse) → Dead(x) ⊕ Alive(x))","output":"All of the pets in my house are either dead or alive."}
{"input":"Pet(jojo) ∧ InMyHouse(jojo)∧ ¬Alive(jojo)","output":"Jojo is a pet in my house, and it is not alive."}
{"input":"∀x (Tiger(x) → Cat(x))","output":"All tigers are cats."}
{"input":"∀x (Cat(x) → ¬Dog(x))","output":"No cats are dogs."}
{"input":"∀x (BengalTiger(x) → Tiger(x))","output":"All Bengal tigers are tigers."}
{"input":"∀x (Husky(x) → Dog(x))","output":"All huskies are dogs."}
{"input":"BengalTiger(fido) ⊕ Cat(fido)","output":"Fido is either a Bengal tiger or a cat."}
{"input":"∀x ∀y ((SummerOlympicsIn(x,y) ∧ In(x, unitedStates)) → SummerOlympicsIn(x, unitedStates))","output":"If a city holds a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US."}
{"input":"∀x ∀y ((In(x, y) ∧ In(y, unitedStates)) → In(x, unitedStates))","output":"If a city is in a state in the US, the city is a US city."}
{"input":"∀x ∀y ∀z ((In(x, z) ∧ State(z) ∧ SummerOlympicsIn(x,y)) → SummerOlympicsIn(z, y))","output":"If a city is in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state."}
{"input":"SummerOlympicsIn(losAngeles, yr2028)","output":"The 2028 Summer Olympics is scheduled to take place in Los Angeles."}
{"input":"In(losAngeles, california)","output":"Los Angeles is a city in California."}
{"input":"In(atlanta, unitedStates)","output":"Atlanta is a US city."}
{"input":"In(california, unitedStates)","output":"Atlanta is in Georgia."}
{"input":"In(atlanta, georgia)","output":"California is a state in the United States."}
{"input":"¬InSummerOlympicsIn(boxing, yr2028) ∧ (¬InSummerOlympicsIn(modern_pentathlon, yr2028)) ∧ (¬InSummerOlympicsIn(weightlifting, yr2028))","output":"Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics."}
{"input":"SummerOlympicsIn(atlanta, yr1996)","output":"Atlanta in the United States held the 1996 Summer Olympics."}
{"input":"Vole(taigaVole) ∧ LiveIn(taigaVole, northAmerica)","output":"The taiga vole is a large vole found in northwestern North America. "}
{"input":"LikePlayingWith(cat, taigaVole)","output":"Cats like playing with all voles."}
{"input":"LiveIn(taigaVole, borealTaigaZone)","output":"The taiga vole lives in the boreal taiga zone."}
{"input":"∀x ((LiveIn(x, northAmerica) ∧ LiveIn(x, borealTaigaZone)) → LiveIn(x, coldPlace))","output":"The boreal taiga zone in North America is a cold place to live in."}
{"input":"∀x (Disease(x) → (Affects(x, female) ∨ Affects(x, male)) )","output":"A diseases affect females or males."}
{"input":"∀x (Affect(x, female) → ¬ProstateCancer(x))","output":"No women have prostate cancer."}
{"input":"∀x (ProstateCancer(x) ∨ NonProstateCancer(x)) ","output":"A cancer is either prostate cancer or non-prostate cancer. "}
{"input":"∀x (Cancer(x) → ¬Without(x, mutation)) ","output":"No type of cancer is without mutations."}
{"input":"∀x (NonProstateCancer(x) → Cancer(x)) ","output":"All non-prostate cancers are a type of cancer."}
{"input":"(Cancer(adenocarcinoma) ∨ Without(adenocarcinoma, mutation)) → (Affect(adenocarcinoma, female) ∨ Without(adenocarcinoma, mutation))","output":"If adenocarcinoma is a type of cancer or without mutations or both, then adenocarcinoma is in women or without mutations or both."}
{"input":"∃x ∃y  (LabMonitor(x) ∧ AOC(x) ∧ (¬(x=y)) ∧ LabMonitor(y) ∧ AOC(y))","output":"Some monitors equipped in the lab are produced by the company named AOC. "}
{"input":"∀x (LabMonitor(x) → Discounted(x))","output":"All monitors equipped in the lab are cheaper than their original prices. "}
{"input":"∀x (Discounted(x) → A1080p(x))","output":"If a monitor is cheaper than its original price, then its resolution is 1080p. "}
{"input":"∀x (A1080p(x) → ¬TypeC(x))","output":"If a monitor has a resolution of 1080p, then it does not support the type-c port. "}
{"input":"LabMonitor(lg-34)","output":"LG34 is equipped in the lab.  "}
{"input":"∀x ((Fruit(x) ∧ SoldAt(x, nicasMarket)) → ShippedFrom(x, colombia))","output":"All fruits sold at Nica's market are shipped from Colombia. "}
{"input":"∃x ∃y (Fruit(x) ∧ SoldIn(x, newHaven) ∧ ShippedFrom(x, mexico) ∧ (¬(x=y)) ∧ Fruit(y) ∧ SoldIn(y, newHaven) ∧ ShippedFrom(y, mexico))","output":"Some fruits sold in New Haven are shipped from Mexico."}
{"input":"∀x ((Fruit(x) ∧ ShippedFrom(x, colombia)) → ¬(SoldAt(x, localFarmersMarket)))","output":"No fruits shipped from Colombia are sold at the local farmers market in New Haven. "}
{"input":"Fruit(avocado) ∧ (SoldAt(avocado, localFarmersMarket) ∨ SoldAt(avocado, nica'sMarket))","output":"Avocados are a kind of fruit sold at the local farmers market in New Haven or at Nica's market. "}
{"input":"¬(ShippedFrom(avocado, colombia) ⊕ SoldIn(avocado, newHaven))","output":"Avocados are either shipped from Colombia and sold in New Haven, or neither."}
{"input":"∃x ∃y(Monitor(x) ∧ ProducedBy(x, aOC) ∧ In(x, library) ∧ (¬(x=y)) ∧ Monitor(y) ∧ ProducedBy(y, aOC) ∧ In(y, library))","output":"Some monitors equipped in the library are produced by AOC. "}
{"input":"∀x ((Monitor(x) ∧ In(x, library)) → CheaperThan(x, dollars800))","output":"All monitors equipped in the library are cheaper than 800 dollars. "}
{"input":"∀x ((Monitor(x) ∧ CheaperThan(x, dollars800)) → ResolutionLessThan(x, p1080))","output":"All monitors cheaper than 800 dollars are with a resolution lower than 1080p. "}
{"input":"∀x ((Monitor(x) ∧ ResolutionLessThan(x, p1080)) → ¬Supports(x, type-CPort))","output":"If a monitor has a resolution lower than 1080p, then it does not support the type-c port. "}
{"input":"Supports(a-2017, type-CPort)","output":"A-2017 supports the type-c port. "}
{"input":"Holds(suduva, theLithuanianSuperCup)","output":"Sūduva Marijampolė holds the Lithuanian Super Cup."}
{"input":"SoccerTeam(suduva)","output":"Sūduva Marijampolė is a soccer team."}
{"input":"Village(ainderbyQuernhow) ∧ CivilParish(ainderbyQuernhow) ∧ In(ainderbyQuernhow, hambletonDistrict)","output":"Ainderby Quernhow is a village and civil parish in the Hambleton District."}
{"input":"In(hambletonDistrict, northYorkshire)","output":"Hambleton District is in North Yorkshire."}
{"input":"In(northYorkshire, england)","output":"North Yorkshire is in England."}
{"input":"∀x ∀y ∀z ((In(x, y) ∧ In(y, z)) → In(x, z))","output":"If place A is located in place B and place B is located in place C, then place A is located in place C."}
{"input":"Author(douglasAdams) ∧ Authored(douglasAdams, theSalmonOfDoubt) ∧ Book(theSalmonOfDoubt)","output":"Douglas Adams is an author who created the book collection called The Salmon of Doubt. "}
{"input":"About(theSalmonOfDoubt, lifeExperience) ∧ About(theSalmonOfDoubt, technology)","output":"The Salmon of Doubt is about life experiences and technology."}
{"input":"∀x (Author(x) → Writer(x))","output":"All authors are writers."}
{"input":"∀x (Writer(x) → Create(x, innovativeIdea))","output":"Writers create innovative ideas."}
{"input":"∃x ∃y (Contain(x, innovativeIdea) ∧ About(x, technology) ∧ (¬(x=y)) ∧ (Contain(y, innovativeIdea) ∧ About(y, technology)))","output":"Some books that contain innovative ideas are about technology."}
{"input":"∀x (Disposable(x) ∧ Product(x) → ¬HelpSlowDown(x, globalWarming))","output":"No disposable products can help slow down global warming. "}
{"input":"∀x (EcoFriendly(x) ∧ Brand(x) → Help(x, slowDownGlobalWarming))","output":"All eco-friendly brands can help slow down global warming. "}
{"input":"∀x (Sustainable(x) ∧ FashionBrand(x) → EcoFriendly(x) ∧ Brand(x))","output":"All sustainable fashion brands are eco-friendly brands."}
{"input":"∀x (FastFashion(x) ∧ Product(x) → Disposable(x) ∧ Product(x)) ","output":"All fast fashion products are disposable products."}
{"input":"¬HelpSlowDown(reformation, globalWarming) → (EcoFriendly(reformation) ∧ Brand(reformation)) ∨ (Sustainable(reformation) ∧ FashionBrand(reformation))","output":"If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand."}
{"input":"Cricketeer(royRichardson) ∧ PlaysFor(royRichardson, sintMaarten) ∧ ConstituentCountry(sintMaarten)","output":"Roy Richardson was a cricketer who played for Sint Maarten, a constituent country."}
{"input":"RightHanded(royRichardson) ∧ Batsman(royRichardson) ∧ MediumPaceBowler(royRichardson)","output":"Roy Richardson was a right-handed batsman and medium-pace bowler."}
{"input":"OldAtDebut(royRichardson)","output":"Roy Richardson was old when he debuted in cricket."}
{"input":"Dismisses(shervilleHuggins, royRichardson)","output":"Sherville Huggins dismissed Roy Richardson."}
{"input":"∀x (GetAJobAt(x, google) → Have(x, aLotOfWorkExperience) ∨ Have(x, goodEducation))","output":"To get a job at Google, you need to have a lot of work experience or a good education."}
{"input":"∀x (GetAJobAt(x, google) → Submitted(x, resume, google))","output":"One needs to submit their resume to Google to get a job there."}
{"input":"Have(john, aLotOfWorkExperience)","output":"John has a lot of work experience."}
{"input":"Submitted(john, resume, google) ∧ GetAJobAt(john, google)","output":"John submitted his resume to Google and got a job there."}
{"input":"∀x (IPhone(x) → ¬StandaloneDesktop(x))","output":"No iPhones are standalone desktops. "}
{"input":"∀x (AppleMade(x) ∧ Cellphone(x) → IPhone(x))","output":"All Apple-made cellphones are iPhones.  "}
{"input":"∀x (Phone(x) ∧ With(x, a15BionicChip) → AppleMade(x) ∧ Cellphone(x))","output":"All phones with A15 Bionic chips are Apple-made cell phones. "}
{"input":"∀x (Phone(x) ∧ EquippedWith(x, fourCoreGPU) ∧ MadeBy(x, apple) → Phone(x) ∧ With(x, a15BionicChip))","output":"All phones equipped with four core-GPU made by Apple are phones with A15 Bionic chips. "}
{"input":"(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip)) ⊕ (Phone(unannouncedHuaweiPhone) ∧ EquippedWith(unannouncedHuaweiPhone, fourCoreGPU) ∧ MadeBy(unannouncedHuaweiPhone, apple)) → ¬(Phone(unannouncedHuaweiPhone) ∧ With(unannouncedHuaweiPhone, a15BionicChip) ∧ StandaloneDesktop(unannouncedHuaweiPhone))","output":"If an unannounced Huawei phone is either a phone with A15 Bionic chips or equipped with four core-GPU made by Apple, then unannounced Huawei phone is neither a phone with A15 Bionic chips nor a standalone desktop."}
{"input":"WorldLeadingLightingDesigner(hughVanstone)","output":"Hugh Vanstone is one of the world's leading lighting designers. "}
{"input":"From(hughVanstone, unitedKingdom)","output":"Hugh Vanstone is from the UK."}
{"input":"∃x(GreaterThan(x, num160) ∧ LitProductions(hughVanstone,x))","output":"Hugh Vanstone has lit more than 160 productions."}
{"input":"∃x(Hometown(hughVanstone,x) ∧ AttendedSchoolIn(hughVanstone,x))","output":"Hugh Vanstone attended a school where he is from. "}
{"input":"∀x (Man(x) → ¬RunFasterThan(xm bolt))","output":"No man can run faster than Bolt. "}
{"input":"¬Man(superman)","output":"Superman is not a man."}
{"input":"American(donaldErvinKnuth) ∧ ComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorEmeritusAt(donaldErvinKnuth, stanford)","output":"Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University."}
{"input":"Called(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)","output":"Knuth has been called the \"father of the analysis of algorithms.\""}
{"input":"∀x (NeocrepidoderaCorpulenta(x) → (FleaBeetle(x) ∨ Moth(x)))","output":"Neocrepidodera Corpulentas are flea beetles or moths, or both."}
{"input":"∀x (NeocrepidoderaCorpulenta(x) → In(x, chrysomelidaeFamily))","output":"Neocrepidodera Corpulentas are in the Chrysomelidae family."}
{"input":"∀x (In(x, chrysomelidaeFamily) → ¬Moth(x))","output":"There are no moths within the Chrysomelidae family."}
{"input":"∃x (NeocrepidoderaCorpulenta(x))","output":"There is a Neocrepidodera Corpulenta. "}
{"input":"Milanese(carrozzeriaColli) ∧ CoachBuilder(carrozzeriaColli) ∧ Company(carrozzeriaColli) ∧ EstablishedBy(carrozzeriaColli, giuseppeColli) ∧ EstablishedIn(carrozzeriaColli, 1931)","output":"Carrozzeria Colli is a Milanese coachbuilder company established by Giuseppe Colli in 1931."}
{"input":"Company(carrozzeriaColli) ∧ SpecializesIn(carrozzeriaColli, usingAluminum)","output":"Carrozzeria Colli is a company that specializes in using aluminum."}
{"input":"∀x (BuiltBy(x, carrozzeriaColli) ∧ FirstAutomobile(x) → RacingCar(x))","output":"The first automobiles built by Carrozzeria Colli were racing cars."}
{"input":"∃x (BuiltBy(x, carrozzeriaColli) ∧ RacingCar(x) ∧ Used(x, fiat1100mechanicals) ∧ Used(x, chassis))","output":"Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chassis."}
{"input":"∃x (Airforce(x) ∧ WorkedFor(carrozzeriaColli, x))","output":"Carrozzeria Colli worked for airforces."}
{"input":"∃(CarBody(x) ∧ Made(x, carrozzeriaColli))","output":"Carrozzeria Colli made car bodies. "}
{"input":"(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ GoTo(jack, theCinema) ∧ GoTo(jack, today)","output":"John will go to the cinema if and only if Jack goes to the cinema today."}
{"input":"(GoTo(john, theCinema) ∧ GoTo(john, today)) ↔ (On(ironman) ∧ ¬Bad(weather, today))","output":"Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today."}
{"input":"∃x (Day(x) ∧ March(x) → ¬Bad(weather, x))","output":"Some days in March have bad weather."}
{"input":"On(ironman)","output":"Iron Man is on."}
{"input":"Day(presentMoment) ∧ March(presentMoment)","output":"It's March now."}
{"input":"∀x (Sells(quiksilver, x) → (Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x)))","output":"Quiksilver sells sportswear, clothing, footwear, and accessories."}
{"input":"Clothing(flannel)","output":"Flannels are a type of clothing."}
{"input":"∃x (Sells(quiksilver, x) ∧ Owns(joe, x))","output":"Joe owns an item from Quiksilver."}
{"input":"∀x (VideoGame(x) ∧ ReleasedBy(x, nintendo) → ¬Support(x, pS4))","output":"No video games released by Nintendo support the PS4 platform."}
{"input":"∀x (VideoGame(x) ∧ In(x, pokemonSeries) → ReleasedBy(x, nintendo))","output":"All video games in the Pokemon series are released by Nintendo. "}
{"input":"∀x (VideoGame(x) ∧ In(x, fIFASeries) → Support(x, pS4))","output":"All video games in the FIFA series support the PS4 platform. "}
{"input":"∀x (VideoGame(x) ∧ Simulate(x, onlineSoccer) ∧ Use(x, licensedPlayer) → In(x, fIFASeries))","output":"All video games that allow users to simulate playing online soccer using licensed players are in the FIFA series."}
{"input":"VideoGame(beLionel) ∧ In(beLionel, pokemonSeries) ∨ (Simulate(beLionel, onlineSoccer) ∧ Use(beLionel, licensedPlayer))","output":"The video game named “Be Lionel” is in the Pokemon series, or it allows users to simulate playing online soccer games using licensed players."}
{"input":"∀x ∀y (PaymentCard(x) ∧ RussianBank(y) ∧ IssuedBy(x, y) → ¬UsedWith(x, applePay))","output":"No payment cards issued by Russian banks can be used with ApplePay."}
{"input":"∀x ∀y (PaymentCard(x) ∧ MIR(x) → RussianBank(y) ∧ IssuedBy(x, y))","output":"All MIR payment cards are issued by Russian banks."}
{"input":"∃x (PaymentCard(x) ∧ International(x) → UsedWith(x, applePay))","output":"Some international payment cards can be used with ApplePay."}
{"input":"∀x ∀y (SocialPayment(x) ∧TransferredTo(x, y) → PaymentCard(y) ∧ MIR(y))","output":"Social payments in Russia can only be transferred to MIR payment cards."}
{"input":"PaymentCard(bankOfAmerica) ∧ UsedWith(bankOfAmerica, applePay)","output":"Bank of America payment cards can be used with ApplePay."}
{"input":"ProducedBy(luminaAPV, chevrolet)","output":"The Lumina APV is produced by Chevrolet. "}
{"input":"ProducedBy(astro, chevrolet) ∧ Van(astro)","output":"The Astro is a van produced by Chevrolet. "}
{"input":"∀x (Vehicle(x) ∧ ProducedBy(x, chevrolet) ∧ InThisBatch(x) → (Car(x) ⊕ Van(x)))","output":"Vehicles produced by Chevrolet in this batch are either cars or vans."}
{"input":"∀x (WorkIn(x, office) → Commuter(x))","output":"Everyone who works in the office is a commuter. "}
{"input":"∀x (WorkIn(x, office) ⊕ WorkFrom(x, home))","output":"People either work in the office or work from home."}
{"input":"∀x (WorkFrom(x, home) → Have(x, relaxedSchedule))","output":"Everyone who works from home has a relaxed schedule."}
{"input":"Commuter(george) ⊕ Have(george, homeOffice)","output":"George is either a commuter or has a home office setup. "}
{"input":"(WorkFrom(george, home) ⊕ Have(george, homeOffice)) → ¬WorkFrom(george, home) ∧ Commuter(george)","output":"If George is either a person who works from home or has a home office setup, then George is a commuter and is not a person who works from home."}
{"input":"MusicSupervisor(jasonKramer) ∧ American(jasonKramer)","output":"Jason Kramer is an American music supervisor."}
{"input":"∃x ∃y (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x) ∧ (¬(x=y)) ∧ American(y) ∧ MusicSupervisor(y) ∧ RadioPersonality(y))","output":"Some American radio personalities are also music supervisors. "}
{"input":"∀x ∀y((HostShowOn(x, y) ∧ PublicRadioStation(x)) → RadioPersonality(x))","output":"Anyone who hosts a show on a public radio station is a radio personality."}
{"input":"RadioPersonality(joeRogan)","output":"Joe Rogan is a radio personality."}
{"input":"∃x(HostShowOn(jasonKramer, x) ∧ PublicRadioStation(x))","output":"Jason Kramer hosted a show on a public radio station."}
{"input":"∀x ((Bag(x) ∧ Hermès(x)) → ¬MadeIn(x, italy))","output":"Hermès bags are not made in Italy."}
{"input":"∀x ((Bag(x) ∧ Birkin(x)) → Hermès(x))","output":"All Birkin bags are Hermès bags. "}
{"input":"∀x (Ferrari(x) → MadeIn(x, italy))","output":"All Ferraris are made in Italy. "}
{"input":"∀x ((Car(x) ∧ Carry(x, ferrariV12Engine)) → Ferrrari(x))","output":"All cars that carry a Ferrari V12 engine are Ferraris. "}
{"input":"∀x ((Car(x) ∧ MadeIn(x, maranello)) → Carry(x, ferrariV12Engine))","output":"All cars that are made in Maranello carry a Ferrari V12 engine."}
{"input":"¬(Ferrari(lamborghiniSUV) ∧ MadeIn(lamborghiniSUV, maranello))","output":"A Lamborghini SUV is not both a Ferrari and made in Maranello. "}
{"input":"(Bag(kelly) ∧ Hermès(kelly)) ∨ (Bag(kelly) ∧ Car(kelly) ∧ Carry(kelly, ferrariV12Engine))","output":"A Kelly bag is a Hermès bag, or it is a car that carries a Ferrari V12 engine. "}
{"input":"∀x (∃y (LiveIn(x, y) ∧ Place(y) ∧ Named(y, galicia)) → LiveIn(x, spain) ⊕ LiveIn(x, poland))","output":"If someone lives in a place named Galicia, then they live in either Spain or Poland."}
{"input":"∀x (LiveIn(x, spain) → LiveIn(x, europe))","output":"Spain is in Europe."}
{"input":"∀x (LiveIn(x, poland) → LiveIn(x, europe))","output":"Poland is in Europe."}
{"input":"LiveIn(rochelle, europe)","output":"Rochelle lives in Europe."}
{"input":"¬LiveIn(dominique, europe)","output":"Dominique does not live in Europe."}
{"input":"∃y (LiveIn(alfonso, y) ∧ Place(y) ∧ Named(y, galicia))","output":"Alfonso lives in a place named Galicia."}
{"input":"BornIn(ralphHammerthaler, wasserburgamInn)","output":"Ralph Hammerthaler was born in Wasserburg am Inn."}
{"input":"LocatedIn(wasserbAmInn, germany)","output":"Wasserburg am Inn is in Germany."}
{"input":"LocatedIn(germany, europe)","output":"Germany is in Europe."}
{"input":"Writer(ralphHammerthaler) ∧ German(ralphHammerthaler)","output":"Ralph Hammerthaler is a German writer."}
{"input":"BornIn1965(ralphHammerthaler)","output":"Ralph Hammerthaler was born in 1965. "}
{"input":"∀x ((Book(x) ∧ WrittenBy(x, neilGaiman)) → ∃y (MoreThan(y, num1000) ∧ SoldCopies(x, y)))","output":"All books written by Neil Gaiman have sold more than one thousand copies."}
{"input":"∃x ∃y (Book(x) ∧ Win(x, hugoAward) ∧ WrittenBy(x, neilGaiman) ∧ (¬(x=y)) ∧ Book(y) ∧ Win(y, hugoAward) ∧ WrittenBy(y, neilGaiman))","output":"Some books that have won Hugo Awards are written by Neil Gaiman."}
{"input":"∀x ((Book(x) ∧ WrittenBy(x, tolkien)) → ReadBy(x, tomas))","output":"Tomas has read all books written by Tolkien. "}
{"input":"ReadBy(hamlet, tomas) ⊕ (∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)))","output":"Either Tomas has read Hamlet, or it has sold more than one thousand copies."}
{"input":"∃y (MoreThan(y, num1000) ∧ SoldCopies(hamlet, y)) ⊕ WrittenBy(hamlet, neilGaiman)","output":"Hamlet has either sold more than one thousand copies or it is written by Neil Gaiman."}
{"input":"∀x (Grass(x) → ¬Food(x))","output":"Grass is not food"}
{"input":"∀x (Meadow(x) → Grass(x))","output":"All meadows are grass."}
{"input":"∀x (Edible(x) → Food(x))","output":"All edible things are food. "}
{"input":"∀x (Fruit(x) → Edible(x))","output":"All fruits are edible."}
{"input":"∀x (Lemon(x) → Fruit(x))","output":"All lemons are fruit."}
{"input":"¬(Edible(grape) ∧ Lemon(grape))","output":"Grapes are not both edible and lemons."}
{"input":"Grass(banana) ∨ Fruit(banana)","output":"Bananas are grasses or fruits. "}
{"input":"Team(goldenStateWarriors) ∧ From(goldenStateWarriors, sanFrancisco)","output":"The Golden State Warriors are a team from San Francisco."}
{"input":"Won(goldenStateWarriors, nbaFinals)","output":"The Golden State Warriors won the NBA finals."}
{"input":"∀x ((Team(x) ∧ Attending(x, nbaFinals)) → WonManyGames(x))","output":"All teams attending the NBA finals have won many games."}
{"input":"Team(bostonCeltics) ∧ Lost(bostonCeltics, nbaFinals)","output":"Boston Celtics are a team that lost the NBA finals."}
{"input":"∀x ((Team(x) ∧ Won(x, nbaFinals)) → MoreIncome(x))","output":"If a team wins the NBA finals, then they will have more income."}
{"input":"∀x ((Won(x, nbaFinals) ∨ Lost(x, nbaFinals)) → Attending(x, nbaFinals))","output":"If a team wins or loses at the NBA finals, then they are attending the finals."}
{"input":"Play(maya, violin) → ¬CanInjure(maya, fingers)","output":"Maya would only play the violin if her fingers could never be injured. "}
{"input":"∀x (VolleyballPlayer(x) → (CanInjure(ankles) ∧ CanInjure(fingers) ∧ CanInjure(shoulder)))","output":"Volleyball players can injure their ankles, fingers, or shoulder."}
{"input":"VolleyballPlayer(maya)","output":"Maya is a volleyball player."}
{"input":"∀x ((Devices(x) ∧ BelongTo(x, company)) → ConnectTo(x, googleHome))","output":"All devices belonging to the company are connected to Google Home. "}
{"input":"∀x ((Devices(x) ∧ With(x, companyLogo)) → BelongTo(x, company))","output":"All devices with the company logo belong to the company. "}
{"input":"∀x ((Devices(x) → (With(x, companyLogo) ⊕ BelongTo(x, employee)))","output":"Each device either has the company logo or belongs to employees. "}
{"input":"∀x ((Devices(x) ∧ BelongTo(x, employee)) → CanBeConnectedTo(x, wifi))","output":"All of the devices belonging to employees can be connected to the company's wifi. "}
{"input":"∀x ((Devices(x) ∧ ConnectTo(x, googleHome)) → ControlledBy(x, manager))","output":"All of the devices connected to Google Home are controlled by managers. "}
{"input":"∀x ((Devices(x) ∧ CanBeConnectedTo(x, wifi)) → EasyToOperate(x))","output":"All of the devices that connect to the company's wifi are easy to operate. "}
{"input":"∀x ((Devices(x) ∧ EasyToOperate(x)) → ProducedAfterNewCTOAppointed(x, company))","output":"All of the devices that are easy to operate were produced after a new CTO is appointed. "}
{"input":"Devices(modelXX) ∧ (¬ProducedAfterNewCTOAppointed(modelXX, company))","output":"ModelXX was not produced after a new CTO was appointed."}
{"input":"∀x (CDPlayer(x) → DelicateMechanism(x))","output":"All CD players are delicate mechanisms."}
{"input":"∀x (DelicateMechanism(x) → ¬(Toy(x) ∧ SuitableFor(x, children)))","output":"No delicate mechanisms are suitable toys for children."}
{"input":"∀x (Mammal(x) → LivingBeing(x)) ","output":"All mammals are living beings."}
{"input":"∀x (Elephant(x) → Mammal(x))","output":"All elephants are mammals."}
{"input":"∀x (BabyElephant(x) → Elephant(x))","output":"All baby elephants are elephants."}
{"input":"∃x (BabyElephant(x) ∧ Sleepy(x))","output":"Some baby elephants are sleepy."}
{"input":"LivingBeing(jumbo) → ¬(Elephant(jumbo) ∧ Mammal(jumbo))","output":"If Jumbo is a living being, then Jumbo is not both an elephant and a mammal."}
{"input":"Sleepy(jumbo) → BabyElephant(jumbo) ⊕ Mammal(jumbo)","output":"If Jumbo is sleepy, then Jumbo is either a baby elephant or a mammal."}
{"input":"∀x (Planet(x) ∧ In(x, solarSystem) → ¬RelyOnToGenerate(x, nuclearFusion, light))","output":"No planet in the solar system relies on nuclear fusion to generate light."}
{"input":"∀x (Star(x) ∧ In(x, solarSystem) → RelyOnToGenerate(x, nuclearFusion, light))","output":"All stars in the solar system rely on nuclear fusion to generate light. "}
{"input":"∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ GreaterThan(x, solarMass, 0point08) → Star(x))","output":"All celestial bodies in the solar systems that have greater than 0.08 solar masses are stars. "}
{"input":"∀x (CelestialBody(x) ∧ In(x, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(x, gravity) → Planet(x))","output":"If a celestial body in the solar system has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity, then it is a planet."}
{"input":"(CelestialBody(europa) ∧ In(europa, solarSystem) ∧ (∃y (OrbitOf(y, x) ∧ Clear(x, y) ∧ DebrisFree(y))) ∧ NearlySphericalShape(europa, gravity)) ∨ RelyOnToGenerate(europa, nuclearFusion, light) → CelestialBody(europa) ∧ In(europa, solarSystem)","output":"If Europa is a celestial body in the solar system that has cleared its orbit of other debris and has a nearly spherical shape due to its own gravity or relies on nuclear fusion to generate light, then Europa is a celestial body in the solar system. "}
{"input":"∀x (MaxListenTo(x) → (ClassicalMusic(x) ⊕ Rap(x)))","output":"If Max listens to music, he either listens to classical music or rap."}
{"input":"∀x (MaxListenTo(x) ∧ ClassicalMusic(x) → Song(x) ∧ From(x, 12thCentury))","output":"All the classical songs that Max listens to are from the 12th century. "}
{"input":"∀x (MaxListenTo(x) ∧ Rap(x) → Song(x) ∧ By(x, kanyeWest))","output":"If Max is listening to a rap song, then the song is by Kanye West. "}
{"input":"∀x (Song(x) ∧ By(x, kanyeWest) → Song(x) ∧ FullOfLyrics(x))","output":"All songs by Kanye West are full of lyrics. "}
{"input":"∀x (Song(x) ∧ FullOfLyrics(x) → NeedToBeWrittenWith(x, words))","output":"All songs that are full of lyrics need to be written with words"}
{"input":"¬(ClassicalMusic(asItWasByHarryStyles) ∧ Song(asItWasByHarryStyles) ∧ From(asItWasByHarryStyles, 12thCentury))","output":"It is not true that “As it was” by Harry Styles is classical music that Max listens to and is from the 12th century."}
{"input":"MaxListenTo(asItWasByHarryStyles)","output":"Max listens to \"As it was\" by Harry Styles."}
{"input":"Produce(whiteTown, yourWoman) ∧ OnePersonBand(whiteTown)","output":"\"Your Woman\" is a song by the British one-person band White Town."}
{"input":"Peak(yourWoman, uKSinglesChart)","output":"\"Your Woman\" song peaked at No. 1 on the UK Singles Chart."}
{"input":"∀x ((∃y(Peak(x, y))) → Popular(x))","output":"If a song peaked at No.1 at a particular place, it was extremely popular."}
{"input":"Peak(yourWoman, iceland) ∧ Peak(yourWoman, israel) ∧ Peak(yourWoman, spain)","output":"\"Your Woman\" peaked at No. 1 in Iceland, Israel, and Spain."}
{"input":"∀x (Function(x) ∧ RepresentOn(x, straightLine, coordinatePlane) → LinearFunction(x))","output":""}
{"input":"∀x (LinearFunction(x) → ¬NonConvexFunction(x))","output":"All functions that represent straight lines on the coordinate plane are linear functions. "}
{"input":"∀x (Function(x) → NonConvexFunction(x) ⊕ ConvexFunction(x))","output":"No linear functions are non-convex functions."}
{"input":"∀x (QuasiConvexFunction(x) → RealValuedFunction(x))","output":"A function is either a non-convex fuction or a convex function."}
{"input":"∀x (ConvexFunction(x) → QuasiConvexFunction(x))","output":"All quasi-convex functions are real-valued functions."}
{"input":"Function(maximumOfQuasiConvexFunction)","output":"All convex functions are quasi-convex functions. "}
{"input":"(Function(maximumOfQuasiConvexFunction) ∧ RepresentOn(maximumOfQuasiConvexFunction, straightLine, coordinatePlane)) ∨ ConvexFunction(maximumOfQuasiConvexFunction) ∨ ¬NonConvexFunction(maximumOfQuasiConvexFunction)","output":"The maximum of quasiconvex functions is a function."}
{"input":"∀w ∀x ∀y ∀z (SoccerTeam(x) ∧ SoccerTeam(y) ∧ NumberOfGoalScored(x, z) ∧ NumberOfGoalScored(y, w) ∧ y=w ∧ During(regularTime) → PlayExtra(x, y))","output":"If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time."}
{"input":"∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))","output":"If two soccer teams score the same number of goals in one UCL final during both regular and extra time, they need to play the penalty shoot-out."}
{"input":"SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)","output":"Real Madrid and Atlético Madrid both scored one goal in the 2016 UCL final during the regular time."}
{"input":"SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)","output":"Real Madrid and Atlético Madrid both scored zero goals in the 2016 UCL final during the extra time."}
{"input":"BasedIn(system7, uk) ∧ ElectronicDanceMusicBand(system7)","output":"System 7 is a UK-based electronic dance music band."}
{"input":"Form(stevehillage, system7) ∧ Form(miquettegiraudy, system7)","output":"Steve Hillage and Miquette Giraudy formed System 7."}
{"input":"FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)","output":"Steve Hillage and Miquette Giraudy are former members of the band Gong."}
{"input":"∀x (ElectronicDanceMusicBand(x) → Band(x))","output":"Electric dance music bands are bands."}
{"input":"∃x (ClubSingle(x) ∧ Release(system7, x))","output":"System 7 has released several club singles."}
{"input":"∀x (ClubSingle(x) → ¬Single(x))","output":"Club singles are not singles."}
{"input":"∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))","output":"A summarization model is always faithful if it uses content from the input documents."}
{"input":"∀x (Model(x) ∧ Extractive(x) → Model(x) ∧ Summarization(x))","output":"Extractive models are summarization models."}
{"input":"∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))","output":"An extractive model can only use content from the input documents."}
{"input":"∀x (RobinsFriends(x) ∧ Practice(x, codingQuestion) → ¬StudyingToGoToToBecome(x, medicalSchool, doctor))","output":"If Robin's friends practice coding questions, then they are not studying to go to medical school to become a doctor."}
{"input":"∀x (RobinsFriends(x) ∧ WantToWorkIn(x, softwareEngineeringIndustry) → PracticeCodingQuestions(x))","output":"If Robin's friends want to work in the software engineering industry, then they practice coding questions."}
{"input":"∀x (RobinsFriends(x) ∧ Enjoy(x, healthcareField) ∧ WantToHelp(x, peopleWithMedicalIssue) → StudyingToGoToToBecome(x, medicalSchool, doctor))","output":"If Robin's friends enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor."}
{"input":"∀x (RobinsFriends(x) ∧ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → EnjoyHealthcareFields(x) ∧ WantToHelp(x, peopleWithMedicalIssue))","output":"If Robin's friends grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues."}
{"input":"∀x (RobinsFriends(x) ∧ StudyHard(x) → ∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))","output":"If Robin's friends study hard, then they grew up with parents who worked as doctors."}
{"input":"RobinsFriends(mark)","output":"Mark is Robin's friend."}
{"input":"¬((Enjoy(x, healthcareField) ∧ WantToHelp(mark, peopleWithMedicalIssues)) ∧ ¬(∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z))) → StudyHard(mark) ∨ (∃y ∃z (¬(y=z) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z) ∧ ParentOf(y, x) ∧ ParentOf(z, x) ∧ Doctor(y) ∧ Doctor(z)))","output":"If Mark neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Mark is either a person who studies hard or grew up with parents who worked as doctors."}
{"input":"∀x (WorkAt(x, jesssCompany) ∧ GoToSpafrequently(x) → ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)))","output":"People who work at Jess's company and go to the spa frequently are not people who are miserly and need to save a large portion of their income."}
{"input":"∀x (WorkAt(x, jesssCompany) → Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome)⊕ SpendFrivolously(x, aLotOfMoney))","output":"People who work at Jess's company are either miserly and need to save a large portion of their income, or frivolously spend a lot of money."}
{"input":"∀x (WorkAt(x, jesssCompany) ∧ SpendFrivolously(x, aLotOfMoney) → Value(x, qualityManufacturing) ∧ Value(x, luxuryItem))","output":"If people who work at Jess's company frivolously spend a lot of money when they go out, then they value quality manufacturing and luxury items."}
{"input":"∀x (WorkAt(x, jesssCompany) ∧ Value(x, qualityManufacturing) ∧ Value(x, luxuryItem) → Enjoy(x, shopping, materialisticItem))","output":"If people who work at Jess's company value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time."}
{"input":"WorkAt(thomas, jesssCompany)","output":"Thomas works at Jess's company."}
{"input":"¬(Miserly(thomas) ∧ NeedToSave(thomas, aLargePortionOfIncome)) → ¬((Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)))","output":"If Thomas is not miserly and needs to save a large portion of his income, then Thomas does not value quality manufacturing and luxury items."}
{"input":"(Value(thomas, qualityManufacturing) ∧ Value(thomas, luxuryItem)) ∨ ¬(Miserly(x) ∧ NeedToSave(x, aLargePortionOfIncome))","output":"Thomas values quality manufacturing and luxury items or he is not miserly."}
{"input":"AlbumsReleased(phoenix, 6)","output":"The indie pop band Phoenix has released six albums. "}
{"input":"Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, 500,000)","output":"Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. "}
{"input":"∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, 500,000) → CertifiedGold(x))","output":"A certified gold album or single is one which sold over half a million copies. "}
{"input":"Single(1901) ∧ From(1901, wolfgangamadeusphoenix) ∧ By(1901, phoenix)","output":"\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\""}
{"input":"SoldOver(l1901, 400,000)","output":"Over 400,000 copies of \"1901\" have been sold. "}
{"input":"Superhero(peterParker) ⊕ Civilian(peterParker)","output":"Peter Parker is either a superhero or a civilian."}
{"input":"Destroyer(theHulk)","output":"The Hulk is a destroyer."}
{"input":"Angry(theHulk) → WakesUp(theHulk)","output":"The Hulk wakes up when he is angry."}
{"input":"WakesUp(theHulk) → Breaks(theHulk, bridge)","output":"If the Hulk wakes up, then he will break a bridge."}
{"input":"God(thor)","output":"Thor is a god."}
{"input":"Happy(thor) → Breaks(thor, bridge)","output":"Thor will break a bridge when he is happy."}
{"input":"∀x (God(x) → ¬Destroyer(x))","output":"A god is not a destroyer."}
{"input":"Superhero(peter) → Wears(peter, uniform)","output":"Peter Parker wears a uniform when he is a superhero."}
{"input":"∀x ((Destroyer(x) ∧ Breaks(x,bridge)) → ¬Civilian(peter))","output":"Peter Parker is not a civilian if a destroyer is breaking a bridge."}
{"input":"Happy(thor) → Angry(theHulk)","output":"If Thor is happy, the Hulk is angry."}
{"input":"Medication(diethylcarbamazine) ∧ DiscoversIn(diethylcarbamazine, yr1947)","output":"Diethylcarbamazine is a medication discovered in the year 1947."}
{"input":"Treats(diethylcarbamazine, riverBlindness)","output":"Diethylcarbamazine can be used to treat river blindness."}
{"input":"PreferredTreatmentFor(riverBlindness, ivermectin)","output":"The only preferred treatment for river blindness is ivermectin."}
{"input":"¬(Is(diethylcarbamazine, ivermectin))","output":"Diethylcarbamazine is not ivermectin."}
{"input":"∀x (PrimeNumber(x) → NaturalNumber(x)) ","output":"All prime numbers are natural numbers."}
{"input":"∀x (Integer(x) → RealNumber(x))","output":"All integers are real numbers. "}
{"input":"∀x (RealNumber(x) → ComplexNumber(x)) ","output":"All real numbers are complex numbers. "}
{"input":"PrimeNumber(one) ∨ NaturalNumber(one)","output":"One is a prime number or a natural number or both."}
{"input":"¬ComplexNumber(one) → (PrimeNumber(one) ∧ Integer(one))","output":"If one is not a complex number, then one is a prime number and an integer."}
{"input":"∀x (Disease(x) ∧ Require(x, medicalDiagnosis) → RequiredFor(labTest, x) ∨ RequiredFor(imaging, x)) ","output":"If some diseases require a medical diagnosis, then lab tests or imaging is required. "}
{"input":"∀x (RareDisease(x) → Require(x, medicalDiagnosis))","output":"All rare diseases require a medical diagnosis."}
{"input":"∀x (Disease(x) ∧ Mild(x) → ¬(RequiredFor(labTest, x) ∨ RequiredFor(imaging, x))) ","output":"If a disease is mild, then no lab tests or imaging is required. "}
{"input":"∀x (BloodCancer(x) → RareDiseases(x))","output":"All blood cancers are rare diseases."}
{"input":"∀x (Disease(x) ∧ Leukemia(x) → BloodCancer(x))","output":"All types of leukemia are diseases and blood cancers. "}
{"input":"Disease(bladderCancer) ∧ (BloodCancer(bladderCancer) ∨ Leukemia(bladderCancer))","output":"Bladder cancer is a disease and is blood cancer or Leukemia."}
{"input":"∀x ((Element(x) ∧ ∃y(Between(y, num61, num63) ∧ AtomicNumber(x, y))) → ScarceIn(x, china))","output":"There are no elements with atomic number between 61-63 that are not scarce in China."}
{"input":"∀x (¬RareEarthElement(x) → ¬ScarceIn(x, china)) ","output":"Non-rare earth elements are not scarce in China."}
{"input":"∀x (¬RareEarthElement(x) ⊕ RareEarthElement(x)) ","output":"All elements are either non-rare earth elements or rare earth elements. "}
{"input":"∀x (RareEarthElement(x) → UsedIn(x, industry)) ","output":"All rare earth elements can be used for industry."}
{"input":"∀x (RareEarthElement(x) → EssentialFor(x, electronics))","output":"All rare earth elements are essential for exploring future directions of electronics."}
{"input":"¬(¬RareEarthElement(lithium) ⊕ EssentialFor(lithium, electronics))","output":"Lithium is either a non-rare earth element and essential for exploring future directions of electronics, or is not a non-rare earth element and is not essential for exploring future directions of electronics."}
{"input":"∀x (¬CleanOften(x, home) → ¬Have(x, tidyHouse))","output":"If people don't often clean their homes, then they do not have tidy houses."}
{"input":"∀x (¬Prioritize(x, cleaning) → ¬CleanOften(x, home))","output":"If people don't prioritize cleaning, then they do not often clean their homes."}
{"input":"∀x (Hire(x, maid) ∨ Hire(x, cleaningService) → Have(x, tidyHouse))","output":"If people hire a maid or cleaning service, then they have tidy houses."}
{"input":"∀x (¬CareAbout(x, cleanliness) → ¬Prioritize(x, cleaning))","output":"If people don't care about cleanliness, then they do not prioritize cleaning."}
{"input":"¬(Hire(x, maid) ∨ Hire(x, cleaningService)) ⊕ ¬CleanOften(jack, home))","output":"Either Jack does hire a maid or cleaning service and does not often clean his home, or he does not hire a maid or cleaning service nor often clean his home."}
{"input":"¬Falling(bottle) → (Upright(bottle) ⊕ ToppledOver(bottle))","output":"The bottle not falling is either standing upright or toppled over. "}
{"input":"¬Falling(bottle) → ¬Upright(bottle)","output":"The bottle not falling is not standing upright."}
{"input":"∀x (ChooseWhatToDoWith(x, time) → FlexibleSchedule(x))","output":"Everyone who chooses what they want to do with their time has flexible schedules."}
{"input":"∀x (Have(x, lotsOfFreetime) → ChooseWhatToDoWith(x, time))","output":"Everyone with a lot of free time chooses what they want to do with their time."}
{"input":"∀x (Have(x, lotsOfFreetime) ⊕ (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y))))","output":"People either have a lot of free time or they invest in a career in which they are willing to spend the rest of their lives."}
{"input":"∀x (∃y (InvestIn(x, y) ∧ Career(y) ∧ WillingToSpendIn(restOfLife, y)) → Hardworking(x))","output":"If people invest in a career in which they are willing to spend the rest of their lives, then they are hardworking individuals with high ambitions and goals for the future.  "}
{"input":"∀x (Hardworking(x) ∧ HaveFor(x, highAmbition, future) ∧ HaveFor(x, goal, future) → ¬ShortSighted(x))","output":"If people are hardworking individuals with high ambitions and goals for the future, then they are not short sighted."}
{"input":"¬((Hardworking(john) ∧ HaveFor(john, highAmbition, future) ∧ HaveFor(john, goal, future)) ⊕ FlexibleSchedule(john))","output":"John is not either a hardworking individual with high ambitions and goals for the future or has a flexible schedule."}
{"input":"OfficeIn(ableton, germany)","output":"Ableton has an office in Germany."}
{"input":"OfficeIn(ableton, unitedStates)","output":"Ableton has an office in the USA."}
{"input":"¬SameCountry(germany, unitedStates)","output":"USA and Germany are different countries."}
{"input":"∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ (¬SameCountry(y, z)) → MultinationalCompany(x))","output":"Any company that has offices in different countries is a multinational company."}
{"input":"MakesMusicSoftware(ableton)","output":"Ableton makes music software."}
{"input":"∀x (FlyOver(x, vastDistance) → GlideInAir(x))","output":"Those who can fly over a vast distance glide in the air. "}
{"input":"∀x (Flightless(x) ∧ Bird(x) → ¬FlyOver(x, vastDistance))","output":"Flightless birds cannot fly over a vast distance. "}
{"input":"∀x (Penguin(x) → Flightless(x) ∧ Bird(x))","output":"Penguins are flightless birds. "}
{"input":"∀x (NonFlying(x) ∧ Bird(x) ∧ In(x, antarctica) → Penguin(x))","output":"Nonflying birds in Antarctica are penguins. "}
{"input":"Penguin(fido) ∨ FlyOver(fido, vastDistance)","output":"Fido is a penguin, or flies over a vast distance. "}
{"input":"∀x (MemberOf(x, universityFaculty) → Professor(x))","output":"All members of the university faculty are professors."}
{"input":"∀x (PrincipalInvestigator(x) → MemberOf(x, universityFaculty))","output":"All principal investigators are members of the university faculty."}
{"input":"∀x (Professor(x) → ¬UndergraduateStudent(x))","output":"No professor is also an undergraduate student."}
{"input":"∀x (Pursuing(x, bachelor) → UndergraduateStudent(x))","output":"Anyone pursuing a bachelor's degree is an undergraduate student."}
{"input":"¬(Pursuing(leon, bachelor) ⊕ PrincipalInvestigator(leon))","output":"Leon is not pursuing a bachelor's degree, and he is not a principal investigator."}
{"input":"¬Pursuing(leon, bachelor) → Professor(leon)","output":"If Leon is not pursuing a bachelor's degree, then he is a professor."}
{"input":"∀x (Cutman(x) → Prevent(x, physicalDamageToAFighter) ∧ Treat(x, physicalDamageToAFighter))","output":"A cutman is responsible for preventing and treating physical damage to a fighter."}
{"input":"∀x (Cutman(x) → AppearIn(x, boxingMatch) ∨ AppearIn(x, kickboxingMatch) ∨ AppearIn(x, mixedMartialArtsMatchBout))","output":"Cutmen appear in boxing matches, kickboxing matches, or mixed martial arts matches bout. "}
{"input":"∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleed) ∧ Handle(x, laceration))","output":"Cutmen handle swelling, nosebleeds and lacerations. "}
{"input":"Cutman(jack)","output":"Jack is a cutman."}
{"input":"Painting(monaLisa) ∧ TheWorldsBestKnown(monaLisa)","output":"The Mona Lisa is a world's best-known painting."}
{"input":"PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)","output":"The Mona Lisa is a portrait painted by Leonardo da Vinci."}
{"input":"Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)","output":"Leonardo da Vinci was a scientist and painter."}
{"input":"∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))","output":"Painting genres can be history, portrait, animal, landscape, and still life."}
{"input":"∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))","output":"No professional tennis umpires are professional tennis players."}
{"input":"∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))","output":"If you are a World Tour player, then you are a professional tennis player."}
{"input":"∀x (GrandSlamChampion(x) → WorldTourPlayer(x))","output":"All Grand Slam champions are World Tour players."}
{"input":"∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))","output":"All Grand Slam umpires are professional tennis umpires."}
{"input":"WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)","output":"Nadal is a World Tour player or a Grand Slam champion"}
{"input":"∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))","output":"Businesses are either sanctioned or unsanctioned."}
{"input":"∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))","output":"Sanctioned businesses are limited."}
{"input":"∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))","output":"Unsanctioned businesses are free."}
{"input":"Buisness(crudeOilDataExchange) ∧ ¬Free(crudeOilDataExchange)","output":"The Crude Oil Data Exchange is a business that isn't free."}
{"input":"∀x (Depressing(x) → Sad(x))","output":"When something is depressing, it is sad."}
{"input":"Depressing(v)","output":"The end of a relationship is depressing. "}
{"input":"EarlyBronzeAge(palstave) ∧ Axe(palstave)","output":"Palstaves are a type of early bronze axe."}
{"input":"FoundIn(palstave, northernEurope) ∨ FoundIn(palstave, westernEurope) ∨ FoundIn(palstave, southWesternEurope)) ∧ CastIn(palstave, molds)","output":"Palstaves are found in northern, western, and southwestern Europe and are cast in molds."}
{"input":"Archeologist(johnEvans) ∧ Popularize(johnEvans, termPalstave)","output":"John Evans is an archeologist who popularized the term \"palstave.\""}
{"input":"¬Axe(paalstab) ∧ DiggingShovel(paalstab)","output":"Paalstabs are not a type of axe but rather a digging shovel."}
{"input":"Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo) ∧ HoldingCompany(x) ","output":"Koei Tecmo is a Japanese video game and anime holding company."}
{"input":"∀x (HoldingCompany(x) → ∃y(Company(y) ∧ Holds(x, y)))","output":"Holding companies hold several companies."}
{"input":"DisbandsIn(tecmo, japan) ∧ Survives(koei) ∧ Renames(koei)","output":"Tecmo was disbanded in Japan, while Koei survived but was renamed."}
{"input":"∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))","output":"Video game holding companies are holding companies."}
{"input":"System(playStation2) ∧ CameraAccessoryFor(playStationEyeToy, playStation2)","output":"The PlayStation EyeToy is a camera accessory for the PlayStation 2 system. "}
{"input":"System(playStation3) ∧ CameraAccessoryFor(playStationEye, playStation3)  ","output":"The PlayStation Eye is a camera accessory for the PlayStation 3 system."}
{"input":"System(playStation4) ∧ System(playStation5) ∧ CameraAccessoryFor(playStationCamera, playStation4) ∧ CameraAccessoryFor(playStationCamera, playStation5)","output":"The PlayStation Camera is a camera accessory for the PlayStation 4 and the PlayStation 5 systems."}
{"input":"∀x ∀y (CameraAccessoryFor(x, y) ∧ System(y) → CompatibleWith(x, y))","output":"Camera accessories for a system are compatible with that system."}
{"input":"¬(playStation2=playStation3) ∧ ¬(playStation2=playStation4) ∧ ¬(playStation2=playStation5) ∧ ¬(playStation3=playStation4) ∧ ¬(playStation3=playStation5) ∧ ¬(playStation4=playStation5)","output":"Playstation 2, 3,4, and 5 are all different."}
{"input":"∀x ∃y ∃z (System(y) ∧ System(z) ∧ ¬(y=z) ∧ CompatibleWith(x, y) ∧ CompatibleWith(x, z) → x=playstationCamera)","output":"Only the PlayStation Camera camera system is compatible with different systems."}
{"input":"FootballPlayer(adamBuska) ∧ European(adamBuska)","output":"Adam Buska is a European football player."}
{"input":"∀x (FootballPlayer(x) ∧ European(x) → ∃y (Call(american, y, soccer) ∧ Play(x, y)))","output":"If a European plays football, they play what Americans call soccer."}
{"input":"∀x (ATop3BestSellingVideoGame(x) → Multiplatform(x))","output":"If a game is one of the top-3 best selling video-games, then it is multiplatform."}
{"input":"∀x (SoldMoreThan100MillionCopies(x) → ATop3BestSellingVideoGame(x))","output":"If a game has sold more than 100 million copies, then it is one of the top-3 best-selling video games."}
{"input":"∃x ((SupportsWindows(x) ∧ AGameDevelopedByNintendo(x)))","output":"Some games that support Windows are developed by Nintendo."}
{"input":"∀x (Multiplatform(x) → CanBePlayedOnAWideRangeOfDevices(x))","output":"All multiplatform games can be played on a wide range of devices."}
{"input":"¬(DevelopedByNintendo(PokemonDiamond) ∨ CanBePlayedOnAWideRangeOfDevices(PokemonDiamond))","output":"Pokemon Diamond version is neither developed by Nintendo nor can be played on a wide range of devices."}
{"input":"∃x (BRIC(x) ∧ ¬(x=china) ∧ BRIC(china) ∧ Emerging(chinaEconomy))","output":"China is one of the BRICS, and its economy is emerging."}
{"input":"∀x (From(x, china) → From(x, bric))","output":"If someone is from China, then they are from a country of BRICS."}
{"input":"BRIC(india) ∧ Emerging(indiaEconomy)","output":"India is one of the BRICS, and its economy is emerging."}
{"input":"∀x (From(x, india) → From(x, bric))","output":"If someone is from India, then they are in a country of BRICS."}
{"input":"∀x (From(x, china) → Chinese(x))","output":"All people from China are Chinese people."}
{"input":"∀x (From(x, india) → Indian(x))","output":"All people from India are Indian people."}
{"input":"∃x (From(x, india))","output":"There is a person from India."}
{"input":"Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)","output":"Daveed Diggs is an actor and film producer."}
{"input":"∃x ∃y(PlaysIn(daveedDiggs, x, hamilton) ∧ (¬(x=y)) ∧ PlaysIn(daveedDiggs, y, hamilton)) ∧ OnBroadway(hamilton) ∧ Musical(hamilton)","output":"Daveed Diggs played two roles in the musical Hamilton on Broadway."}
{"input":"∃x ∃y(Actor(x) ∧ PlaysIn(x, y, hamilton) ∧ Wins(x, bestActorAward))","output":"One of the actors from Hamilton won the best actor award."}
{"input":"∃x (Actor(x) ∧ PlaysIn(x, thomasJefferson, hamilton) ∧ Wins(x, bestActorAward))","output":"The actor playing Thomas Jefferson won the best actor award."}
{"input":"Plays(daveedDiggs, thomasJefferson)","output":"Daveed Diggs played Thomas Jefferson."}
{"input":"∀x ((Musical(x) ∧ OnBroadway(x)) → ¬Film(x))","output":"Musicals on Broadway are not films."}
{"input":"Polish(ernestPohl) ∧ FootballPlayer(ernestPohl)","output":"Ernest Pohl was a Polish football player. "}
{"input":"∃x (FootballPlayer(x) ∧ In(x, polishFirstDivision) ∧ ScoredOver(x, 180Goals))","output":"A football player in the Polish First Division has scored over 180 goals. "}
{"input":"In(ernestPohl, polishFirstDivision) ∧ ScoredOver(ernestPohl, 180Goals)","output":"Ernest Pohl scored more than 180 goals in the Polish First Division. "}
{"input":"∃x ∃y (GornikZabrzes(x) ∧ Stadium(x) ∧ NamedAfter(x, y) ∧ SoccerPlayer(y) ∧ From(y, rudaŚląska))","output":"Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. "}
{"input":"From(ernestPohl, rudaŚląska))","output":"Ernest Pohl is from Ruda Śląska. "}
{"input":"MemberOf(annJLand, philadelphiaCityCouncil) ∧ MemberOf(annJLand, democraticParty)","output":"Ann J. Land was a member of the Philadelphia City Council and the Democratic Party."}
{"input":"RunUnopposedFor(ann, philadelphiaCityCouncil, year1980)","output":"Ann J. Land ran unopposed for the Philadelphia City Council in 1980."}
{"input":"∀x ∀y (RunUnopposedFor(x, philadelphiaCityCouncil, y) → ElectedTo(x, philadelphiaCityCouncil, y))","output":"People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year."}
{"input":"PoliticalChallenger(michaelNutter)","output":"Michael Nutter was a political challenger."}
{"input":"Defeat(annJLand, michaelNutter) ∧ RunFor(annJLand, philadelphiaCityCouncil, year1987)","output":"Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987."}
{"input":"WonCup(aberdeen, year2013Final)","output":"Aberdeen won the cup in the 2013 final."}
{"input":"WonCup(rangers, year2014Final)","output":"Rangers won the cup in the 2014 final."}
{"input":"¬(aberdeen=rangers)","output":"Aberdeen and Rangers are different teams."}
{"input":"∀x ∀y ∀z ∀w (¬(x=y) ∧ WonCup(x, z) ∧ WonCup(y, w) → ¬(z=w))","output":"Different teams cannot win the cup in the same year's final."}
{"input":"∀x (YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job) → Have(x, stableJob))","output":"All young working professionals who have regular 9-5 jobs have stable jobs."}
{"input":"∃x (LiveIn(x, manhattan) ∧ YoungWorkingProfessional(x) ∧ Have(x, regular9To5Job))","output":"Some people living in Manhattan are young professionals with regular 9-5 jobs."}
{"input":"∀x (Have(x, stableJob) → WorkRegularly(x))","output":"All people who have stable jobs are people who work regularly."}
{"input":"∀x (WorkRegularly(x) → ¬DisobeyFrequently(x, boss))","output":"People who work regularly do not frequently disobey their bosses."}
{"input":"¬(DisobeyFrequently(mary, boss) ⊕ WorkRegularly(mary))","output":"Mary either frequently disobeys her bosses and works regularly, or that she neither frequently disobeys her bosses nor works regularly."}
{"input":"∀x (BrainStudy(x) → (BlockDesign(x) ⊕ Event-relatedDesign(x)))","output":"All brain study designs are either block designs or event-related designs. "}
{"input":"∀x ((BrainStudy(x) ∧ EventRelatedDesign(x)) → BrainImageAcquisition(x))","output":"All event-related brain study designs are brain image acquisition."}
{"input":"∀x ((BrainStudy(x) ∧ BrainImageAcquisition(x)) → PrecededBy(x, dataProcessing))","output":"All brain image acquisition in brain study designs is preceded by data processing."}
{"input":"∀x ((BrainStudy(x) ∧ PrecededBy(x, dataProcessing)) → ¬Analyze(x, data))","output":"Nothing in brain study designs preceded by data processing analyzes data."}
{"input":"BrainStudy(pictureMemory) ∧ (¬(EventRelatedDesign(pictureMemory) ⊕ AnalyzingData(pictureMemory)))","output":"Picture memory is a type of brain study design that is not either event-related or analyzing data."}
{"input":"USNavyShip(theUSSLyon) ∧ InvolvedIn(theUSSLyon, wWII)","output":"The USS Lyon was a US Navy ship involved in WWII."}
{"input":"∀x (InvolvedIn(x, wWII) → (CurrentlyDecommissioned(x) ∨ In(x, museum)))","output":"All ships involved in WWII are currently decommissioned or in a museum."}
{"input":"∀x (Disposable(x) → DesignedToBeOnlyUsedOnce(x))","output":"All disposables are designed to be used only once."}
{"input":"∃x (EcoFriendly(x))","output":"Some items used in Tom's house are eco-friendly."}
{"input":"∀x (UsedIn(x, tomsHouse) → Disposable(x) ⊕ Reusable(x))","output":"Every item used in Tom's house is either disposable or reusable. "}
{"input":"∀x (MadeFrom(x, metal) → ¬MadeFrom(x, plastic))","output":"If something is made from metal, then it is not made from plastic. "}
{"input":"∀x (Reusable(x) → MadeFrom(x, metal))","output":"All reusable items used in Tom's house are made from metal."}
{"input":"¬(MadeFrom(chopsticksUsedInTomsHouse, metal) ⊕ MadeFrom(chopsticksUsedInTomsHouse, plastic))","output":"The chopsticks used in Tom's house are either made from metals and plastics, or that they are neither made from metals nor plastics."}
{"input":"∀x (Lazy(x) → Unproductive(x))","output":"Anything lazy is unproductive."}
{"input":"∀x (Unproductive(x) → ¬Energetic(x))","output":"No one unproductive is energetic."}
{"input":"∀x (Sloth(x) → Lazy(x))","output":"If something is a sloth, then it is lazy."}
{"input":"∃x (Animal(x) ∧ Sloth(x))","output":"Some animals are sloths."}
{"input":"¬Energetic(sid) ∧ ¬Sloth(sid))","output":"Sid is neither an energetic person nor a sloth."}
{"input":"∀x (EuropeanSoccerClub(x) → Attend(x, ucl) ∨ Attend(x, uel) ∨ Attend(x, uecl))","output":"European soccer clubs can attend UCL, UEL, and UECL."}
{"input":"∀x ∀y (EuropeanSoccerClub(x) ∧ EuropeanSoccerClub(y) ∧ Attend(x, ucl) ∧ Attend(y, uel) → HigherRank(x, y))","output":"A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL."}
{"input":"∀x ∀y (EuropeanSoccerClub(x) ∧ EuropeanSoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))","output":"A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL."}
{"input":"EuropeanSoccerClub(manchesterUnited) ∧ EuropeanSoccerClub(manchesterCity)","output":"Manchester United and Machester City are both European soccer clubs."}
{"input":"Attend(manchesterunited, uel)","output":"Manchester United is eligible to attend UEL next season."}
{"input":"Attend(manchestercity, ucl)","output":"Manchester City is eligible to attend UCL next season."}
{"input":"∀x ∀y ((Coach(x, y) ∧ FootballClub(y)) → FootballCoach(x))","output":"If a person coaches a football club, the person is a football coach."}
{"input":"∀w ∀x ∀y ∀z ((PlayPositionFor(x, w, y, z) ∧ InNFL(y, z)) → PlayInNFL(x))","output":"If a person has a position in a club in a year, and the club is in NFL in the same year, the person plays in NFL."}
{"input":"FootballClub(minnesotaVikings)","output":"Minnesota Vikings is a football club."}
{"input":"Coach(dennisGreen, minnesotaVikings)","output":"Dennis Green coached Minnesota Vikings."}
{"input":"ReceiveTD(crisCarter, num13)","output":"Cris Carter had 13 touchdown receptions."}
{"input":"InNFL(minnesotaVikings, yr1997)","output":"Minnesota Vikings were in the National Football League in 1997."}
{"input":"PlayPositionFor(johnRandle, defensiveTackle, minnesotaVikings, yr1997)","output":"John Randle was Minnesota Vikings defensive tackle in 1997."}
{"input":"∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, lecture) → BookedDuring(x, day))","output":"All classrooms in William L. Harkness Hall that are used for lectures are booked during the day. "}
{"input":"∀x (ClassroomIn(x, williamLHarknessHall) ∧ ¬PrivateStudySpot(x))","output":"None of the classrooms in William L. Harkness Hall are private study spots."}
{"input":"∀x (ClassroomIn(x, williamLHarknessHall) ∧ (UsedFor(x, lecture) ∨ UsedFor(x, officeHours)))","output":"All classrooms in William L. Harkness Hall are used for lectures or used for office hours."}
{"input":"∀x (ClassroomIn(x, williamLHarknessHall) ∧ BookedIn(x, evening) → ¬FreelyUsableAtNight(x))","output":"If a classroom in William L. Harkness Hall is booked in the evening, then it is not freely usable at night."}
{"input":"∀x (ClassroomIn(x, williamLHarknessHall) ∧ UsedFor(x, officeHours) → BookedIn(x, evening))","output":"If a classroom in William L. Harkness Hall is used for office hours, then it is booked in the evening."}
{"input":"ClassroomIn(116, williamLHarknessHall) ∧ ¬(UsedFor(116, lecture) ⊕ UsedFor(116, officeHours))","output":"Room 116 is a classroom in William L. Harkness Hall that is either both used for lecture and used for office hours or not used for either."}
{"input":"LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)","output":"Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea."}
{"input":"NorthwestOf(baku, shafaq-asiman)","output":"Baku is northwest of Shafaq-Asiman."}
{"input":"∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))","output":"If place A is northwest of place B, then place B is southeast of place A."}
{"input":"Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ Gymnast(herodicus)","output":"Herodicus was a Greek physician, dietician, sophist, and gymnast."}
{"input":"Born(herodicus, selymbia) ∧ City(selymbia)","output":"Herodicus was born in the city of Selymbria."}
{"input":"Colony(selymbia, megara) ∧ CityState(megara)","output":"Selymbria is a colony of the city-state Megara."}
{"input":"Tutor(herodicus, hippocrates)","output":"One of the tutors of Hippocrates was Herodicus."}
{"input":"Recommend(herodicus, massages)","output":"Massages were recommended by Herodicus."}
{"input":"∃x ∃y (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine) ∧ (¬(x=y)) ∧ Theory(y) ∧ From(y, herodicus) ∧ FoundationOf(y, sportsMedicine))","output":"Some of the theories of Herodicus are considered to be the foundation of sports medicine."}
{"input":"∀x ((Kid(x) ∧ In(x, ourFamily)) → ¬Love(x, opera))","output":"None of the kids in our family love the opera."}
{"input":"∀x ((Adult(x) ∧ In(x, ourFamily)) → Love(x, opera))","output":"All of the adults in our family love the opera."}
{"input":"∀x ((Scientist(x) ∧ In(x, ourFamily)) → Adult(x))","output":"If someone in our family is a scientist, then they are an adult."}
{"input":"∃x (Student(x) ∧ In(x, ourFamily) ∧ Kid(x))","output":"Some students in our family are kids."}
{"input":"Kid(billy) ∧ In(billy, ourFamily) ","output":"Billy is a kid in our family."}
{"input":"Scottish(brianWinter) ∧ FootballReferee(brianWinter)","output":"Brian Winter is a Scottish football referee."}
{"input":"Retired(brianWinter) ∧ RetiredIn(brianWinter, yr2012)","output":"After being injured, Brian Winter retired in 2012."}
{"input":"RefereeObserver(brianWinter)","output":"Brian Winter was appointed as a referee observer after his retirement."}
{"input":"∃x (FootballReferee(x) ∧ RefereeObserver(x))","output":"Some football referees become referee observers."}
{"input":"SonOf(andyWinter, brianWinter) ∧ FootballPlayer(andyWinter) ∧ PlaysFor(andyWinter, hamiltonAcademical)","output":"The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical."}
{"input":"∀x (At(x, boardGameNight) → (InterestedIn(x, puzzle) ∨ BadAt(x, chess)))","output":"Everyone at 'Board Game night' is interested in puzzles, or they are bad at chess, or both."}
{"input":"∀x ((At(x, boardGameNight) ∧ BadAt(x, chess)) → ¬PlaysOften(x, chess))","output":"If a person at 'Board Game night' is bad at chess, then they don't play a lot of chess."}
{"input":"∃x (At(x, boardGameNight) ∧ (Planner(x) ∨ Creative(x)))","output":"There is a person at 'Board Game night' who is either a planner or a creative person."}
{"input":"At(erica, boardGameNight) ∧ PlaysOften(erica, chess)","output":"Erica is at 'Board Game night,' and she is someone who plays a lot of chess."}
{"input":"(At(erica, boardGameNight) ∧ (¬(BadAt(erica, chess) ∨ Creative(erica)))) → ¬(Planner(erica) ⊕  Creative(erica))","output":"If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or she is neither of these things."}
{"input":"∀x (SoccerPlayer(x) → Have(x, leftFoot) ∧ Have(x, rightFoot))","output":"Soccer players have a right foot and a left foot."}
{"input":"∀x (SoccerPlayer(x) ∧ UseEfficiently(x, leftFoot) ∧ UseEfficiently(x, rightFoot) → TopSoccerPlayer(x))","output":"Top soccer players are soccer players who can use both the left foot and right foot very efficiently."}
{"input":"∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, leftFoot) → UseEfficiently(x, leftFoot))","output":"If a soccer player can score many goals using the left foot, they can use that foot very efficiently."}
{"input":"∀x (SoccerPlayer(x) ∧ ScoreUsing(x, manyGoals, rightFoot) → UseEfficiently(x, rightFoot))","output":"If a soccer player can score many goals using the right foot, they can use that foot very efficiently."}
{"input":"SoccerPlayer(ronaldo)","output":"Cristiano Ronaldo is a soccer player."}
{"input":"UseEfficiently(ronaldo, rightFoot)","output":"Cristiano Ronaldo can use his right foot very efficiently."}
{"input":"ScoreUsing(ronaldo, manyGoals, leftFoot)","output":"Cristiano Ronaldo has scored many goals using his left foot."}
{"input":"Hatchery(nationalLobsterHatchery) ∧ LocatedIn(nationalLobsterHatchery, padstowEngland)","output":"The National Lobster Hatchery is a hatchery located in Padstow, England."}
{"input":"OpenToVisitor(nationalLobsterHatchery)","output":"The National Lobster Hatchery is open to visitors."}
{"input":"∀x (Hatchery(x) → ForConservation(x) ⊕ ForProfit(x))","output":"A hatchery is either for profit or for conservation."}
{"input":"∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleaseAnimalToWild(x))","output":"If a hatchery is for conservation, it might release animals into the wild."}
{"input":"¬ForProfit(nationalLobsterHatchery)","output":"The National Lobster Hatchery is not for profit."}
{"input":"∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ Welsh(x))","output":"Rhos Aelwyd F.C. is a Welsh football club."}
{"input":"∀x (FootballClub(x) ∧ LocatedIn(x, ponciau) ↔ Rhosaelwydfc(x))","output":"Rhos Aelwyd F.C. is the only football club located in Ponciau. "}
{"input":"∃x (LocatedIn(x, ponciau) ∧ WonPremierDivisionDuring(x, year2005MonthJune))","output":"The Premier Division was won in June 2005 by a team from Ponciau. "}
{"input":"∀x (WonPremierDivisionDuring(x, year2009MonthOctober) → PromotedTo(x, cymruAlliance))","output":"The winner of the Premier Division in October 2009 was promoted to the Cymru Alliance."}
{"input":"∀x (WonPremierDivisionDuring(x, year2009MonthOctober) ↔ WonPremierDivisionDuring(x, y2005MonthJune))","output":"The Premier Division in October 2009 was won by the same team that won in June 2005. "}
{"input":"∀x (UsedIn(x, labComputer) ∧ UnixOperatingSystem(x) → Software(x))","output":"A Unix operating system used in the lab computers is a piece of software."}
{"input":"∀x (UsedIn(x, labComputer) ∧ MacOS(x) → UnixOperatingSystem(x))","output":"All versions of MacOS used in the lab computer are based on Unix operating systems."}
{"input":"∀x (UsedIn(x, labComputer) → MacOS(x) ⊕ Linux(x))","output":"A lab computer uses either MacOS or Linux. "}
{"input":"∀x (UsedIn(x, labComputer) ∧ Linux(x) → Convenient(x))","output":"All Linux computers in the lab are convenient."}
{"input":"∀x (UsedIn(x, labComputer) ∧ Software(x) → WrittenWithCode(x))","output":"All software used in the lab computers is written with code."}
{"input":"∀x (UsedIn(x, labComputer) ∧ Convenient(x) → Popular(x))","output":"If something is convenient in the lab computer, then it is popular."}
{"input":"UsedIn(burger, labComputer) ∧ WrittenWithCode(burger) ∧ MacOS(burger))","output":"Burger is used in the lab computer, and it is written with code and a new version of MacOS."}
{"input":"UsedIn(pytorch, labComputer) ∧ ¬(Linux(pytorch) ⊕ Software(pytorch))","output":"PyTorch is used in the lab computer, and PyTorch is neither a Linux system nor a piece of software."}
{"input":"∀x (Road(x) → (MadeOf(x, concrete) ⊕ MadeOf(x, asphalt))","output":"Roads are made of either concrete or asphalt."}
{"input":"∀x ∀y (Road(x) ∧ MadeOf(x, concrete) ∧ Road(y) ∧ MadeOf(y, asphalt) → LastLonger(x, y))","output":"Roads made of concrete last longer than roads made with asphalt."}
{"input":"∀x ∀y (Road(x) ∧ MadeOf(x, asphalt) ∧ Road(y) ∧ MadeOf(y, concrete) → Smoother(x, y))","output":"Roads made of asphalt are smoother than roads made of concrete."}
{"input":"∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefer(z, x))","output":"Everyone prefers the smoother of two roads. "}
{"input":"Road(firstRoad) ∧ MadeOf(secondRoad, concrete) ∧ Road(firstRoad) ∧ MadeOf(secondRoad, asphalt)","output":"The first road is made of concrete, and the second road is made of asphalt."}
{"input":"TraditionalSummerCamp(campDavern) ∧ ForBoysAndGirls(campDavern)","output":"Camp Davern is a traditional summer camp for boys and girls."}
{"input":"EstablishedIn(campDavern, year1946)","output":"Camp Davern was established in the year 1946."}
{"input":"OperatedUntil(yMCA, campDavern, year2015)","output":"Camp Davern was operated by the YMCA until the year 2015."}
{"input":"Old(campDavern)","output":"Camp Davern is an old summer camp."}
{"input":"∀x (EmilysFriend(x) ∧ Publish(x, journal) → ¬WorkIn(x, entertainmentIndustry))","output":"If Emily's friends publish journals, then they do not work in the entertainment industry."}
{"input":"∀x (EmilysFriend(x) ∧ AwardWinningNovelist(x) → Publish(x, journal))","output":"All of Emily's friends who are award-winning novelists publish journals."}
{"input":"∀x (EmilysFriend(x) → WorkIn(x, entertainmentIndustry) ∨ HighlyAcclaimedIn(x, theirProfession))","output":"Emily's friends work in the entertainment industry or are highly acclaimed in their profession."}
{"input":"∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ∃y (HoldAt(x, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))","output":"If Emily's friends are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace."}
{"input":"∀x (EmilysFriend(x) ∧ HighlyAcclaimedIn(x, theirProfession) → ReceiveFrom(x, glowingFeedback, colleague) ∧ ReceiveFrom(x, glowingRecommendation, colleague))","output":"If Emily's friends are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues."}
{"input":"EmilysFriends(taylor) ","output":"Taylor is Emily's friend."}
{"input":"¬(HighlyAcclaimedIn(taylor, theirProfession) ∧ (∃y (HoldAt(taylor, y, workPlace) ∧ Tenured(y) ∧ HighRanking(y) ∧ Position(y)))","output":"It is not true that Taylor both holds highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace."}
{"input":"YoungAdultFantasy(thickAsTheives) ∧ Novel(thickAsTheives) ∧ WrittenBy(thickAsTheives, meganWhalenTurner)","output":"Thick as Thieves is a young adult fantasy novel written by Megan Whalen Turner."}
{"input":"PublishedBy(thickAsTheives, greenWillowBooks)","output":"Thick as Thieves was published by Greenwillow Books."}
{"input":"∀x ∀y ∀z ((WrittenBy(x, y) ∧ PublishedBy(x, z)) → WorkedWith(y, z))","output":"If a book was published by a company, then the author of that book worked with the company that published the book."}
{"input":"Fictional(medeEmpire) ∧ SetIn(thickAsTheives, medeEmpire)","output":"The fictional Mede Empire is where Thick as Thieves is set."}
{"input":"∃x ∃y ((Country(x) ∧ Near(x, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, x)) ∧ (¬(x=y) ∧ Near(y, medeEmpire) ∧ PlotsToSwallowUp(medeEmpire, y)))","output":"The Mede Empire plots to swallow up some nearby countries."}
{"input":"Country(attolia) ∧ Near(attolia, medeEmpire) ∧ Country(sounis) ∧ Near(sounis, medeEmpire)","output":"Attolia and Sounis are countries near the Mede Empire."}
{"input":"SoldAs(thickAsTheives, hardCover) ∧ SoldAs(thickAsTheives, softCover)","output":"Thick as Thieves was sold both as a hardcover and an e-book."}
{"input":"MeeGoBased(weTab) ∧ TabletComputer(weTab)","output":"WeTab is a MeeGo-based tablet computer."}
{"input":"∀x (AnnouncedBy(weTab, neofonie))","output":"WeTab was announced by Neofonie."}
{"input":"German(neofonie) ∧ Producer(neofonie)","output":"Neofonie is a German producer."}
{"input":"∀x (German(x) → LiveIn(x, german) ⊕ LiveAbroad(x))","output":"Germans live in Germany or abroad. "}
{"input":"∃x ∃y (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis) ∧ GoodAt(x, math) ∧ (¬(x=y)) ∧ EmployeeIn(y, jamesSTown) ∧ WorkIn(y, businessAnalysis) ∧ GoodAt(y, math))","output":"Some employees in James's town who work in business analysis are good at math. "}
{"input":"∀x ((EmployeeIn(x, jamesSTown) ∧ WorkIn(x, businessAnalysis)) → WorkFor(x, thisCompany))","output":"All of the employees in James's town who work in business analysis are working for this company. "}
{"input":"∀x ((EmployeeIn(x, jamesSTown) ∧ WorkFor(x, thisCompany)) → ¬From(x, china))","output":"None of the employees in James's town who work for this company are from China. "}
{"input":"∀x (EmployeeIn(x, jamesSTown) ∧ WorkIn(x, softwareEngineering) → From(x, china))","output":"All of the employees in James's town working in software engineering are from China. "}
{"input":"EmployeeIn(leif, jamesSTown) ∧ WorkIn(leif, softwareEngineering)","output":"Leif is an employee in James's town, and he is working in software engineering.  "}
{"input":"Provide(party, strawberry) ∧ Provide(party, orange) ∧ Provide(party, blueberry) ∧ Provide(party, grape) ∧ Provide(party, cherry) ","output":"The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry."}
{"input":"∀x (LowestWeightRemainingAt(x, endOfParty) → MostPopular(x)) ","output":"If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit."}
{"input":"LowestWeightRemainingAt(strawberries, endOfParty)","output":"At the end of the party, strawberries had the lowest remaining weight."}
{"input":"LowerWeightAt(blueberry, cherry, endOfParty)","output":"At the end of the party, the number of leftover blueberries was lower than that of cherries."}
{"input":"Eat(benjamin, orange) ∧ Eat(benjamin, grape) ∧ ¬Eat(benjamin, blueberry) ∧ ¬Eat(benjamin, cherry) ∧ ¬Eat(benjamin, strawberry)","output":"Benjamin only ate oranges and grapes at the party."}
{"input":"∀x (AttendInPerson(x) → Registered(x))","output":"All students who attend in person have registered for the conference. "}
{"input":"∀x (Attend(x) → (AttendInPerson(x) ⊕ AttendRemotely(x)))","output":"Students either attend the conference in person or remotely. "}
{"input":"∀x ((Attend(x) ∧ FromChina(x)) → ¬AttendRemotely(x))","output":"No students from China attend the conference remotely. "}
{"input":"Attend(james) ∧ (¬AttendRemotely(james))","output":"James attends the conference, but he does not attend the conference remotely."}
{"input":"FromChina(jack) ∧ Attend(jack)","output":"Jack attends the conference, and he is a student from China."}
{"input":"PoliticalStrategist(davidHaivri)","output":"David Ha'ivri is a political strategist. "}
{"input":"∀x ∃y (BornInIsrael(x) ∧ ParentOf(y, x) ∧ Israeli(y) → Israeli(x))","output":"If you are born in Israel to at least one Israeli parent, you receive Israeli citizenship at birth. "}
{"input":"∃x (EmigratedTo(davidHaivri, america) ∧ BornInIsrael(davidHaivri) ∧ ParentOf(davidHaivri, x) ∧ Israeli(x))","output":"David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. "}
{"input":"∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronMunicipalCouncil))","output":"Several Zionist leaders have been elected to the Shomron Regional Municipal council. "}
{"input":"ZionstLeader(davidHaivri)","output":"David Ha'ivri is a Zionist leader."}
{"input":"Has(mary, flu)","output":"Mary has the flu."}
{"input":"∀x (Has(x, flu) → Has(x, influenza))","output":"If someone has the flu, then they have influenza."}
{"input":"¬Has(susan, influenza)","output":"Susan doesn't have influenza."}
{"input":"British(james) ∧ Lawyer(james)","output":"James Cocks was a British lawyer."}
{"input":"Whig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)","output":"James Cocks was a Whig politician who sat in the House of Commons."}
{"input":"∀x (British(x) → European(x))","output":"A British is a European."}
{"input":"∀x (Lawyer(x) → FamiliarWithLaws(x))","output":"Any lawyer is familiar with laws."}
{"input":"∃x ∃y (Whig(x) ∧ SpeakFrench(x)) ∧ (¬(x=y)) ∧ (Whig(y) ∧ SpeakFrench(y))","output":"Some Whigs speak French."}
{"input":"Novel(beastsOfPrey) → (Fantasy(beastsOfPrey) ∨ ScienceFiction(beastsOfPrey))","output":"Beasts of Prey is a fantasy novel or a science fiction novel, or both."}
{"input":"∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))","output":"Science fiction novels are not about mythological creatures"}
{"input":"About(beastsOfPrey, shetani) ∧ Creature(shetani)","output":"Beasts of Prey Is about a creature known as the Shetani."}
{"input":"Mythological(shetani)","output":"Shetanis are mythological."}
{"input":"Surname(nameODell) ∧ From(nameODell, oDellBedfordshire)","output":"Odell is an English surname originating in Odell, Bedfordshire."}
{"input":"MistakenSpellingOf(nameO'Dell, nameODell) ∧ (∃x∃y(Family(x) ∧ Named(x, nameO'Dell) ∧ (¬(x=y)) ∧ Family(y) ∧ Named(y, nameO'Dell))","output":"In some families, Odell is spelled O'Dell in a mistaken Irish adaptation."}
{"input":"Named(amyODell, nameODell) ∧ NotablePerson(amyODell) ∧ Named(jackODell, nameODell) ∧ NotablePerson(jackODell) ∧ Named(matsODell, nameODell) ∧ NotablePerson(matsODell)","output":"Notable people with surnames include Amy Odell, Jack Odell, and Mats Odell."}
{"input":"British(amyODell) ∧ Singer(amyODell) ∧ SongWriter(amyODell)","output":"Amy Odell is a British singer-songwriter."}
{"input":"English(jackODell) ∧ ToyInventor(jackODell)","output":"Jack Odell is an English toy inventor."}
{"input":"∀x (GoByTrain(x) → ¬LoseTime(x))","output":"If you go somewhere by train, you will not lose time."}
{"input":"∀x((GoByCar(x) ∧ Meet(x, trafficJam)) → LoseTime(x))","output":"If you go somewhere by car and meet a traffic jam, you will lose time."}
{"input":"∀x (LoseTime(x) → LateForWork(x))","output":"If you lose time, you will be late for work."}
{"input":"FromAndTo(newHaven, newYork) ∧ (GoByTrain(mary) ⊕ GoByCar(mary))","output":"Mary can get from New Haven to New York City either by train or car."}
{"input":"LateForWork(mary)","output":"Mary is late for work."}
{"input":"∀x (Hungry(x) → Uncomfortable(x))","output":"If a person is hungry, the person is uncomfortable."}
{"input":"∀x (Uncomfortable(x) → ¬Happy(x))","output":"If a person is uncomfortable, the person is unhappy."}
{"input":"∀x (TippedEmployee(x) → ¬EntitledTo(x, federalMinimumWage))","output":"Tipped employees are not entitled to be paid the federal minimum wage by their employees. "}
{"input":"∀x (WhiteCollarWorker(x) → EntitledTo(x, federalMinimumWage))","output":"If a person is a white-collar worker, they are entitled to be paid the federal minimum wage by their employees. "}
{"input":"∀x (Lawyer(x) → WhiteCollarWorker(x))","output":"All lawyers are white-collar workers."}
{"input":"∀x (Advocate(x) → Lawyer(x))","output":"Every advocate is a lawyer."}
{"input":"¬(Lawyer(mary) ⊕ TippedEmployee(mary))","output":"Mary is not a lawyer or a tipped employee."}
{"input":"BornIn(asaHoffmann, newYorkCity)","output":"Asa Hoffmann was born in New York City."}
{"input":"LiveIn(asaHoffmann, manhattan)","output":"Asa Hoffman lives in Manhattan."}
{"input":"ChessPlayer(asaHoffmann)","output":"Asa Hoffman is a chess player."}
{"input":"∃x ∃y (ChessPlayer(x) ∧ GrandMaster(x) ∧ (¬(x=y)) ∧ ChessPlayer(y) ∧ GrandMaster(y))","output":"Some chess players are grandmasters."}
{"input":"∀x ((BornIn(x, newYorkCity) ∧ LiveIn(x, newYorkCity)) → NewYorker(x))","output":"People born and living in New York City are New Yorkers."}
{"input":"∀x (LiveIn(x, manhattan) → LiveIn(x, newYorkCity))","output":"People living in Manhattan live in New York City."}
{"input":"∃x (Apply(x, schengenVisa) → Get(x, schengenVisa))","output":"Some of those who apply for a Schengen visa get it."}
{"input":"∀x (Apply(x, schengenVisa) → Provide(x, financialGuarantees))","output":"To apply for a Schengen Visa, you need to provide financial guarantees."}
{"input":"∀x (Provide(x, financialGuarantees) → Request(x, documentsFromBank))","output":"If you need to provide financial guarantees, you must request documents from the bank."}
{"input":"∀x (Request(x, documentsFromBank) → ¬Close(x, bankAccount))","output":"Do not close your bank account if you request documents from the bank."}
{"input":"Close(philip, bankAccount)","output":"Philip closed his bank account."}
{"input":"∃x ∃y (Fear(x) ∧ Anxiety(y) ∧ LeadTo(x, y) ∧ ¬(x=y))","output":"Some fears lead to anxiety."}
{"input":"∃x ∃y (Anxiety(x) ∧ Terror(y) ∧ LeadTo(x, y))","output":"Some anxiety leads to terror."}
{"input":"∀x (GreatLake(x) → Superior(x) ⊕ Michigan(x) ⊕ Huron(x) ⊕ Erie(x) ⊕ Ontario(x))","output":"The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario."}
{"input":"∀x (Erie (x) ∧ MajorSettlement(x) → In(x, nY) ∨ In(x, pA) ∨ In(x, oH) ∨ In(x, mI))","output":"Some major settlements of Lake Erie are in NY, PA, OH, and MI."}
{"input":"StateOf(nY, uS) ∧ StateOf(pA, uS) ∧ StateOf(oH, uS) ∧ StateOf(mI, uS)","output":"NY, PA, OH, and MI are states in the US."}
{"input":"StateOf(oN, canada)","output":"ON is a state of Canada."}
{"input":"∃x (Huron(x) ∧ MajorSettlement(x) ∧ In(x, oN))","output":"There is a major settlement of Lake Huron in ON. "}
{"input":"∀x ∀y (StateOf(x, y) → In(x, y))","output":"All states are in their country."}
{"input":"In(us, northAmerica)","output":"The US is in North America."}
{"input":"∀x (GreatLake(x) → FormAtEndOf(x, lastGlacialPeriod))","output":"The Great Lakes began to form at the end of the Last Glacial Period."}
{"input":"∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))","output":"All professional soccer defenders are professional soccer players."}
{"input":"∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬(Professional(x) ∧ BasketballPlayer(x)))","output":"No professional soccer players are professional basketball players."}
{"input":"∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))","output":"All professional centerbacks are professional soccer defenders."}
{"input":"∀x (NBAPlayer(x) → (Professional(x) ∧ BasketballPlayer(x)))","output":"All NBA players are professional basketball players."}
{"input":"NBAPlayer(stephenCurry)","output":"Stephen Curry is an NBA player."}
{"input":"Proposed(justinKruger, naiveCynicism) ∧ ∃y (colleagueOfJustinKruger(y) ∧ Proposed(y, naiveCynicism))","output":"Naive cynicism was proposed by Justin Kruger and a colleague."}
{"input":"Colleagues(thomasGilovich, justinKruger)","output":"Thomas Gilovich is a colleague of Justin Kruger. "}
{"input":"PhilosophyOfMind(naiveCynicism)","output":"Naive cynicism is a philosophy of mind."}
{"input":"AwardedTo(turingAward, donaldKnuth) ∧ AwardedTo(turingAward, marvinMinsky) ∧ AwardedTo(turingAward, richardHamming) ∧ AwardedTo(turingAward, johnMccarthy)","output":"The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming, and John McCarthy. "}
{"input":"ContributedTo(donaldKnuth, analysisOfAlgorithms)","output":"Donald Knuth made contributions to the analysis of algorithms."}
{"input":"ContributedTo(marvinMinsky, artificialIntelligence)","output":"Marvin Minsky is recognized for his contributions to the field of artificial intelligence."}
{"input":"ContributedTo(richardHamming, numericalMethods)","output":"Richard Hamming researched numerical methods."}
{"input":"ContributedTo(johnMccarthy, artificialIntelligence)","output":"John McCarthy made contributions to the field of artificial intelligence. "}
{"input":"∀x ((LeetcodeProblems(x) ∧ Easy(x)) → ¬HaveAnACRateLowerThan(x, percent20))","output":"None of the easy Leetcode problems have an AC rate lower than 20 percent. "}
{"input":"∀x ((LeetcodeProblems(x) ∧ RecommendedTo(x, novices)) → Easy(x))","output":"All Leetcode problems recommended to novices are easy. "}
{"input":"∀x (LeetcodeProblems(x) → HaveAnACRateLowerThan(x, percent20) ⊕ StarredByMoreThan(x, num1000))","output":"Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. "}
{"input":"∀x ((LeetcodeProblems(x) ∧ Hard(x)) → StarredByMoreThan(x, num1000))","output":"All hard Leetcode problems are starred by more than 1,000 users. "}
{"input":"∀x ((LeetcodeProblems(x) ∧ PublishedAfter(x, yr2022)) → (¬StarredByMoreThan(x, num1000)))","output":"No Leetcode problems published after 2022 are starred by more than 1,000 users. "}
{"input":"¬(RecommendedTo(twosum, novices) ∧ Hard(twosum)) ∧ LeetcodeProblems(twosum)","output":"'2Sum' is not both hard and also recommended to novices."}
{"input":"¬(StarredByMoreThan(foursum, num1000) ⊕ PublishedAfter(foursum, yr2022)) ∧ LeetcodeProblems(twosum)","output":"'4Sum' is either starred by more than 1,000 users and published after 2022, or it is neither. "}
{"input":"Song(showYourLove) ∧ RecordedBy(showYourLove, bToB4u) ∧ SouthKorean(bToB4u) ∧ BoyBand(bToB4u)","output":"Show Your Love is a song recorded by the South Korean boy band BtoB 4u."}
{"input":"ExtendedPlay(inside) ∧ LeadSingleOf(showYourLove, inside)","output":"The lead single of the extended play Inside is Show Your Love."}
{"input":"Contains(showYourLove, hopefulMessage)","output":"Show Your Love contains a hopeful message."}
{"input":"Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showYourLove)","output":"BtoB 4u member Hyunsik wrote Show Your Love."}
{"input":"Have(showYourLove, musicVideo)","output":"There is a music video for Show Your Love."}
{"input":"∀x (Table(x) → Round(x))","output":"All tables are round."}
{"input":"∃x ∃y (Furniture(x) ∧ Furniture(y) ∧ Table(x) ∧ Table(y) ∧ ¬(x=y))","output":"Some pieces of furniture are tables."}
{"input":"∀x (JuvenileDelinquent(x) → Commited(x, crime))","output":"All juvenile delinquents have committed a crime."}
{"input":"∃x ∃y (JuvenileDelinquent(x) ∧ JuvenileDelinquent(y) ∧ ProductOf(x, brokenHome) ∧ ProductOf(y, brokenHome) ∧ ¬(x=y))","output":"Some juvenile delinquents are products of broken homes."}
{"input":"∀x (MindReading(x) ∧ (BrainReading(x) ⊕ BrainDecoding(x)))","output":"All mind-reading is either brain reading or brain decoding. "}
{"input":"∀x ((MindReading(x) ∧ BrainDecoding(x)) → ExtractingFrom(x, information, bOLDSignals))","output":"All brain decoding that is mind-reading is extracting information from BOLD signals."}
{"input":"∀x ((MindReading(x) ∧ ExtractingFrom(x, information, bOLDSignals)) → Uses(x, statisticalPatternAnalysis))","output":"No studies that are mind-reading and extract information from BOLD signals are without statistical pattern analysis. "}
{"input":"∀x (NovelWriting(x) → ¬Uses(x, statisticalPatternAnalysis)) ","output":"Writing a novel is without statistical pattern analysis."}
{"input":"MindReading(multivoxelPatternAnalysis) ∧ (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis)) →  (¬Uses(multivoxelPatternAnalysis, statisticalPatternAnalysis) ∧ (¬BrainDecoding(multivoxelPatternAnalysis)))","output":"If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding."}
{"input":"MindReading(multivoxelPatternAnalysis) ","output":"Multivoxel (pattern) analysis is a type of mind-reading."}
{"input":"∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))","output":"If you have room for dessert, you have room for broccoli."}
{"input":"∀x (AtLuisParty(x) → RoomFor(x, dessert))","output":"Everyone at Luis's dinner party has room for dessert, including Luis."}
{"input":"¬RoomFor(mauricia, broccoli)","output":"Mauricia does not have room for broccoli."}
{"input":"AtLuisParty(allison) ∧ FirstDinnerPartyFor(luisparty, allison) ","output":"Luis's dinner party is the first ever dinner party that Allison has attended."}
{"input":"RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)","output":"Gustave has room for both broccoli and asparagus."}
{"input":"Vegetable(broccoli) ∧ Vegetable(asparagus)","output":"Broccoli and asparagus are both vegetables."}
{"input":"American(imagineDragon) ∧ RockBand(imagineDragon)","output":"Imagine Dragons are an American pop-rock band."}
{"input":"LeadSinger(imagineDragon, dan)","output":"The lead singer of Imagine Dragons is Dan."}
{"input":"SongWriter(dan)","output":"Dan is also a songwriter."}
{"input":"∀x ∀y (LeadSinger(x, y) → Singer(y))","output":"All lead singers are singers."}
{"input":"∀x (Singer(x) → Musician(x))","output":"All singers are musicians."}
{"input":"PopularSingle(imagineDragon, demons)","output":"Demons is one of the most popular singles of Imagine Dragons."}
{"input":"∃x ∃y (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x)) ∧ (¬(x=y)) ∧ (PopularSingle(imagineDragon, y) ∧ BillboardHot100(y))","output":"Some singles of Imagine Dragons have been on Billboard Hot 100."}
{"input":"∀x (Philosopher(x) → Reason(x))","output":"All philosophers reason. "}
{"input":"∃x (Sophist(x) ∧ Reason(x))","output":"Some sophists reason. "}
{"input":"∀x (Reason(x) → CanDistinguishFrom(x, truth, falsehood))","output":"All who can reason can distinguish truth from falsehood."}
{"input":"∀x (CanDistinguishFrom(x, truth, falsehood) → ¬MorallyPerfect(x))","output":"Nobody who can distinguish truth from falsehood is morally perfect.  "}
{"input":"MorallyPerfect(theisticGod)","output":"The theistic God is morally perfect."}
{"input":"CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)","output":"Common utilities include water, electricity, gas, heating, sewer, trash, and recycling."}
{"input":"∃x (Apartment(x) ∧ Cover(x, water) ∧ Cover(x, electricity))","output":"Many apartment rents cover the cost of water and electricity."}
{"input":"∀x (Apartment(x) ∧ LiveIn(susan, x) ∧ Cover(x, water) ∧ Cover(x, electricity) ∧ Cover(x, gas) ∧ Cover(x, heating))","output":"Susan lives in an apartment where the rent covers all utilities."}
{"input":"∀x (Apartment(x) ∧ LiveIn(ava, x) ∧ ¬Cover(x, water) ∧ ¬Cover(x, electricity) ∧ ¬Cover(x, gas) ∧ ¬Cover(x, heating))","output":"The rent of the apartment where Ava lives does not cover any utility expenses."}
{"input":"∀x (Apartment(x) ∧ LiveIn(noah, x) ∧ ¬Cover(x, heating))","output":"Noah lives in an apartment where the rent does not cover heating."}
{"input":"∀x (Clothes(x) → Product(x))","output":"All clothes are products. "}
{"input":"∀x (Product(x) → ¬Perfect(x))","output":"No products are perfect. "}
{"input":"∀x (Dress(x) → Clothes(x))","output":"All dresses are clothes."}
{"input":"∀x (Skirt(x) → Dress(x))","output":"All skirts are dresses. "}
{"input":"Clothes(fabricBundle) → Perfect(fabricBundle) ∧ Dress(fabricBundle)","output":"If the fabric bundle is a piece of clothing, then the fabric bundle is a perfect dress."}
{"input":"∀x (Pet(x) → Animal(x))","output":"All pets are animals."}
{"input":"∀x (Pet(x) → (Dog(x) ⊕ Cat(x)))","output":"Pets can be either a dog or a cat."}
{"input":"∀x ∀y ((Pet(y) ∧ OwnedBy(x,y)) → Cares(x, y))","output":"If a person has a pet, they care for that pet. "}
{"input":"∃x ∃y (Cat(x) ∧ Naughty(x) ∧ (¬(x=y)) ∧ Dog(y) ∧ Naughty(y))","output":"Dogs and cats can be naughty. "}
{"input":"∀x ∀y ((Pet(x) ∧ Naughty(x) ∧ OwnedBy(x,y)) → ¬Liked(x, y))","output":"Pets who are naughty are not liked as much. "}
{"input":"OwnedBy(leo, charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)","output":"Charlie has a naughty pet dog named Leo. "}
{"input":"∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))","output":"Surprises are either fun or dreadful."}
{"input":"∀x (Scare(x) → Surprise(x))","output":"All scares are surprises."}
{"input":"∀x ((Book(x) ∧ WrittenBy(x, cixinLiu)) → ∃y(MoreThan(y, oneMillion) ∧ Sold(x,y)))","output":"All books written by Cixin Liu have sold more than 1 million copies. "}
{"input":"∃x (Won(x, hugoAward) ∧ Book(x) ∧ WrittenBy(x, cixinLiu))","output":"Some books that have won the Hugo Award were written by Cixin Liu."}
{"input":"∀x ((Book(x) ∧ AboutFuture(x)) → FowardLooking(x))","output":"All books about the future are forward-looking."}
{"input":"Book(threeBodyProblem) ∧ ∃y(MoreThan(y, oneMillion) ∧ Sold(threeBodyProblem,y))","output":"The book Three-Body Problem has sold more than 1 million copies."}
{"input":"AboutFuture(threeBodyProblem)","output":"The Three-Body Problem is about the future."}
{"input":"∃x (LateNightPerson(x) ∧ EarlyMorningPerson(x))","output":"Some people are both late-night and early-morning people."}
{"input":"∀x (EarlyMorningPerson(x) → Have(x, earlyMorningHabit))","output":"If a person is an earl- morning person, they have early-morning habits."}
{"input":"∀x (Have(x, earlyMorningHabit) → GetUpEarly(x))","output":"Everyone who has early-morning habits gets up early."}
{"input":"∀x (GetUpEarly(x) → CatchTheSunrise(x))","output":"Everyone who gets up early catches the sunrise."}
{"input":"¬CatchTheSunrise(james)","output":"James doesn't catch the sunrise."}
{"input":"∀x (Dog(x) → ¬OnRoof(x)))","output":"There is no dog on the roof."}
{"input":"∀x ∃y ((Dog(x) ∧ OnRoof(x)) → GoWrong(y))","output":"If there is a dog on the roof, something went wrong."}
{"input":"∀x (Elephantopus(x) → (Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily)))","output":"Elephantopus is a genus of perennial plants in the daisy family."}
{"input":"∃x ∃y ∃z(Elephantopus(x) ∧ In(x,africa) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ In(y, southernasia) ∧ (¬(x=z)) ∧ (¬(y=z)) ∧ Elephantopus(z) ∧ In(z, australia))","output":"Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas."}
{"input":"∃x ∃y (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates) ∧ (¬(x=y)) ∧ Elephantopus(y) ∧ NativeTo(y, southeasternunitedstates))","output":"Several species of Elephantopus are native to the southeastern United States."}
{"input":"∀x (ElephantopusScaber(x) → TraditionalMedicine(x))","output":"Elephantopus scaber is a traditional medicine."}
{"input":"∀x (YaleDormitory(x) → LocatedOn(x, yaleCampus))","output":"All Yale dormitories are located on the Yale campus. "}
{"input":"∀x ((YaleBuildings(x) ∧ ManagedBy(x, yaleHousing)) → YaleDormitory(x))","output":"All Yale buildings managed by Yale Housing are dormitories. "}
{"input":"∀x ((YaleBuildings(x) ∧ OperatedBy(x, yaleHousingStaff)) → ManagedBy(x, yaleHousing))","output":"All Yale buildings operated by Yale Housing staff are managed by Yale Housing. "}
{"input":"∀x ((YaleBuildings(x) ∧ OpenToStudents(x)) → (¬∃y(Before(y, yr1701) ∧ Established(x, y))))","output":"None of the Yale buildings open to students were built before 1701. "}
{"input":"∀x ((YaleBuildings(x) ∧ LocatedOn(x, yaleCampus)) → OpenToStudents(x))","output":"All Yale buildings located on the Yale campus are open to students. "}
{"input":"YaleBuildings(harkness) ∧ (OperatedBy(x, harkness) ⊕ LocatedOn(harkness, yaleCampus))","output":"Harkness is either a Yale building operated by Yale Housing staff, or it is located on York Street. "}
{"input":"∀x (InUrbanArea(x) → ¬MansionHouse(x))","output":"There are no mansion houses in an urban area."}
{"input":"∀x (Skyscraper(x) → InUrbanArea(x))","output":"All skyscrapers are in urban areas."}
{"input":"∀x (CreepyHauntedHouse(x) → MansionHouse(x))","output":"Every creepy haunted house is a mansion house."}
{"input":"∀x (TerrifyingBuilding(x) ∧ OnHalloween(x) → CreepyHauntedHouse(x))","output":"Every terrifying building on Halloween is a creepy haunted house."}
{"input":"CreepyHauntedHouse(laLaurieHouse) ∨ TerrifyingBuilding(laLaurieHouse) ∧ OnHalloween(laLaurieHouse)","output":"The LaLaurie House is a creepy haunted house or a terrifying building on Halloween."}
{"input":"NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)","output":"Phuoc Binh national park is a national park in Vietnam. "}
{"input":"∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → NatureReserve(x))","output":"Any national park in Vietnam is classified as a nature reserve. "}
{"input":"∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))","output":"There is a national park in Vietnam classified as a UNESCO World Heritage Site."}
{"input":"∀x ((NationalPark(x) ∧ Locatedin(x, vietnam)) → (Mangedby(x, ministryofAgriculture) ⊕ Managedby(x, peoplesCommittee)))","output":"All national parks in Vietnam are either managed by the Ministry of Agriculture or managed by the People's Committee. "}
{"input":"¬Mangedby(phuocBinh, ministryofAgriculture)","output":"Phuoc Binh is not managed by the Ministry of Agriculture."}
{"input":"∀x (GreyhoundRacing(x) → ∃y (CompetitiveSport(x) ∧ Greyhound(y) ∧ BetOn(spectators, y, x)))","output":"Greyhound racing is a competitive sport where spectators bet on greyhounds."}
{"input":"∀x (GreyhoundRacing(x) → Coursing(x))","output":"Greyhound racing involves coursing."}
{"input":"∃x ∃y (CompetitiveSport(x) ∧ BetOn(spectators, y, x) ∧ Banned(x))","output":"Some competitive sports where spectators bet on things are banned."}
{"input":"∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ BetOn(spectators, y, x) ∧ GreyHound(z) ∧ PursuedBy(y, z))","output":"Coursing involves spectators betting on a hare being pursued by greyhounds."}
{"input":"∃x ∀y (Hare(x) ∧ BetOn(spectators, x, y) → SmallGame(y))","output":"Spectators betting on a hare is a small game."}
{"input":"∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ BetOn(spectators, y, x) → Banned(x))","output":"If a competitive sport involves spectators betting on small games, then it is banned."}
{"input":"∀x (SoccerPlayer(x) ∧ Receive(x, twoYellowCard) → EjectFromRestOfGame(x))","output":"If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game."}
{"input":"∀x (SoccerPlayer(x) ∧ Receive(x, oneRedCard)) → EjectFromRestOfGame(x))   ","output":"If a soccer player receives one red card in one game, this player will be ejected from the rest of the game."}
{"input":"SoccerPlayer(henry)","output":"Henry is a soccer player."}
{"input":"Receive(henry, oneYellowCard) ∧ Receive(x, oneRedCard)","output":"In one game, Henry receives one yellow card and one red card."}
{"input":"∀x (Tree(x) → Plant(x))","output":"Trees are plants. "}
{"input":"∃x ∃y (Living(x) ∧ Living(y) ∧ Tree(x) ∧ Tree(y) ∧ ¬(x=y))","output":"Some living things are trees."}
{"input":"","output":"Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl."}
{"input":"GivenName(nameDagfinn) ∧ Named(dagfinnAarskog, nameDagfinn) ∧ NotablePerson(dagfinnAarskog) ∧ Named(dagfinnBakke, nameDagfinn) ∧ NotablePerson(dagfinnBakke)  ∧ Named(dagfinnDahl, nameDagfinn) ∧ NotablePerson(dagfinnDahl)","output":"Dagfinn Aarskog is a Norwegian physician."}
{"input":"Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)","output":"Dagfinn Dahl is a Norwegian barrister."}
{"input":"∀x (Movie(x) ∧ Popular(x) → ∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x) ∧ ¬(y=z)))","output":"If a movie is popular, some people enjoy watching it."}
{"input":"∀x (∃y ∃z (Person(y) ∧ EnjoyWatching(y, x) ∧ Person(z) ∧ EnjoyWatching(z, x)) → Attract(x, attention))","output":"All things that some people enjoy attract attention."}
{"input":"¬(∃x (LanguageModel(x) ∧ Giant(x) ∧ ¬GoodPerformance(x)))","output":"It is not true that some giant language models do not have good performance. "}
{"input":"∀x ∃y ∃z (LanguageModel(x) ∧ GoodPerformance(x) → ¬(x=y) ∧ Researcher(y) ∧ UsedBy(x, y) ∧ Researcher(z) ∧ UsedBy(x, z))","output":"All language models with good performance are used by some researchers."}
{"input":"∀x ∃y ∃z (LanguageModel(x) ∧ ¬(x=y) ∧ Researcher(y) ∧ UsedBy(x, y) ∧ Researcher(z) ∧ UsedBy(x, z) → Popular(x))","output":"If a language model is used by some researchers, it is popular. "}
{"input":"(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt-3) ∧ Giant(gpt-3)).","output":"If BERT is a giant language model, then GPT-3 is also a giant language model. "}
{"input":"LanguageModel(bert) ∧ Giant(bert)","output":"BERT is a giant language model. "}
{"input":"Scottish(stJohnstone) ∧ Team(stJohnstone)","output":"St Johnstone is a Scottish team."}
{"input":"PartOf(stJohnstone, scottishPremiership) ∧ League(scottishPremiership)","output":"St Johnstone is part of the Scottish Premiership league."}
{"input":"∀x ∀y (Team(x) ∧ League(y) ∧ PartOf(x, y) → Joined(x, y))","output":"If a team is part of the league, it has joined the league."}
{"input":"¬(misnk=stJohnstone)","output":"St Johnstone and Minsk are different teams."}
{"input":"∀x ∀y (¬(x=y) → WonAgainst(x, y) ⊕ WonAgainst(y, x))","output":"For two teams, either one team wins, or the other team wins."}
{"input":"WonAgainst(minsk, stJohnstone)","output":"Minsk won against St Johnstone."}
{"input":"∀x (Plane(x) ∧ Boeing737(x) → (¬∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y)))","output":"No Boeing-737 plane has more than 300 seats. "}
{"input":"∀x (Plane(x) ∧ AcquiredBy(x, delta) → Boeing737(x))","output":"All of the planes acquired by Delta in this batch are Boeing-737. "}
{"input":"∀x (Plane(x) → ((∃y(GreaterThan(y, num300) ∧ EquippedWithSeats(x,y))) ⊕ (∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y))))","output":"Planes either have more than 300 seats or have a capacity of 100 passengers. "}
{"input":"∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ScheduledFor(x, shortdistanceflight))","output":"All planes with a capacity of 100 passengers are scheduled for a short-distance flight. "}
{"input":"∀x (Plane(x) ∧ ∃y(Equals(y, num100) ∧ EquippedWithSeats(x,y)) → ∃z(Before(z, yr2010) ∧ Produced(x, z))","output":"All planes with a capacity of 100 passengers are produced before 2010. "}
{"input":"(Boeing737(jake32) ∧ Plane(jake32)) ⊕ (AcquiredByDeltaInThisBatch(jake32) ∧ Plane(jake32))","output":"Jake32 is either a Boeing-737 plane or a plane acquired by Delta in this batch."}
{"input":"¬((Boeing737(t10) ∧ Plane(t10)) ⊕ (AcquiredByDeltaInThisBatch(t10) ∧ Plane(t10)))","output":"T10 is either both a Boeing-737 plane and acquired by Delta in this batch, or it is neither."}
{"input":"OwnedBy(sAT, collegeBoard) ∧ DevelopedBy(sAT, collegeBoard) ∧ ¬(∃y (¬(y=collegeBoard) ∧ (OwnedBy(sAT, y) ∨ DevelopedBy(sAT, y)))","output":"The SAT test is wholly owned and developed by the College Board."}
{"input":"IntendedToAssess(sAT, studentsReadinessForCollege)","output":"The SAT test is intended to assess students' readiness for college."}
{"input":"OriginallyDesignedToBeAlignedWith(sAT, highSchoolCurricula)","output":"The SAT was originally designed not to be aligned with high school curricula. "}
{"input":"AdjustmentMadeIn(sAT, 2016, toAlignWithHighSchoolCurriculum)","output":"Several adjustments were made to the version of the SAT introduced in 2016 to align with the high school curriculum."}
{"input":"BornIn(rafaNadal, mallorca)","output":"Rafa Nadal was born in Mallorca."}
{"input":"ProfessionalTennisPlayer(rafaNadal)","output":"Rafa Nadal is a professional tennis player."}
{"input":"HighWinRatio(rafaNadal)","output":"Nadal's win ratio is high."}
{"input":"∀x ((ProfessionalTennisPlayer(x) ∧ HighWinRatio(x)) → InBig3(x))","output":"All players in the Big 3 are professionals who have a high win ratio."}
{"input":"∀x (SandwichCookie(x) → ¬Healthy(x))","output":"No sandwich cookies are healthy."}
{"input":"∀x (Oreo(x) → SandwichCookie(x))","output":"Oreos are sandwich cookies."}
{"input":"∀x (Animal(x) → ¬Plant(x))","output":"No animals are plants."}
{"input":"∀x (Human(x) → Animal(x))","output":"All humans are animals."}
{"input":"∀x (Pupil(x) → Human(x))","output":"All pupils are humans."}
{"input":"¬(Human(bailey) ⊕ Flower(bailey))","output":"Bailey is either both a human and a flower or neither a human nor a flower."}
{"input":"∀x (Shoe(x) → ¬Food(x))","output":"Shoes are not food."}
{"input":"∀x (Slipper(x) → Shoe(x))","output":"All slippers are shoes."}
{"input":"∀x (DonatedTo(x, homelessCharity) → Food(x) ⊕ Clothes(x))","output":"Any object donated to the homeless charity is either clothes or food."}
{"input":"∀x (Wearable(x) → ¬Edible(x))","output":"Wearable things are not edible."}
{"input":"∀x (Clothes(x) → Wearable(x))","output":"All clothes are wearable. "}
{"input":"DonatedTo(watch, homelessCharify)","output":"The watch is donated to the homeless charify."}
{"input":"¬(Edible(watch) ∧ Clothes(watch)) → ¬(Edible(watch) ⊕ Clothes(watch))","output":"If the watch is not both edible and a piece of clothing, then the watch is either both edible and a piece of clothing or the watch is neither of them."}
{"input":"∀x ((DoesOlympicSport(x) ∧ GoesToOlympicGames(x)) → Olympian(x))","output":"An Olympian is a person who trains for an Olympic sport and goes to the Olympics."}
{"input":"DoesOlympicSport(carlosReyes)","output":"Carlos Reyes trains for an Olympic sport."}
{"input":"GoesToOlympicGames(carlosReyes)","output":"Carlos Reyes went to the Olympics."}
{"input":"WelterWeight(carlosReyes)","output":"Carlos Reyes is a welterweight."}
{"input":"∀x (WelterWeight(x) → ¬ HeavyWeight(x))","output":"Heavy weights are not welterweights."}
{"input":"∀x (HaveIn(x, aLotOfMusicDecoration, room) → ¬MoveOutEasily(x))","output":"If people have a lot of music decorations in their rooms, they cannot pack and move out of their rooms very easily."}
{"input":"∀x (Ambitious(x) → MoveOutEasily(x))","output":"If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily."}
{"input":"∀x (BigFanOfMusic(x) → MusicDecorations(x, room))","output":"If people are big fans of pop bands and singers, then they have a lot of music decorations in their room."}
{"input":"∀x (AttendFrequently(x, musicFestival) ∧ YoungTeenageGirl(x) → BigFanOfPopBand(x) ∧ BigFanOfPopSinger(x))","output":"All young teenage girls who attend music festival frequently are big fans of pop bands and singers."}
{"input":"Ambitious(sam) → BBigFanOfPopBand(sam) ∧ BigFanOfPopSinger(sam)","output":"If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers."}
{"input":"CargoShip(britta) ∧ Ship(britta) ∧ BuiltFor(britta, norwegians)","output":"Brita was a cargo ship built for Norwegians."}
{"input":"ImpressedIntoServiceBy(britta, germany)","output":"Brita was impressed into service by Germany."}
{"input":"∀x ∀y (Ship(x) ∧ ImpressedIntoServiceBy(x, y) → SeizedBy(x, y))","output":"Ships that have been impressed into service were seized by whoever impressed them into service."}
{"input":"SoldTo(britta, hongkong)","output":"The Britta was sold to Hong Kong."}
{"input":"American(quincyMcduffie) ∧ Professional(quincyMcduffie) ∧ WideReciever(quincyMcduffie) ∧ PlaysIn(quincyMcduffie, cFL)","output":"Quincy McDuffie is an American professional wide receiver in Canadian Football."}
{"input":"∀x ((∃y(CanCatch(x, y) ∧ Ball(y))) → GoodWideReceiver(x))","output":"People who can catch balls are good wide receivers. "}
{"input":"∃x ∃y (Football(x) ∧ CanCatch(quincymcduffie, x)) ∧ (¬(x=y) ∧ (Football(y) ∧ CanCatch(quincymcduffie, y))","output":"Quincy McDuffie can catch some footballs easily."}
{"input":"∀x (GoodWideReceiver(x) → Professional(x))","output":"Good wide receivers play professionally."}
{"input":"∀x (GoodWideReceiver(x) → (CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand)))","output":"Good wide receivers can catch with both their left and right hand."}
{"input":"∀x (Football(x) → Ball(x))","output":"All footballs are balls."}
{"input":"RailwayStation(boves) ∧ In(boves, france)","output":"Boves is a railway station located in France. "}
{"input":"Precede(longueau, boves)","output":"The preceding station of Boves is Longueau."}
{"input":"Precede(boves, dommartin)","output":"The preceding station of Dommartin is Boves."}
{"input":"In(france, europe)","output":"France is a European country."}
{"input":"SituatedOn(dommartin, pairsLille)","output":"Dommartin is situated on the Paris–Lille railway. "}
{"input":"∀x ∀y ∀z ((SituatedOn(x, z) ∧ (Precede(x, y) ∨ Precede(y, x)) → SituatedOn(y, z))","output":"Any two contiguous stations are on the same railway."}
{"input":"Serve(boves, hautsDeFrance)","output":"Boves is served by regional TER Hauts-de-France trains."}
{"input":"∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))","output":"If place A precedes place B and place B precedes place C, then place A precedes place C."}
{"input":"From(edwinSmith, newZealand) ∧ Rower(edwinSmith) ∧ From(edwinSmith, auckland)","output":"Edwin Smith was a New Zealand rower from Auckland."}
{"input":"edwinSmith=tedSmith","output":"Edwin Smith was also known as Ted Smith."}
{"input":"GoTo(edwinSmith, roseRoadPrimarySchool) ∧ LocatedIn(roseRoadPrimarySchool, greyLynn)","output":"Edwin Smith went to Rose Road Primary School, located in Grey Lynn."}
{"input":"Sergeant(edwinSmith) ∧ ServeWith(edwinSmith, newZealand24thBattalion) ∧ ServeIn(edwinSmith, italy) ∧ ServeIn(edwinSmith, egypt)","output":"Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt."}
{"input":"Buisness(broadwaySheetmetals) ∧ Run(edwinSmith, broadwaySheetmetals) ∧ Own(edwinSmith, broadwaySheetmetals) ∧ SheetmetalWorker(edwinsmith)","output":"Broadway Sheetmetals was a business run and owned by Edwin Smith, a sheet metal worker."}
{"input":"∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))","output":"A werewolf is a human that can turn into a wolf."}
{"input":"∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))","output":"A werewolf has been scratched or bitten by another werewolf."}
{"input":"∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)","output":"If someone has been scratched or bitten by some entity, they have been attacked by that entity."}
{"input":"Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ HeldIn(uFCFightNight, sweden)","output":"UFC Fight Night was a mixed martial arts event held in Sweden."}
{"input":"ScheduledToFight(sadollah, musoke,uFCFightNight)","output":"At UFC Fight Night, Sadollah was scheduled to fight Musoke."}
{"input":"Fight(sadollah, akiyama, uFCFightNight)","output":"Sadollah fought Akiyama at UFC Fight Night."}
{"input":"Fight(musoke, yakovlev, uFCFightNight)","output":"Musoke fought Yakovlev at UFC Fight Night."}
{"input":"InjuredAt(jung, uFCFightNight)","output":"Jung was injured at UFC Fight Night."}
{"input":"∀x (InjuredAt(x, uFCFightNight) → ¬FightIn(x, uFCFightNight))","output":"People injured at UFC Fight Night did not fight."}
{"input":"∀x (OnCounter(x) ∧ Drink(x) → Edible(x))","output":"All drinks on the counter are edible. "}
{"input":"∀x (OnCounter(x) ∧ Juice(x) → Drink(x))","output":"All juices on the counter are drinks. "}
{"input":"∀x (OrangeJuice(x) → Juice(x))","output":"Orange juice is a type of juice. "}
{"input":"∀x (OnCounter(x) → OrangeJuice(x) ⊕ AppleJuice(x))","output":"Everything on the counter is either orange juice or apple juice."}
{"input":"∀x (OnCounter(x) ∧ AppleJuice(x) → Sweet(x))","output":"All apple juices on the counter are sweet."}
{"input":"OnCounter(coke) ∧ (AppleJuice(coke) → Drink(coke))","output":"The coke is on the counter and if the coke is apple juice, then the coke is a drink."}
{"input":"¬AppleJuice(coke) → ¬Edible(coke)","output":"If the coke is not apple juice, then the coke is not edible."}
{"input":"TalentedPoet(lorca) ∧ Support(lorca, populists)","output":"Federico Garcia Lorca was a talented Spanish poet, and he supported the Popular Front."}
{"input":"∀x (Support(x, populists) → Opposed(nationalists, x))","output":"The Spanish Nationalists opposed anyone who supported the Popular Front"}
{"input":"∀x (TalentedPoet(x) → Popular(x))","output":"Talented poets are popular."}
{"input":"∀x ((Opposed(nationalists, x) ∧ Popular(x)) → Killed(nationalists, x))","output":"Spanish Nationalists killed anyone who they opposed and who was popular."}
{"input":"Support(daniel, populists) ∧ (¬Popular(daniel))","output":"Daniel supported the Popular Front but was not popular."}
{"input":"∀x (In(x, frannysFamily) ∧ (Drink(x, kombucha) ∨ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y))))))","output":"People in Franny's family drink kombucha every day or drink Coca-Cola or a Pepsi product."}
{"input":"∀x (In(x, frannysFamily) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))))","output":"If people in Franny's family drink Coca-Cola or a Pepsi product every day, then they grew up with extremely busy parents who did not have time to pack them lunch."}
{"input":"∀x (In(x, frannysFamily)) ∧ (∃y (Drink(x, cocaCola) ∨ (PepsiProduct(y) ∧ Drink(x, y)))) → HaveToVisitFrequently(x, dentist))","output":"If people in Franny's family drink Coca-Cola or another Pepsi product every day, then they have to visit the dentist frequently."}
{"input":"∀x (In(x, frannysFamily) ∧ (∃y ∃z (¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(x, y) ∧ GrowUpWith(x, z))) → ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y)))","output":"If people in Franny's family grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits."}
{"input":"∀x (In(x, frannysFamily) ∧ ∃y (Have(x, y) ∧ Erratic(y) ∧ Diverse(y) ∧ EatingHabit(y))) → ¬(ConsistentEverydayRoutine(x) ∧ StickTo(damon, solidSchedule)))","output":"If people in Franny's family have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule."}
{"input":"In(damon, frannysFamily)","output":"Damon is in Franny's family. "}
{"input":"¬((∃y ∃z(¬(y=z) ∧ BusyParent(y) ∧ BusyParent(z) ∧ ¬Pack(y, lunch) ∧ ¬Pack(z, lunch) ∧ GrowUpWith(damon, y) ∧ GrowUpWith(damon, z))) ⊕ (ConsistentEverydayRoutine(damon) ∧ StickTo(damon, solidSchedule)))","output":"Damon either both grow up with extremely busy parents who did not have time to pack her lunch and have consistent everyday routines and like sticking to a solid schedule, or Damon did neither."}
{"input":"∀x (SubscribedTo(x, aMCAList) → EligibleForThreeFreeMovies(x))","output":"If a customer subscribes to AMC A-List, then he\/she can watch 3 movies every week without any additional fees. "}
{"input":"∃x (CinemaEveryWeek(x))","output":"Some customers go to cinemas every week. "}
{"input":"∀x (Prefer(x, tVSeries) → ¬WatchTVIn(x, cinemas))","output":"Customers who prefer TV series will not watch TV series in cinemas."}
{"input":"WatchTVIn(james, cinemas)","output":"James watches TV series in cinemas. "}
{"input":"SubscribedTo(james, aMCAList)","output":"James subscribes to AMC A-List."}
{"input":"Prefer(peter, tVSeries)","output":"Peter prefers TV series."}
{"input":"GenusBulbophyllum(bulbophyllumAttenuatum)","output":"Bulbophyllum attenuatum is in the genus Bulbophyllum."}
{"input":"∀x (GenusBulbophyllum(x) → Orchid(x))","output":"All Bulbophyllum are orchids."}
{"input":"FederalDistrictOf(central, russia) ∧ FederalDistrictOf(northwestern, russia) ∧ FederalDistrictOf(southern, russia) ∧ FederalDistrictOf(northcaucasian, russia) ∧ FederalDistrictOf(volga, russia) ∧ FederalDistrictOf(ural, russia) ∧ FederalDistrictOf(siberian, russia) ∧ FederalDistrictOf(fareastern, russia)","output":"There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian, and Far Eastern."}
{"input":"LargestPopulation(central) ","output":"The Central federal district has the largest population among all federal districts in Russia."}
{"input":"AdministrativeCenterOf(moscow, central)","output":"Moscow is the administrative center of the Central federal district."}
{"input":"AdministrativeCenterOf(yekaterinburg, ural)","output":"Yekaterinburg is the administrative center of the Ural federal district."}
{"input":"AdministrativeCenterOf(vladivostok, farEastern)","output":"Vladivostok is the administrative center of the Far Eastern federal district."}
{"input":"LargestArea(farEastern)","output":"The Far Eastern federal district has the largest area among all federal districts in Russia."}
{"input":"∃x (FederalDistrictOf(x, russia) ∧ EstablishedIn(x, 2000))","output":"Some federal districts in Russia were established in 2000."}
{"input":"∀x (Cancer(x) → Have(x, mutation))","output":"All cancers have mutations."}
{"input":"∀x (Have(x, mutation) → ¬CanBeTreatedAtHome(x))","output":"No mutations can be treated at home."}
{"input":"∀x (ColorectalCancer(x) → Cancer(x))","output":"All colorectal cancers are cancers."}
{"input":"∀x (Cold(x) → CanBeTreatedAtHome(x))","output":"A cold can be treated at home."}
{"input":"¬(Cold(arthritis) ⊕ Have(arthritis, mutation))","output":"Arthritis either is a cold and has mutations or neither is a cold nor has mutations."}
{"input":"∀x (OutsideOfControl(x) → ¬ShouldWorry(jerry, x))","output":"Jerry should not worry about things outside of his control."}
{"input":"∀x (Traffic(x) → OutsideControl(x))","output":"All traffic is outside of my control."}
{"input":"ItalianName(roversi) ∧ Surname(roversi)","output":"Roversi is an Italian surname."}
{"input":"UseAsSurname(albaRoversi, roversi)","output":"Alba Roversi uses Roversi as a surname."}
{"input":"UseAsSurname(paoloRoversi, roversi)","output":"Paolo Roversi uses Roversi as a surname."}
{"input":"UseAsSurname(robertoRoversi, roversi)","output":"Roberto Roversi uses Roversi as a surname."}
{"input":"Photographer(paoloRoversi)","output":"Paolo Roversi is a photographer."}
{"input":"∀x (Photographer(x) → Professional(x) ⊕ Amateur(x))","output":"A photographer is a professional or an amateur."}
{"input":"British-Iraqi(zahaHadid) ∧ Architect(zahaHadid) ∧ Artist(zahaHadid) ∧ Designer(zahaHadid)","output":"Zaha Hadid is a British-Iraqi architect, artist, and designer."}
{"input":"BornOn(zahaHadid, 31October1950) ∧ BornIn(zahaHadid, baghdadIraq)","output":"Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq."}
{"input":"VisitingProfessorOf(zahaHadid, architecturalDesign) ∧ VisitingProfessorAt(zahaHadid, yaleSchoolOfArchitecture)","output":"Zaha Hadid was a visiting professor of Architectural Design at the Yale School of Architecture."}
{"input":"AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)","output":"Max is an aspiring architecture student and plans to apply to the Yale School of Architecture. "}
{"input":"∀x (NeuroimagingTechnique(x) → (Invasive(x) ⊕ Noninvasive(x))) ","output":"A neuroimaging technique is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. "}
{"input":"∀x (Noninvasive(x) → Provides(x, spatialResolutionOfBrains))","output":"All noninvasive neuroimaging techniques provide a spatial resolution of brains."}
{"input":"∀x (Provides(x, spatialResolutionOfBrains) → Measure(x, brainActivity))","output":"If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. "}
{"input":"∀x (Measure(x, brainActivity) → UsedBy(x, neuroscienceResearchers))","output":"All measurements of brain activity are used by neuroscience researchers."}
{"input":"Measure(fMRI, brainActivity) ⊕ Noninvasive(fMRI)","output":"FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique."}
{"input":"NeuroimagingTechnique(fMRI)","output":"FMRI is a neuroimaging technique."}
{"input":"∀x (PresentWorkAt(x, conference) ⊕ ProvideAt(x, tutorialSession, conference))","output":"Researchers present their work at the conference or provide a tutorial session there."}
{"input":"∀x (PresentWorkAt(x, conference) → AttendInPerson(x, conference))","output":"Everyone who presents their work at the conference will attend in person. "}
{"input":"∀x (ProvideSessionAt(x, tutorial, conference) → InvitedToJoin(x, club))","output":"Everyone providing a tutorial session at the conference will be invited to join the club. "}
{"input":"∀x (AttendInPerson(x, conference) → ProvidedWith(x, souvenir))","output":"Everyone who attends the conference in person is provided with souvenirs. "}
{"input":"∀x (InvitedToJoin(x, club) → ProvidedWith(x, deliciousMeal))","output":"Everyone invited to join the club is provided with delicious meals. "}
{"input":"∀x (ProvidedWith(x, deliciousMeal) ∧ ProvidedWith(y, deliciousMeal)  → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ HappyToCommunicateWithDuringTheDinner(x, y) ∧ HappyToCommunicateWithDuringTheDinner(x, z)))","output":"Everyone provided with delicious meals is happy to communicate with each other during the dinner. "}
{"input":"∀x (ProvidedWith(x, deliciousMeal) → InvitedToTakePhotoWith(x, audience))","output":"Everyone who is provided with delicious meals is invited to take a photo with the audience. "}
{"input":"¬(AttendInPerson(james, conference) ∧ ProvidedWith(x, souvenir))","output":"It is not true that James both attended the conference in person and was provided with souvenirs."}
{"input":"HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)","output":"The USS Salem is a heavy cruiser built for the United States Navy."}
{"input":"LastHeavyCruiserToEnterService(usssalem)","output":"The last heavy cruiser to enter service was the USS Salem."}
{"input":"MuseumShip(usssalem)","output":"The USS Salem is a museum ship."}
{"input":"∀x (MuseumShip(x) → OpenToPublic(x))","output":"Museum ships are open to the public."}
{"input":"ServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)","output":"The USS Salem served in the Atlantic and Mediterranean."}
{"input":"∀x (TSLeda(x) → ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)))","output":"TS Leda was a good passenger and cargo vessel."}
{"input":"∀x (TSLeda(x) → (Norweigian(x) ∧ Vessel(x) ∧ Stabilizers(x)))","output":"TS Leda was a Norwegian vessel that was built with stabilizers."}
{"input":"∀x (Stabilizers(x) → MechanicalDevice(x) ∧ OnlyOnShips(x) ∧ PowerfulSteamTurbine(x))","output":"Stabilizers are mechanical devices found only on ships with powerful steam turbine engines."}
{"input":"∀x ((Passenger(x) ∧ Vessel(x)) ∧ (Cargo(x) ∧ Vessel(x)) → (Quiet(x) ∧ GoodAt(x, sea)))","output":"To be a good passenger and cargo vessel, ships must be quiet and good at sea."}
{"input":"∃x (Quiet(x) ∧ GoodAt(x, sea) ∧ PowerfulSteamTurbine(x))","output":"Some ships that are quiet and good at sea have powerful steam turbine engines."}
{"input":"∀x (Ship(x) → Vessel(x))","output":"Vessels are ships."}
{"input":"BornIn(rosa, santiago)","output":"Rosa was born in Santiago. "}
{"input":"CapitalOf(santiago, chile) ∧ LargestCityOf(santiago, chile)","output":"Santiago is the capital and largest city of Chile."}
{"input":"DaughterOf(rosa, jose) ∧ BuildingContractor(jose) ∧ Catalan(jose)","output":"Rosa is the daughter of a Catalan building contractor, Jose."}
{"input":"WifeOf(jose, carmen) ∧ Chilean(carmen)","output":"Jose has a Chilean wife, Carmen."}
{"input":"ParentOf(jose, rosa) ∧ ParentOf(carmen, rosa)","output":"Carmen and Jose are Rosa's parents."}
{"input":"∀x (Catalan(x) → ¬Chilean(x))","output":"People from Catalan are not from Chile."}
{"input":"∀x ∃y (BuildingContractor(x) → ConstructionSite(y) ∧ Oversee(x, y))","output":"A building contractor is responsible for the day-to-day oversight of a construction site. "}
{"input":"IsRapper(tyga)","output":"Tyga is a rapper."}
{"input":"∀x ∀y ((IsRapper(x) ∧ ReleasedAlbum(x, y)) → IsRapAlbum(y))","output":"Rappers release rap albums."}
{"input":"ReleasedAlbum(tyga, wellDone3)","output":"Tyga released the Well Done 3 album."}
{"input":"∀x (IsRapper(x) → ¬IsOperaSinger(x))","output":"Rappers are not opera singers."}
{"input":"BornIn(deborahWallace, scotland) ∧ Actress(deborahWallace) ∧ Playwright(deborahWallace) ∧ Producer(deborahWallace)","output":"Deborah Wallace is a Scottish-born actress, playwright, and producer."}
{"input":"Play(psyche) ∧ BasedOn(psyche, lifeOfJamesMirandaBarry)","output":"Psyche is a play based on the life of James Miranda Barry."}
{"input":"Play(homesick) ∧ WrittenBy(homesick, deborahWallace) ∧ Play(psyche) ∧ WrittenBy(psyche, deborahWallace) ∧ Play(theVoid) ∧ WrittenBy(theVoid, deborahWallace)","output":"Homesick, Psyche and The Void are plays by Deborah Wallace."}
{"input":"CoProduce(deborahWallace, gasland)","output":"Deborah Wallace co-produced Gasland."}
{"input":"∀x (Animal(x) ∧ Need(x, largeTerritory) → TravelFar(x))","output":"Animals who need large territory travel far."}
{"input":"∀x (EatALot(x) → Need(x, largeTerritory))","output":"Every animal that eats a lot needs a large territory."}
{"input":"∀x (Big(x) ∧ Animal(x) → EatALot(x))","output":"If something is a big animal, then it will eat a lot."}
{"input":"∀x (Bear(x) → Big(x) ∧ Animal(x))","output":"Bears are big animals."}
{"input":"Big(larry) ∧ Animal(larry)","output":"Larry is a big animal."}
{"input":"∀x (ConvictedCriminal(x) ∧ Innocent(x) → ¬TrulyGuilty(x))","output":"Any convicted criminal that is innocent is not truly guilty."}
{"input":"∀x (ConvictedCriminal(x) ∧ ¬CommitCrime(x) → Innocent(x))","output":"All convicted criminals who did not commit a crime are truly innocent."}
{"input":"∀x (ConvictedCriminal(x) ∧ (TrulyGuilty(x) ∨ FoundGuilty(x)))","output":"All convicted criminals are truly guilty or found guilty."}
{"input":"∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → SentencedToPunishment(x))","output":"If a convicted criminal is found guilty, then they are sentenced to a punishment."}
{"input":"∀x (ConvictedCriminal(x) ∧ FoundGuilty(x) → CanArgueAgainst(x, punishment))","output":"If a convicted criminal is found guilty, then they can argue against their punishment."}
{"input":"ConvictedCriminal(garry) ∧ (¬(FoundGuilty(garry) ∨ SentencedToPunishment(garry)))","output":"Garry is a convicted criminal who not found guilty or is sentenced to punishment."}
{"input":"IndiePop(phoenix)","output":"Phoneix's music is classified under the indie pop genre."}
{"input":"Band(phoenix) ∧ From(phoenix, france)","output":"Phoenix is a band from France."}
{"input":"∀x ∃y (Band(x) ∧ From(x, france) ∧ Write(x, y) ∧ Song(y) → InFrench(y) ⊕ InEnglish(y))","output":"French bands write songs in French or in English."}
{"input":"∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))","output":"Aside from indie pop, pop rock and synth-pop are two other genres of music."}
{"input":"∀x (Song(x) ∧ By(phoenix, x) → ¬InFrench(x))","output":"Phoenix has no songs in French."}
{"input":"InThisClub(bonnie) ∧ (Perform(bonnie, schoolTalentShow))","output":"Bonnie performs in school talent shows often."}
{"input":"¬((YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ⊕ Chaperone(bonnie, highSchoolDance)) → (Studen(x) ∧ AttendSchool(x)) ⊕ (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer))","output":"If Bonnie is either both a young child or teenager who wishes to further her academic career and educational opportunities and chaperones high school dances or neither is a young child nor teenager who wishes to further her academic career and educational opportunities, then Bonnie is either a student who attends the school or is an inactive and disinterested member of the community."}
{"input":"(Chaperone(bonnie, highSchoolDance) ⊕ Perform(bonnie, schoolTalentShow)) → (YoungChildren(bonnie) ⊕ Teenager(bonnie)) ∧ WishToFurther(bonnie, academicCareer)) ∧ (InActive(bonnie) ∧ Disinterested(bonnie) ∧ MemberOf(bonnie, community))","output":"If Bonnie either chaperones high school dances or, if she does not, she performs in school talent shows often, then Bonnie is both a young child or teenager who wishes to further her academic career and educational opportunities and an inactive and disinterested member of the community."}
{"input":"HasLunch(james, company)","output":"James has lunch in the company."}
{"input":"¬HasLunch(james, company)","output":"James does not have lunch in the company."}
{"input":"Manager(james) → ¬Work(james, home)","output":"If James is either a manager or in other countries,  then James does not either has lunch at home or work remotely from home. If James either has lunch at home or works remotely from home, then he is neither a manager nor does he work in other countries. [contrapositive is more natural]"}
{"input":"∃x (Animal(x))","output":"There is an animal."}
{"input":"∀x (Human(x) → ¬Get(x, flu))","output":"No one gets the flu."}
{"input":"∃x (SymptonOf(x, monkeypoxVirus) ∧ Coughing(x))","output":"Symptoms of Monkeypox include coughing."}
{"input":"OcellatedWildTurkey(tom)","output":"Tom is an Ocellated wild turkey."}
{"input":"EasternWildTurkey(tom)","output":"Tom is an Eastern wild turkey."}
{"input":"WildTurkey(joey)","output":"Joey is a wild turkey."}
{"input":"Top10(thelegendofzelda)","output":"The Legend of Zelda is on the Top 10 list."}
{"input":"∃x(Created(x, fifa22) ∧ Japanese(x) ∧ VideoGameCompany(x))","output":"FIFA 22 is made by a Japanese video game company."}
{"input":"¬Top10(thelegendofzelda)","output":"The Legend of Zelda is not on the Top 10 list."}
{"input":"∀x (Square(x) → Shape(x))","output":"All squares are shapes."}
{"input":"Turtle(rockie)","output":"Rockie is a turtle."}
{"input":"¬Turtle(rockie)","output":"Rockie is not a turtle."}
{"input":"Turtle(rockie) ∨ Cute(rockie)","output":"Rockie is a turtle or cute."}
{"input":"¬(Turtle(rockie) ∧ Squirrel(rockie)) → Cute(rockie) ⊕ Skittish(rockie)","output":"If Rockie is not both a turtle and a squirrel, then Rockie is either cute or skittish."}
{"input":"Cute(rockie) ∧ Calm(rockie) → Turtle(rockie) ∧ Skittish(rockie)","output":"If Rockie is cute and calm, then Rockie is a skittish turtle."}
{"input":"ShareWith(karen, strangerThings, lisa)","output":"Karen will share \"Stranger Things\" with Lisa."}
{"input":"Popular(blackMirror)","output":"\"Black Mirror\" is popular."}
{"input":"ShareWith(karen, blackMirror, lisa)","output":"Karen will share \"Black Mirror\" with Lisa."}
{"input":"Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics)","output":"Beijing hosted both the 2008 Summer Olympics and the Winter Olympics."}
{"input":"LocatedIn(beijing, southernChina)","output":"Beijing is located in southern China."}
{"input":"SecondLargestChineseCity(beijing)","output":"Beijing is the second largest Chinese city."}
{"input":"Alien(marvin)","output":"Marvin is an alien."}
{"input":"¬Human(marvin) ∧ ¬From(marvin, mars)","output":"Marvin is neither a human nor from Mars."}
{"input":"¬From(marvin, mars) → Human(marvin)","output":"If Marvin is not from Mars, then Marvin is a human."}
{"input":"GrandSlam(djokovic) ∧ Champion(djokovic)","output":"Djokovic is a Grand Slam champion."}
{"input":"LiveIn(djokovic, taxHaven)","output":"Djokovic lives in a tax haven."}
{"input":"¬LiveIn(djokovic, taxHaven)","output":"Djokovic does not live in a tax haven."}
{"input":"∃x (Leads(roderickstrong, x) ∧ ProfessionalWrestlingStable(x))","output":"Roderick Strong leads a professional wrestling stable."}
{"input":"Leads(roderickstrong, creedbrothers)","output":"Roderick Strong leads the Creed Brothers."}
{"input":"∀x ((ProfessionalWrestlingStable(x) ∧ Includes(x, ivynile)) → ¬Feuds(imperium, x))","output":"Imperium doesn't have a feud with a professional wrestling stable that includes Ivy Nile."}
{"input":"Composer(beethoven)","output":"Beethoven is a composer."}
{"input":"∃x ∃y (Orchestra(x) ∧ MusicPiece(y) ∧ Premiered(x, y))","output":"Some orchestras premiered music pieces."}
{"input":"¬Conductor(beethoven)","output":"Beethoven is not a conductor."}
{"input":"∃x (Design(x) ∧ ByMax(x) ∧ BrutalistBuilding(x))","output":"A design by Max is a brutalist building."}
{"input":"∃x (Design(x) ∧ ByMax(x) ∧ Evocative(x) ∧ Dreamy(x))","output":"A design by Max is evocative and dreamy."}
{"input":"∃x (Design(x) ∧ ByMax(x) ∧ (Evocative(x) ⊕ Dreamy(x)))","output":"A design by Max is either evocative or dreamy."}
{"input":"MostActivePlayerIn(cocoGauff, majorTennis)","output":"Coco Gauff is among the most active Grand-Slam players."}
{"input":"LostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)","output":"Coco Gauff has lost to Rafael Nadal."}
{"input":"¬(LostTo(cocoGauff, świątek) ∧ At(cocoGauff, rolandGarros2022)) ∨ ¬MostActivePlayerIn(cocoGauff, majorTennis)","output":"Coco Gauff is not both a player who lost to Iga Świątek at Roland Garros 2022 and one of the most active players in major tennis."}
{"input":"∀x (Pet(x) → ¬Cat(x))","output":"No pets are cats."}
{"input":"Favorite(james, summer)","output":"James's favorite season is summer."}
{"input":"Favorite(mia, spring)","output":"Mia's favorite season is spring."}
{"input":"PrintedText(y1984)","output":"1984 is printed text."}
{"input":"StreamingService(y1984)","output":"1984 is a streaming service."}
{"input":"¬StreamingService(y1984)","output":"1984 is not a streaming service."}
{"input":"RomanceLanguage(basque)","output":"Basque is a Romance language."}
{"input":"RomanceLanguage(german)","output":"German is a Romance language."}
{"input":"IndoEuropeanLanguage(french)","output":"French is an Indo-European language."}
{"input":"SoccerPlayer(robertLewandowski)","output":"Robert Lewandowski is a soccer player."}
{"input":"PlaysFor(robertLewandowski, bayernMunchen)","output":"Robert Lewandowski plays for Bayern Munchen."}
{"input":"SoccerStar(robertLewandowski)","output":"Robert Lewandowski is a star."}
{"input":"∃x (In(butte, x) ∧ In(stPierre, x))","output":"Butte and St Pierre are in the same state."}
{"input":"∃x (City(pierre) ∧ In(pierre, x) ∧ City(bismarck) ∧ In(bismarck, x))","output":"St Pierre and Bismarck are in the same state."}
{"input":"City(missoula) ∧ In(missoula, montana)","output":"Montana is home to the city of Missoula."}
{"input":"F1Visa(mike)","output":"Mike has an F1 visa."}
{"input":"J1Visa(mike)","output":"Mike has a J1 visa."}
{"input":"Pet(ted)","output":"Ted is a pet."}
{"input":"Pet(ted) ∧ BrownSwissCattle(ted)","output":"Ted is a pet and Brown Swiss cattle"}
{"input":"BrownSwissCattle(ted) → ¬Pet(ted)","output":"If Ted is a Brown Swiss cattle, then Ted is not a pet."}
{"input":"∃x (PrivateIvyLeagueResearchUniversity(x) ∧ MovedTo(x, newHaven))","output":"A private Ivy League research university moved to New Haven."}
{"input":"LargestUniversityEndowmentOf(yale, anyEducationalInstitution)","output":"Yale University has the largest university endowment of any educational institution."}
{"input":"ResidentialCollege(piersonCollege) ∧ At(piersonCollege, yale)","output":"Pierson College is a residential college at Yale."}
{"input":"∃x (ScriptEditorFor(andrewCollins, x) ∧ Series(x) ∧ WorkingTitle(theSecretDudeSociety, x))","output":"Andrew Collins was the script editor for a series with the working title \"The Secret Dude Society\"."}
{"input":"∀x ∀y (MemberOf(x, pappys) ∧ Starring(y, x) → ¬(PilotedOn(y, bBCTwo) ∨ PilotedOn(y, bBCThree)))","output":"No members of Pappy's have starred in a show piloting on BBC Two or BBC Three."}
{"input":"Stock(kO)","output":"KO is a stock."}
{"input":"¬GrowthStock(kO)","output":"KO is a stock and a growth stock."}
{"input":"GrowthStock(kO) ∨ BoughtToEarnProfitFrom(kO, earnProfit, rapidPriceAppreciation) → ¬Stock(kO) ∧ ¬BoughtToEarnProfitFrom(kO, rapidPriceAppreciation)","output":"If KO is a growth stock or bought to earn profits from rapid price appreciation, then KO is neither a stock nor is its price volatile."}
{"input":"∃x (Owns(joe, x) ∧ BeginWith(x, num34))","output":"Joe's license plate begins with the number 34."}
{"input":"∃x (Owns(tom, x) ∧ VehicleRegistrationPlateIn(x, istanbul))","output":"Tom's license plate is from Istanbul."}
{"input":"NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition)","output":"Hannah needs to earn money to help pay for her college tuition."}
{"input":"¬(PickyEater(hannah) ∧ Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))","output":"Hannah is at Mary's school and she is not a picky eater and spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"input":"PickyEater(hannah) ⊕ (Spend(hannah, aLotOfTime, eating) ∧ Spend(hannah, aLotOfTime, catchingUpWithFriends, diningHall))","output":"Hannah is at Mary's school and she either is not a picky eater or, if she is, then she spends a lot of her time eating and catching up with friends in the campus dining halls."}
{"input":"Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)","output":"Dried Thai chilies are products of Baked by Melissa."}
{"input":"¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa))","output":"Dried Thai chilies are not products of Baked by Melissa."}
{"input":"MalaHotpot(driedThaiChili)","output":"Dried Thai chilies are a mala hotpot."}
{"input":"¬(Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)) ∧ ¬BakedSweet(driedThaiChili)","output":"Dried Thai chilies are neither products of Baked by Melissa nor baked sweets."}
{"input":"Cupcake(driedThaiChili) ∧ Product(driedThaiChili) ∧ From(driedThaiChili, bakedByMelissa)","output":"Dried Thai chilies are cupcakes and products of Baked by Melissa."}
{"input":"∃x ((TakeOutService(hamdenPlazaSubway) ∧ NegativeReview(x) ∧ Receive(hamdenPlazaSubway, x) → PopularAmong(hamdenPlazaSubway, localResidents) ∧ ¬Provide(hamdenPlazaSubway, takeOutService))","output":"If the Hamden Plaza Subway store provides take-out service and receives many negative reviews, then its rating is greater than 4 and it does not provide take-out service."}
{"input":"∃x (Provide(hamdenPlazaSubway, takeOutService) ∨ (NegativeReview(x) ∧ ¬Receive(hamdenPlazaSubway, x)))","output":"The Hamden Plaza Subway store provides take-out service or does not receive many negative reviews."}
{"input":"¬Provide(hamdenPlazaSubway, takeOutService)","output":"The Hamden Plaza store does not provide take-out service."}
{"input":"¬Win(sirDigbysNemesis)","output":"Sir Digby’s nemesis does not win."}
{"input":"Gains(harry, knowledge)","output":"Walden contains knowledge."}
{"input":"Smarter(harry)","output":"Harry is smarter than before."}
{"input":"∀x (Smarter(x) → GainKnowledge(x))","output":"A smarter person has gained knowledge."}
{"input":"LanguageGenerationTask(machineTranslation)","output":"Machine translation is a language generation task."}
{"input":"LanguageUnderstandingTask(machineTranslation)","output":"Machine translation is a language understanding task."}
{"input":"RentApartmentIn(tom, oliveGarden)","output":"Tom will rent an apartment in The Olive Garden."}
{"input":"AllowedToMoveInWith(tom, oliveGarden, fluffy)","output":"Tom is allowed to move into an apartment in The Olive Garden with Fluffy."}
{"input":"∀x (SecurityDeposit(x, oliveGarden) → MoreThan(x, uSD2000) ⊕ Equal(x, uSD2000))","output":"The security deposit at the Olive Garden is either $2000 or more."}
{"input":"LegalObligation(harvardWeeklyBookClub)","output":"The Harvard Weekly Book club has legal obligations."}
{"input":"LegalObligation(harvardWeeklyBookClub) ∧ PrivateCompany(harvardWeeklyBookClub)","output":"The Harvard Weekly Book club has legal obligations and is a private company."}
{"input":"PrivateCompany(harvardWeeklyBookClub) → LegalObligation(harvardWeeklyBookClub) ⊕ CreatedUnderLaw(harvardWeeklyBookClub)","output":"If the Harvard Weekly Book club is a private company, then it either has legal obligations or is created under law."}
{"input":"QueenBee(harry)","output":"Harry is a queen bee."}
{"input":"Invertebrate(harry) ∨ QueenBee(harry)","output":"Harry is an invertebrate or a queen bee."}
{"input":"¬(Invertebrate(harry) ⊕ With(harry, backbone)) → ¬Invertebrate(harry) ∧ ¬QueenBee(harry)","output":"If Harry is either both a vertebrate and an animal with a backbone, or neither a vertebrate nor an animal with a backbone, then Harry is neither an invertebrate nor a queen bee."}
{"input":"SpendTime(luke, playingWith, siblings)","output":"Luke spends a lot of time hanging out and playing with his siblings."}
{"input":"ComplainAboutOften(luke, annoyingSiblings)","output":"Luke complains often about annoying siblings."}
{"input":"¬(BornIn(luke, multipleBirth) ∨ ComplainAbout(luke, often, annoyingSiblings) )","output":"Luke is neither born in a multiple birth nor complains often about annoying siblings."}
{"input":"ProvidesFinancialAidTo(eTS, tom)","output":"ETS provides financial aid to Tom."}
{"input":"Cost(gRE, x) ∧ Cheaper(x, 300)","output":"It costs below US $300 to take the GRE test."}
{"input":"¬(∃x ∃y (Applicant(x, gRE) ∧ ProvidesFinancialAidTo(y, x)))","output":"No one taking the GRE test has financial aid provided to them by something."}
{"input":"NotablyTidy(peter)","output":"Peter is notably tidy."}
{"input":"ClumsyFoodie(peter) ∨ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)))","output":"Peter is either a  clumsy foodie who goes out frequently to find new food restaurants to try or he is someone whose family prioritizes order and spotlessness."}
{"input":"¬(ClumsyFoodie(peter) ⊕ (∃y (FamilyOf(y, peter) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness))))","output":"Peter is either both a clumsy foodie who goes out frequently to find new food restaurants to try and issomeone whose family prioritizes order and spotlessness, or he neither is a clumsy foodie who goes out frequently to find new food restaurants to try nor does his family prioritize order and spotlessness."}
{"input":"∃x ∃y (Evergreen(x) ∧ Evergreen(y) ∧ ¬ObjectOfWorship(x) ∧ ¬ObjectOfWorship(y) ∧ ¬(x=y))","output":"Some evergreens are not objects of worship."}
{"input":"∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, newMexico))","output":"Juan de Onate visited a mountain range in New Mexico."}
{"input":"∃x (Visited(juanDeOnate, x) ∧ MountainRange(x) ∧ In(x, texas))","output":"Juan de Onate visited a mountain range in Texas."}
{"input":"∀x (In(hardingPegmatiteMine, x) → ¬(MountainRange(x) ∧ In(x, newMexico)))","output":"The Harding Pegmatite Mine is not located in a mountain range in New Mexico."}
{"input":"∃x (Man(x) ∧ SameClass(x, michael) ∧ ¬Taller(peter, x))","output":"Peter is shorter than a man in Michael's class."}
{"input":"GreatShooter(windy)","output":"Windy is a great shooter."}
{"input":"CanBlock(peter, windy)","output":"Peter can block Windy's shooting."}
{"input":"∀x (LocatedIn(x, antarctica) → NamedAfter(barutinCove, x))","output":"Barutin Cove is named after all islands in Antarctica."}
{"input":"∃x ∃y (Cove(x) ∧ LocatedIn(x, antarctica) ∧ NameAfter(x, y) ∧ LocatedIn(y, bulgaria))","output":"There is at least one cove in Antarctica named after a place in Bulgaria."}
{"input":"¬LocatedIn(barutinCove, antarctica)","output":"Barutin Cove is not located in Antarctica."}
{"input":"∃x (Affection(x) ∧ Positive(x))","output":"Some affection is positive."}
{"input":"TeslaModel3(johnsCar)","output":"John's car is a Tesla Model 3."}
{"input":"SoloEV(johnsCar) ∧ Car(johnsCar)","output":"John's car is a Solo EV."}
{"input":"¬(SoloEV(johnsCar) ∧ Car(johnsCar))","output":"John's car is not a Solo EV."}
{"input":"Monkey(rock)","output":"Rock is a monkey."}
{"input":"∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z))","output":"Rock has wings."}
{"input":"¬(∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(rock, y) ∧ Have(rock, z)))","output":"Rock does not have wings."}
{"input":"Have(john, largeFamily)","output":"John has a larger family."}
{"input":"¬Have(john, largerFamily)","output":"John does not have a larger family."}
{"input":"Engaged(john)","output":"John is engaged."}
{"input":"¬Have(john, largerFamily) ∧ ¬(∃y ∃z (¬(y=john) ∧ ¬(z=john) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ InviteToComeTo(john, z, wedding)))","output":"John neither has a larger family nor does he invite others to his wedding."}
{"input":"Mammal(platypus) ∧ (¬Have(platypus, teeth))","output":"Platypuses are mammals with no teeth."}
{"input":"Reptile(platypus)","output":"Platypuses are reptiles."}
{"input":"Mammal(humans)","output":"Humans are mammals."}
{"input":"Suck(space)","output":"Space sucks."}
{"input":"Vampire(space)","output":"Space is a vampire."}
{"input":"∀x (HouseHoldApp(x) → Suck(x))","output":"If something is a household appliance, it sucks."}
{"input":"∃x (SupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))","output":"Supervised learning is used to train the state-of-the-art text summarization model."}
{"input":"∃x (UnsupervisedLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x))","output":"Unsupervised learning is used to train the state-of-the-art text summarization model."}
{"input":"Rated(x, generalAudience)","output":"\"Hachi: A dog's Tale\" is rated General Audience."}
{"input":"(Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ∨ InfrozenSeries(excessiveViolentContent)","output":"\"Hachi: A dog's Tale\" contains excessive erotic and violent content or is in the \"Frozen\" series or both."}
{"input":"¬((Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent)) ⊕ InfrozenSeries(excessiveViolentContent))","output":"\"Hachi: A dog's Tale\" either contains excessive erotic and violent content and is a film in the \"Frozen\" series, or it neither contains excessive erotic and violent content nor is a film in the \"Frozen\" series."}
{"input":"∃x ∃y(HeckCattle(x) ∧ ArtificialSelection(x) ∧ (¬(x=y)) ∧ HeckCattle(y) ∧ ArtificialSelection(y))","output":"Some Heck cattle are artificially selected."}
{"input":"∀x (Auroch(x) → Dead(x))","output":"Aurochs are extinct."}
{"input":"Russian(vladimir) ∧ FederationOfficial(vladimir)","output":"Vladimir is a Russian federation official"}
{"input":"¬(Russian(vladimir) ∧ FederationOfficial(vladimir))","output":"Vladimir is not a Russian federation official"}
{"input":"CanParticipateIn(ekaterina, 2024UnitedStatesElection) ∨ ManagerAt(ekaterina, gazprom)","output":"Ekaterina can participate in the 2024 United States presidential election or is a manager at Gazprom."}
{"input":"CanParticipateIn(ekaterina, 2024UnitedStatesElection) ⊕ ManagerAt(vladimir, gazprom)","output":"Ekaterina can participate in the 2024 United States presidential election or Vladimir is a manager at Gazprom."}
{"input":"CanRegisterToVoteIn(ekaterina, unitedStates) ∧ CanParticipateIn(vladimir, 2024UnitedStatesElection)","output":"It is not true that Ekaterina can register to vote in the United States and Vladimir can participate in the 2024 United States presidential election."}
{"input":"Book(neapolitanChronicles) ∧ In(neapolitanChronicles, english)","output":"Neapolitan Chronicles is an English book."}
{"input":"PublishedBy(harryPotter, newVesselPress)","output":"Harry Potter was published by New Vessel Press."}
{"input":"TranslatedFrom(palaceOfFlies, italian)","output":"Palace of Flies was translated from Italian."}
{"input":"Contain(mixture, carbon)","output":"The mixture contains carbon."}
{"input":"Alkane(mixture) ∧ Contain(mixture, carbon)","output":"The mixture is an alkane and contains carbon."}
{"input":"(∀x ∀y (Contain(mixture, x) ∧ Contain(mixture, y) ∧ x=y)) ∨ Contain(mixture, carbon) → ¬(Chemical(mixture) ∧ Compound(mixture)) ∧ ¬Alkane(mixture))","output":"If the mixture contains only one element or contains carbon, then the mixture is neither a chemical compound nor an alkane."}
{"input":"∃x ∃y (Greek(x) ∧ Greek(y) ∧ Mortal(x) ∧ Mortal(y) ∧ ¬(x=y))","output":"Some Greeks are mortal."}
{"input":"∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))","output":"James has a part-time job offered by the university."}
{"input":"¬∃y(PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))","output":"James does not have a part-time job offered by the university."}
{"input":"Take(james, databaseCourse) ⊕ (∃y (PartTimeJob(y) ∧ Have(james, y) ∧ OfferedBy(y, university))","output":"James either takes the database course or has a part-time job offered by the university."}
{"input":"Take(james, databaseCourse)","output":"James takes the database course."}
{"input":"(LikeMusic(george) ∧ AccesstoProgram(george)) → WillCompose(george)","output":"If George likes music and has access to a program, he will compose."}
{"input":"¬WantToCompose(george) → ¬WillCompose(george)","output":"If George will not compose, George can not compose."}
{"input":"∀x (Bird(x) → Swim(x))","output":"All birds swim."}
{"input":"∀x (MondayAt8PM(x) ∧ On(breakingBad, x))","output":"Breaking Bad is on Monday at 8 pm."}
{"input":"∀x ∀y (MondayAt8PM(x) ∧ Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad))","output":"Breaking Bad is a TV show in which roses are given out on Monday at 8 pm."}
{"input":"∀x ∀y ((Rose(y) ∧ GivenOutOn(y, tv) ∧ On(tv, x) ∧ From(y, breakingBad)) → MondayAt8PM(x))","output":"If roses are given out during Breaking Bad, then it is on Monday at 8 pm."}
{"input":"German(heinrichSchmidt) ∨ Russian(heinrichSchmidt)","output":"Heinrich Schmidt was German or Russian or both."}
{"input":"∃x (German(x) ∧ Politician(x) ∧ Member(x, prussianStateParliament) ∧ Member(x, naziReichstag))","output":"Some German politician was part of both the Prussian State Parliament and the Nazi Reichstag."}
{"input":"∀x (Politician(x) → ¬Member(x, naziReichstag))","output":"No politicians are part of the Nazi Reichstag."}
{"input":"SevereCancer(colorectalCancer)","output":"Colorectal cancer is a kind of severe cancer"}
{"input":"¬(BileDuctCancer(colorectalCancer) ∨ Cholangiocarcinoma(colorectalCancer)) ∨ (BileDuctCancer(colorectalCancer) ∧ MildFlu(colorectalCancer))","output":"If colorectal cancer is a kind of bile duct cancer or a form of Cholangiocarcinoma, then colorectal cancer is a kind of bile duct cancer and a kind of mild flu."}
{"input":"Cholangiocarcinoma(colorectalCancer) ∧ (MildFlu(colorectalCancer) ∨ BileDuctCancer(colorectalCancer))","output":"Colorectal cancer is a form of Cholangiocarcinoma and it is a kind of mild flu or a kind of bile duct cancer, or all of the above."}
{"input":"RegularlyEat(taylor, salad)","output":"Taylor eats salads regularly."}
{"input":"VisitDaily(taylor, gym)","output":"Taylor visits the gym at least once a day."}
{"input":"¬GrowUpIn(taylor, health-consciousChildhoodHome) ∧ ¬VisitDaily(taylor, gym))","output":"Taylor neither grew up in a health-conscious childhood home nor does she visit the gym at least once a day."}
{"input":"SportingEvent(champs)","output":"The world championships is a sporting event."}
{"input":"¬LastSummerOlympics(tokyo)","output":"The last summer Olympic games were not in Tokyo."}
{"input":"∃x (LastSummerOlympics(x) ∧ MostMedals(unitedStates, x))","output":"The United States won the most medals in the last summer Olympic games."}
{"input":"∃x (Human(x) ∧ Human(y) ∧ Horse(x) ∧ Horse(y) ∧ ¬(x=y))","output":"Some humans are horses."}
{"input":"FlyFrom(susan, lgaAirport)","output":"Susan flies from LGA airport."}
{"input":"FlyTo(john, lgaAirport)","output":"John flies to LGA airport."}
{"input":"Grumpy(tom)","output":"Tom is a grumpy person."}
{"input":"¬(Grumpy(tom) ∧ MeanTo(tom, animal))","output":"Tom is not both a grumpy person and mean to animals."}
{"input":"¬(Grumpy(tom) ∧ MeanTo(tom, animal)) → ¬Grumpy(tom) ∧ ¬AnimalLover(tom))","output":"If Tom is not both a grumpy person and mean to animals, then Tom is neither a grumpy person nor an animal lover."}
{"input":"WritesNovel(dani_Shapiro)","output":"Dani Shapiro is a novel writer."}
{"input":"IsNovel(family_Secrets)","output":"Family Secrets is a novel."}
{"input":"BornIn(dani_Shapiro, boston)","output":"Dani Shapiro was born in Boston."}
{"input":"AmericanNational(yuri)","output":"Yuri is an American national."}
{"input":"¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))","output":"Yuri is not an American professional basketball player."}
{"input":"AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)","output":"Yuri is an American professional basketball player."}
{"input":"¬LeapStraightIntoAir(yuri) → (AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri))","output":"If Yuri does not leap straight into the air, then Yuri is an American professional basketball player."}
{"input":"¬(AmericanNational(yuri) ∧ Professional(yuri) ∧ BasketballPlayer(yuri)) → (Professional(yuri) ∧ BasketballPlayer(yuri))","output":"If Yuri is not an American professional basketball player, then Yuri is a professional basketball player."}
{"input":"∀x (Event(x) → Sad(x))","output":"All events are sad."}
{"input":"¬WinnerOf(steinhauer, duMaurierClassic, year1992)","output":"Steinhauer was not the winner of the 1992 du Maurier Classic."}
{"input":"SixWayTie(descampe)","output":"Descampe is in the six-way tie in the leaderboard of the 1992 du Maurier Classic."}
{"input":"Terricolous(kiki)","output":"KiKi is terricolous."}
{"input":"Bark(kiki) ∧ Dog(kiki)","output":"KiKi is a barking dog."}
{"input":"¬Bark(kiki) ∧ ¬Dog(kiki)","output":"KiKi does not bark and he is not a dog."}
{"input":"∀x (PlayFor(x, nautico) → ¬Brazilian(x))","output":"No one playing for Nautico is Brazilian."}
{"input":"∀x (FootballClub(x) → ¬PlayFor(ailtonSilva, x))","output":"Ailton Silva does not play for a football club."}
{"input":"∀x (FootballClub(x) → ¬LoanedTo(ailton, x))","output":"Ailton was not loaned out to a football club."}
{"input":"PlayFor(ailtonSilva, fluminense)","output":"Ailton Silva played for Fluminense."}
{"input":"∃x (FootballClub(x) ∧ LoanedTo(ailtonSilva, x))","output":"Ailton Silva was loaned out to a football club."}
{"input":"∀x (InThisClub(x) ∧ PerformOftenIn(x, schoolTalentShow) → Attend(x, schoolEvent) ∧ VeryEngagedWith(x, schoolEvent))","output":"People in this club who perform in school talent shows often attend and are very engaged with school events."}
{"input":"∀x (InThisClub(x) → PerformOftenIn(x, schoolTalentShow) ⊕ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)))","output":"People in this club either perform in school talent shows often or are inactive and disinterested community members."}
{"input":"∀x (InThisClub(x) ∧ Chaperone(x, highSchoolDance) → ¬(Studen(x) ∧ AttendSchool(x)))","output":"People in this club who chaperone high school dances are not students who attend the school."}
{"input":"∀x (InThisClub(x) ∧ (InActive(x) ∧ Disinterested(x) ∧ MemberOf(x, community)) → Chaperone(x, highSchoolDances))","output":"All people in this club who are inactive and disinterested members of their community chaperone high school dances."}
{"input":"∀x (InThisClub(x) ∧ (YoungChildren(x) ⊕ Teenager(x)) ∧ WishToFurther(x, academicCareer)) → Studen(x) ∧ AttendSchool(x))","output":"All young children and teenagers in this club who wish to further their academic careers and educational opportunities are students who attend the school. "}
{"input":"InThisClub(bonnie) ∧ ¬((Attend(x, schoolEvent) ∧ VeryEngagedWith(bonnie, schoolEvent)) ⊕ (Studen(bonne) ∧ AttendSchool(bonnie)))","output":"Bonnie is in this club and she either both attends and is very engaged with school events and is a student who attends the school or is not someone who both attends and is very engaged with school events and is not a student who attends the school."}
{"input":"∀x ((Employee(x) ∧ Schedule(x, meeting, customers)) → AppearIn(x, company))","output":"All employees who schedule a meeting with their customers will go to the company building today. "}
{"input":"∀x ((Employee(x) ∧ HasLunch(x, company)) → Schedule(x, meeting, customers))","output":"Everyone who has lunch in the company building schedules meetings with their customers. "}
{"input":"∀x (Employee(x) → (HasLunch(x, company) ⊕ HasLunch(x, home)))","output":"Employees have lunch either in the company building or at home."}
{"input":"∀x ((Employee(x) ∧ HasLunch(x, home)) → Work(x, home))","output":"If an employee has lunch at home, they are working remotely from home."}
{"input":"∀x ((Employee(x) ∧ (¬In(x, homecountry))) → Work(x, home))","output":"All employees who are in other countries work remotely from home. "}
{"input":"∀x (Manager(x) → ¬Work(x, home))","output":"No managers work remotely from home. "}
{"input":"¬(Manager(james) ⊕ AppearIn(james, company))","output":"James will appear in the company today if and only if he is a manager."}
{"input":"∃x (OccurIn(monkeypoxVirus, x) ∧ Get(x, monkeypoxVirus))","output":"When the Monkeypox virus occurs in a being, it may get Monkeypox. "}
{"input":"∃x (Animal(x) ∧ OccurIn(monkeypoxVirus, x))","output":"Monkeypox virus can occur in certain animals."}
{"input":"∀x (Human(x) → Mammal(x))","output":"Humans are mammals."}
{"input":"∀x (Mammal(x) → Animal(x))","output":"Mammals are animals."}
{"input":"∃x (SymptonOf(x, monkeypoxVirus) ∧ (Fever(x) ∨ Headache(x) ∨ MusclePain(x) ∨ Tired(x)))","output":"Symptoms of Monkeypox include fever, headache, muscle pains, and tiredness. "}
{"input":"∀x (Human(x) ∧ Get(x, flu) → Feel(x, tired))","output":"People feel tired when they get the flu."}
{"input":"∀x (WildTurkey(x) → (EasternWildTurkey(x) ∨ OsceolaWildTurkey(x) ∨ GouldsWildTurkey(x) ∨ MerriamsWildTurkey(x) ∨ RiograndeWildTurkey(x) ∨ OcellatedWildTurkey(x)))","output":"There are six types of wild turkeys: Eastern wild turkey, Osceola wild turkey, Gould’s wild turkey, Merriam’s wild turkey, Rio Grande wild turkey, and Ocellated wild turkey."}
{"input":"¬(EasternWildTurkey(tom))","output":"Tom is not an Eastern wild turkey."}
{"input":"¬(OsceolaWildTurkey(tom))","output":"Tom is not an Osceola wild turkey."}
{"input":"¬(GouldsWildTurkey(tom))","output":"Tom is not a Gould's wild turkey."}
{"input":"¬(MerriamsWildTurkey(tom) ∨ RiograndeWildTurkey(tom))","output":"Tom is neither a Merriam's wild turkey nor a Rio Grande wild turkey."}
{"input":"WildTurkey(tom)","output":"Tom is a wild turkey."}
{"input":"Game(theLegendofZelda) ∧ ∃x (Japanese(x) ∧ VideoGameCompany(x) ∧ Created(x, theLegendofZelda))","output":"A Japanese game company created the game the Legend of Zelda."}
{"input":"∀x ∀y ((Game(x) ∧ InTop10(x) ∧ Created(y,x)) → Japanese(y))","output":"All games on the Top 10 list are made by Japanese game companies."}
{"input":"∀x ((Game(x) ∧ ∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(x, y))) → Top10(x)))","output":"If a game sells more than one million copies, then it will be included in the Top 10 list."}
{"input":"∃y(GreaterThan(y, oneMillion) ∧ CopiesSold(theLegendofZelda,y))","output":"The Legend of Zelda sold more than one million copies."}
{"input":"∀x (Square(x) → FourSided(x))","output":"All squares are four-sided."}
{"input":"∀x (FourSided(x) → Shape(x))","output":"All four-sided things are shapes. "}
{"input":"∀x (Rabbit(x) ∧ CanBeSpottedNear(x, campus) → Cute(x))","output":"All rabbits that can be spotted near the campus are cute. "}
{"input":"∃x (Turtle(x) ∧ CanBeSpottedNear(x, campus))","output":"Some turtles can be spotted near the campus. "}
{"input":"∀x (CanBeSpottedNear(x, campus) → (Rabbit(x) ⊕ Squirrel(x)))","output":"The only animals that can be spotted near the campus are rabbits and squirrels."}
{"input":"∀x (Skittish(x) → ¬Calm(x))","output":"If something is skittish, then it is not calm."}
{"input":"∀x (Squirrel(x) ∧ CanBeSpottedNear(x, campus) → Skittish(x))","output":"All the squirrels that can be spotted near the campus are skittish."}
{"input":"CanBeSpottedNear(rockie, campus) ∧ Calm(rockie) ","output":"Rockie can be spotted near the campus, and it is calm."}
{"input":"NetflixShow(strangerThings) ∧ Popular(strangerThings)","output":"\"Stranger Things\" is a popular Netflix show."}
{"input":"∀x ((NetflixShow(x) ∧ Popular(x)) → BingeWatch(karen, x))","output":"If a Netflix show is popular, Karen will binge-watch it."}
{"input":"∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) ↔ Download(karen, x))","output":"If and only if Karen binge-watches a Netflix show, she will download it."}
{"input":"¬Download(karen, blackMirror)","output":"Karen does not download \"Black Mirror.\""}
{"input":"NetflixShow(blackMirror)","output":"\"Black Mirror\" is a Netflix show."}
{"input":"∀x ((NetflixShow(x) ∧ BingeWatch(karen, x)) → ShareWith(karen, x, lisa))","output":"If Karen binge-watches a Netflix show, she will share it with Lisa."}
{"input":"CapitalOf(beijing, peoplesRepublicOfChina)","output":"Beijing is the capital of the People's Republic of China. "}
{"input":"∃x (CapitalOf(beijing, x) → WorldsMostPopulousNation(x))","output":"Beijing is the capital city of the world's most populous nation."}
{"input":"LocatedIn(beijing, northernChina)","output":"Beijing is located in Northern China."}
{"input":"Hosted(beijing, 2008SummerOlympics) ∧ Hosted(beijing, 2008SummerParalympicGames)","output":"Beijing hosted the 2008 Summer Olympics and 2008 Summer Paralympics Games."}
{"input":"Hosted(beijing, summerOlympics) ∧ Hosted(beijing, winterOlympics) ∧ Hosted(beijing, summerParalympicGames)  ∧ Hosted(beijing, winterParalympicGames)","output":"Beijing has hosted the Summer and Winter Olympics and the Summer and Winter Paralympics."}
{"input":"∃x (University(x) ∧ InBeijing(x) ∧ ConsistentlyRankAmongTheBestIn(x, theWorld))","output":"Many of Beijing's 91 universities consistently rank among the best universities in the world."}
{"input":"∀x (Alien(x) → Extraterrestrial(x))","output":"All aliens are extraterrestrials."}
{"input":"∀x (From(x, mars) → Alien(x))","output":"If someone is from Mars, then they are an alien."}
{"input":"∀x (Extraterrestrial(x) → ¬Human(x))","output":"No extraterrestrials are human."}
{"input":"∀x (HighlyIntelligentBeing(x) ∧ From(x, earth) → Human(x))","output":"All highly intelligent beings from Earth are humans."}
{"input":"HighlyIntelligentBeing(marvin)","output":"Marvin is a highly intelligent being."}
{"input":"¬(From(marvin, earth) ⊕ From(marvin, mars))","output":"Marvin is either from Earth and from Mars, or he is from neither."}
{"input":"¬From(marvin, earth) → Extraterrestrial(marvin)","output":"If Marvin is not from Earth, then Marvin is an extraterrestrial."}
{"input":"∀x (At(x, mixer) → (GrandSlam(x) ∧ Champion(x)) ∨ (OscarNominated(x) ∧ Actor(x)))","output":"Everyone at the mixer is a Grand Slam champion or an Oscar-nominated actor."}
{"input":"∀x (At(x, mixer) ∧ (GrandSlam(x) ∧ Champion(x) → Professional(x) ∧ TennisPlayer(x))","output":"Every Grand Slam champion at the mixer is a professional tennis player."}
{"input":"∀x (At(x, mixer) ∧ (OscarNominated(x) ∧ Actor(x) → Celebrity(x))","output":"All Oscar-nominated actors at the mixer are celebrities."}
{"input":"∀x (At(x, mixer) ∧ Professional(x) ∧ TennisPlayer(x) → Athlete(x))","output":"All professional tennis players at the mixer are athletes."}
{"input":"∀x (At(x, mixer) ∧ Celebrity(x) → WellPaid(x))","output":"If a person at the mixer is a celebrity, then they are well paid."}
{"input":"∀x (At(x, mixer) ∧ Athlete(x) → Famous(x))","output":"If a person at the mixer is an athlete, then they are famous."}
{"input":"∀x (At(x, mixer) ∧ WellPaid(x) → LiveIn(x, taxHaven))","output":"All well-paid people at the mixer live in tax havens."}
{"input":"At(djokovic, mixer) ∧ (Famous(djokovic) ∧ Athlete(djokovic) → WellPaid(djokovic))","output":"Djokovic is at the mixer: if Djokovic is a famous athlete, then Djokovic is well-paid."}
{"input":"ProfessionalWrestlingStable(diamondMine) ∧ In(diamondMine, wWE)","output":"Diamond Mine is a professional wrestling stable formed in WWE."}
{"input":"Leads(roderickStrong, diamondMine)","output":"Roderick Strong leads Diamond Mine."}
{"input":"Includes(diamondMine, creedBrothers) ∧ Includes(diamondMine, ivyNile)","output":"Diamond Mine includes the Creed Brothers and Ivy Nile."}
{"input":"Feuds(imperium, diamondMine)","output":"Imperium has a feud with Diamond Mine."}
{"input":"MusicPiece(symphony9)","output":"Symphony No. 9 is a music piece."}
{"input":"∀x (MusicPiece(x) → ∃y (Composer(y) ∧ Write(y, x)))","output":"Composers write music pieces."}
{"input":"Writtenby(symphony9, beethoven)","output":"Beethoven wrote Symphony No. 9."}
{"input":"Premiered(viennaMusicSociety, symphony9)","output":"Vienna Music Society premiered Symphony No. 9."}
{"input":"Orchestra(viennaMusicSociety)","output":"Vienna Music Society is an orchestra."}
{"input":"Lead(beethoven, viennaMusicSociety)","output":"Beethoven leads the Vienna Music Society."}
{"input":"∀x (Orchestra(x) → (∃y Conductor(y) ∧ Lead(y, x)))","output":"Orchestras are led by conductors."}
{"input":"∀x (Adore(max, x) ∧ ZahaHadid(x) ∧ DesignStyle(x) → InterestingGeometry(x))","output":"All of Zaha Hadid's design styles that Max adores have interesting geometries."}
{"input":"∀x (Adore(max, x) ∧ BrutalistBuilding(x) → ¬InterestingGeometry(x))","output":"No brutalist buildings that Max adores have interesting geometries."}
{"input":"∀x (Adore(max, x) → ((ZahaHadid(x) ∧ DesignStyle(x)) ⊕ (KellyWearstler(x) ∧ DesignStyle(x)))","output":"Every style that Max adores is either Zaha Hadid's design style or Kelly Wearstler's design style. "}
{"input":"∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Evocative(x))","output":"All of Kelly Wearstler's design styles that Max adores are evocative."}
{"input":"∀x (Adore(max, x) ∧ KellyWearstler(x) ∧ DesignStyle(x) → Dreamy(x))","output":"All of Kelly Wearstler's design styles that Max adores are dreamy."}
{"input":"∃x (Adore(max, x) ∧ Design(x) ∧ ByMax(x) ∧ InterestingGeometry(x) → BrutalistBuilding(x) ∧ Evocative(x))","output":"If a design by Max that he adores has interesting geometries, then the design is a brutalist building and evocative."}
{"input":"∀x (RankedHighlyBy(x, womensTennisAssociation) → MostActivePlayerIn(x, majorTennis))","output":"If someone is ranked highly by the Women's Tennis Association, then they are one of the most active players in major tennis. "}
{"input":"∀x (LostTo(x, świątek) ∧  At(x, rolandGarros2022) → RankedHighlyBy(x, womensTennisAssociation))","output":"Everyone who lost to Iga Świątek at Roland Garros 2022 is ranked highly by the Women's Tennis Association."}
{"input":"∀x (FemaleTennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧  At(x, rolandGarros2022))","output":"All female tennis players at Roland Garros 2022 lost to Iga Świątek."}
{"input":"∀x (TennisPlayer(x) ∧ At(x, rolandGarros2022) → (Female(x) ∧ TennisPlayer(x)) ⊕ (Male(x) ∧ TennisPlayer(x))) ","output":"All tennis players at Roland Garros 2022 are either female or male."}
{"input":"∀x (Male(x) ∧ TennisPlayer(x) ∧ At(x, rolandGarros2022) → LostTo(x, świątek) ∧ At(x, rolandGarros2022))","output":"All male tennis players at Roland Garros in 2022 lost to Rafael Nadal."}
{"input":"RankedHighlyBy(cocoGauff, womensTennisAssociation) ∨ (LostTo(cocoGauff, świątek) ∧ LostAt(cocoGauff, rolandGarros2022)) → ¬(Male(cocoGauff) ∧ TennisPlayer(cocoGauff) ∧ AtRolandGarros2022(cocoGauff))","output":"If Coco Gauff is ranked highly by the Women's Tennis Association or lost to Rafael Nadal, then Coco Gauff is not a male tennis player at Roland Garros 2022."}
{"input":"TennisPlayer(cocoGauff) ∧ At(cocoGauff, rolandGarros2022)","output":"Coco Gauff is at Roland Garros 2022."}
{"input":"∀x (Cat(x) → Mammal(x))","output":"All cats are mammals."}
{"input":"∃x (Pet(x) ∧ ¬Mammal(x))","output":"Some pets are not mammals."}
{"input":"Season(spring) ∨ Season(summer) ∨ Season(fall) ∨ Season(winter) ∧ (Season(spring) → ¬Season(summer) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(summer) → ¬Season(spring) ∧ ¬Season(fall) ∧ ¬Season(winter)) ∧ (Season(fall) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(winter)) ∧ (Season(winter) → ¬Season(spring) ∧ ¬Season(summer) ∧ ¬Season(fall))","output":"There are four seasons in a year: Spring, Summer, Fall, and Winter."}
{"input":"∀x (Want(x, longvacation) → Favorite(x, summer))","output":"All students who want to have a long vacation have summer as their favorite season."}
{"input":"Favorite(emma, summer)","output":"Emma's favorite season is summer."}
{"input":"∀x ∀y (Season(x) ∧ Season(y) ∧ Favorite(mia, x) ∧ Favorite(emma, y) → ¬(x=y))","output":"Mia's favorite season is not the same as Emma's. "}
{"input":"Want(james, longVacation)","output":"James wants to have a long vacation."}
{"input":"∀x (DigitalMedia(x) → ¬AnalogMedia(x))","output":"No digital media are analog."}
{"input":"∀x (PrintedText(x) → AnalogMedia(x))","output":"Every printed text is analog media."}
{"input":"∀x (StreamingService(x) → DigitalMedia(x))","output":"All streaming services are digital media."}
{"input":"∀x (HardcoverBook(x) → PrintedText(x))","output":"If an object is a hardcover book, then it is printed text."}
{"input":"StreamingService(1984) → HardcoverBook(1984)","output":"If 1984 is a streaming service, then 1984 is a hardcover book."}
{"input":"∀x (RomanceLanguage(x) → IndoEuropeanLanguage(x))","output":"All Romance languages are Indo-European languages."}
{"input":"∀x (RomanceLanguage(x) → MemberOf(x, languageFamily))","output":"Romance languages are a language family."}
{"input":"∀x ∀y ∀z ((MemberOf(x, z) ∧ MemberOf(y, z)) → (Related(x, y) ∧ Related(y, x)))","output":"All languages within a language family are related to each other."}
{"input":"RomanceLanguage(french) ∧ RomanceLanguage(spanish)","output":"French and Spanish are both Romance languages."}
{"input":"Related(german, spanish)","output":"German is related to Spanish."}
{"input":"∀x (Language(x) → ¬Related(basque, x))","output":"Basque is not related to any other language."}
{"input":"Striker(robertLewandowski)","output":"Robert Lewandowski is a striker."}
{"input":"∀x (Striker(x) → SoccerPlayer(x))","output":"Strikers are soccer players."}
{"input":"Left(robertLewandowski, bayernMunchen)","output":"Robert Lewandowski left Bayern Munchen."}
{"input":"∀x ∀y (Left(x, y) → ¬PlaysFor(x, y))","output":"If a player leaves a team they no longer play for that team."}
{"input":"City(billings) ∧ In(billings, montana)","output":"Billings is a city in the state of Montana in U.S."}
{"input":"City(butte) ∧ In(butte, montana) ∧ City(helena) ∧ In(helena, montana) ∧ City(missoula) ∧ In(missoula, montana)","output":"The state of Montana includes the cities of Butte, Helena, and Missoula."}
{"input":"∃x (City(whitesulphursprings) ∧ In(whitesulphursprings, x) ∧ City(butte) ∧ In(butte, x))","output":"White Sulphur Springs and Butte are cities in the same state in U.S."}
{"input":"City(pierre) ∧ ¬(In(pierre, montana))","output":"The city of St Pierre is not in the state of Montana."}
{"input":"∀x ((City(x) ∧ City(butte) ∧ In(x, butte)) → ¬(In(x, pierre)))","output":"Any city in Butte is not in St Pierre."}
{"input":"∀x ∃y ((City(x) ∧ (In(x, y) ∧ ¬(x=bristol) ∧ ¬(x=texarkana) ∧ ¬(x=texhoma) ∧ ¬(x=unionCity)) → ¬∃z (¬(z=y) ∧ In(x, z)))","output":"A city can only be in one state in U.S.  except for Bristol, Texarkana, Texhoma and Union City."}
{"input":"∀x (InternationalStudent(x) ∧ In(x, unitedStates) → F1Visa(x) ⊕ J1Visa(x))","output":"International students in the US have either an F1 visa or a J1 visa."}
{"input":"∀x (InternationalStudent(x) ∧ In(x, unitedStates) ∧ F1Visa(x) ∧ WantToWorkIn(x, unitedStates) → Apply(x, cpt) ∨ Apply(x, opt))","output":"An international student in the US with an F1 visa needs to apply for CPT or OPT if the student wants to work in the US."}
{"input":"InternationalStudent(mike)","output":"Mike is an international student."}
{"input":"WantToWorkIn(x, unitedStates) → Apply(mike, cpt)","output":"Mike needs to apply for CPT if he wants to work in the US."}
{"input":"∀x (BrownSwissCattle(x) → Cow(x))","output":"All Brown Swiss cattle are cows."}
{"input":"∃x (Pet(x) ∧ BrownSwissCattle(x))","output":"Some pets are Brown Swiss Cattle."}
{"input":"∀x (Cow(x) → DomesticatedAnimal(x))","output":"All cows are domesticated animals."}
{"input":"∀x (Aligator(x) → ¬DomesticatedAnimal(x))","output":"Alligators are not domesticated animals."}
{"input":"Aligator(ted)","output":"Ted is an alligator."}
{"input":"PrivateIvyLeagueResearchUniversity(yaleUniversity)","output":"Yale University is a private Ivy League research university."}
{"input":"MovedTo(yaleUniversity, newHaven) ∧ MovedIn(yaleUniversity, year1716)","output":"Yale University moved to New Haven in 1716."}
{"input":"ValuedAt(yaleUniversitysEndowment, 42point3billion)","output":"Yale university's endowment was valued at $42.3 billion."}
{"input":"∀x (ResidentialCollege(x) → At(x, yale) ∧ (BenjaminFranklinCollege(x) ⊕ BerkleyCollege(x) ⊕ BranfordCollege(x) ⊕ DavenportCollege(x) ⊕ EzraStilesCollege(x) ⊕ GraceHopperCollege(x) ⊕ JonathanEdwardsCollege(x) ⊕ MorseCollege(x) ⊕ PauliMurrayCollege(x) ⊕ PiersonCollege(x) ⊕ SaybrookCollege(x) ⊕ SillimanCollege(x) ⊕ TimothyDwightCollege(x) ⊕ TrumbullCollege(x)))","output":"A list of residential colleges at Yale: Benjamin Franklin College, Berkeley College, Branford College, Davenport College, Ezra Stiles College, Grace Hopper College, Jonathan Edwards College, Morse College, Pauli Murray College, Pierson College, Saybrook College, Silliman College, Timothy Dwight College, and Trumbull College."}
{"input":"∃x (BritishSitcom(badults) ∧ Series(badults) ∧ MemberOf(x, pappys) ∧ Starring(badults, x))","output":"Badults is a British Sitcom series starring members of Pappy's."}
{"input":"PilotedIn(badults, july2013) ∧ PilotedOn(badults, bBCThree)","output":"Badults was piloted in July 2013 on BBC Three."}
{"input":"WorkingTitle(theSecretDudeSociety, badults) ∧ UsedFor(theSecretDudeSociety, badults)","output":"The Working title \"The Secret Dude Society\" was used for Badults."}
{"input":"ScriptEditorFor(andrewCollins, badults)","output":"Andrew Collins was the script editor for Badults."}
{"input":"∀x (GrowthStock(x) → BoughtToEarnProfitFrom(x, rapidPriceAppreciation))","output":"All growth stocks are bought to earn profits from rapid price appreciation."}
{"input":"∀x (BoughtToEarnProfitFrom(x, earnProfit, rapidPriceAppreciation) → ¬SuitableFor(x, retirementFund)) ","output":"If the stock price is bought to earn profits from rapid price appreciation, then it is not suitable for a retirement fund."}
{"input":"∃x (Stock(x) ∧ GrowthStock(x))","output":"Some stocks are growth stocks."}
{"input":"∀x (MatureStock(x) → SuitableFor(x, retirementFund))","output":"All mature stocks are suitable for a retirement fund."}
{"input":"MatureStock(kO)","output":"KO is a mature stock."}
{"input":"∀x (VehicleRegistrationPlateIn(x, istanbul) → BeginWith(x, num34))","output":"All vehicle registration plates in Istanbul begin with the number 34."}
{"input":"∀x (¬BeginWith(x, num34) → ¬FromIstanbul(x))","output":"Plates that do not begin with the number 34 are not from Istanbul. "}
{"input":"∃x (Owns(joe, x) ∧ VehicleRegistrationPlateIn(x, istanbul))","output":"Joe's vehicle registration plate is from Istanbul. "}
{"input":"∃x (Owns(tom, x) ∧ BeginWith(x, num35))","output":"Tom's license plate begins with the number 35. "}
{"input":"∀x (BeginWith(x, num35) → ¬BeginWith(x, num34))","output":"If a license plate begins with the number 35, then it does not begin with the number 34."}
{"input":"∀x (At(x, marysSchool) ∧ WorkIn(x, studentJob, campus) → NeedToEarnMoneyToHelpPayFor(x, collegeTuition))","output":"If people at Mary's school work in student jobs on campus, then they need to earn money to help pay for their college tuition."}
{"input":"∀x (At(x, marysSchool) ∧ OrderFrequently(x, takeout) → WorkIn(x, studentJob, campus))","output":"If people at Mary's school order takeout frequently in college, then they work in student jobs on campus."}
{"input":"∀x (At(x, marysSchool) ∧ (OrderFrequently(x, takeout) ∨ Enjoy(x, diningHallMeal)))","output":"People at Mary's school order takeout frequently in college or enjoy the dining hall meals and recipes."}
{"input":"∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → ¬PickyEater(x))","output":"If people at Mary's school enjoy the dining hall meals and recipes, then they are not picky eaters."}
{"input":"∀x (At(x, marysSchool) ∧ Enjoy(x, diningHallMeal) → Spend(x, aLotOfTime, eating) ∧ Spend(x, aLotOfTime, catchingUpWithFriends, diningHall))","output":"If people at Mary's school enjoy the dining hall meals and recipes, then they spend a lot of their time eating and catching up with friends in the campus dining halls."}
{"input":"At(hannah, marysSchool)","output":"Hannah is at Mary's school."}
{"input":"(WorkIn(hannah, studentJob, campus) ∧ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition) → ¬(PickyEater(hannah) ∨ NeedToEarnMoneyToHelpPayFor(hannah, collegeTuition))","output":"Hannah works in student jobs on campus and if she needs to earn money to help pay for her college tuition, then she is neither picky nor needs to earn money to help pay for her college tuition."}
{"input":"∀x (BakedSweet(x) → ¬Spicy(x))","output":"No baked sweets are spicy."}
{"input":"∀x (Cupcake(x) → BakedSweet(x))","output":"All cupcakes are baked sweets."}
{"input":"∀x (MalaHotpot(x) → Spicy(x))","output":"All mala hotpots are spicy."}
{"input":"∀x (Product(x) ∧ From(x, bakedByMelissa) → Cupcake(x))","output":"All products from Baked by Melissa are cupcakes."}
{"input":"Spicy(driedThaiChili) ∨ MalaHotpot(driedThaiChili)∨ ¬BakedSweet(driedThaiChili)","output":"Dried Thai chilies are spicy or mala hotpots or not baked sweets."}
{"input":"∀x ∃y (ListedIn(x, yelpRecommendation) → NegativeReview(y) ∧ ¬Receive(x, y))","output":"If a restaurant is listed in Yelp’s recommendations, then the restaurant has not received many negative reviews."}
{"input":"∀x ∀y (HaveRating(x, y) ∧ GreaterThan(y, 4) → ListedIn(x, yelpRecommendation))","output":"All restaurants with a rating greater than four are listed in Yelp’s recommendations."}
{"input":"∃x ∃y (¬Provide(x, takeOutService) → NegativeReview(y) ∧ Receive(x, y))","output":"Some restaurants that do not provide take-out service receive many negative reviews."}
{"input":"∀x ∀y (PopularAmong(x, localResidents) → HaveRating(x, y) ∧ GreaterThan(y, 4))","output":"All restaurants that are popular among local residents have ratings greater than four."}
{"input":"∀x (HaveRating(hamdenPlazaSubway, x) ∧ GreaterThan(x, 4) ⊕ PopularAmong(hamdenPlazaSubway, localResidents))","output":"The Hamden Plaza Subway store has a rating greater than four, or it is popular among local residents."}
{"input":"∀x ∀y (SuperheroMovie(x) ∧ In(y, x) ∧ GoodGuy(y) → Wins(y))","output":"In superhero movies, the good guys always win."}
{"input":"SuperheroMovie(theSurprisingAdventuresofSirDigbyChickenCaesar)","output":"The Surprising Adventures of Sir Digby Chicken Caesar is a superhero movie."}
{"input":"∀x ∀y (GoodGuy(x) ∧ Fight(x, y) ⟷ BadGuy(y) ∧ Fight(y, x))","output":"Good guys fight bad guys and vice versa."}
{"input":"Fight(sirDigby, sirDigbysNemesis)","output":"Sir Digby fights his nemesis."}
{"input":"∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → GoodGuy(y))","output":"If a superhero movie is named after a character, that character is a good guy."}
{"input":"NamedAfter(theSurprisingAdventuresofSirDigbyChickenCaesar, sirDigby)","output":"The Surprising Adventures of Sir Digby Chicken Caesar is named after Sir Digby."}
{"input":"∀x ∀y (Fights(x, y) ∧ Win(x) → ¬Wins(y))","output":"If somebody wins a fight, the person they are fighting does not win."}
{"input":"∀x ∀y (SuperheroMovie(x) ∧ NamedAfter(x, y) → In(y, x))","output":"If a superhero movie is named after a character, that character is in the movie."}
{"input":"∀x (Book(x) → Contains(x, knowledge))","output":"Books contain tons of knowledge."}
{"input":"∀x ∀y (ReadBook(x, y) → Gains(x, knowledge))","output":"When a person reads a book, that person gains knowledge. "}
{"input":"∀x (Gains(x, knowledge) → Smarter(x))","output":"If a person gains knowledge, they become smarter."}
{"input":"ReadBook(harry, walden) ∧ Book(walden)","output":"Harry read the book “Walden” by Henry Thoreau."}
{"input":"∀x (NaturalLanguageProcessingTask(x) → LanguageGenerationTask(x) ⊕ LanguageUnderstandingTask(x))","output":"A natural language processing task can be categorized as either a language generation task or a language understanding task."}
{"input":"∀x (NaturalLanguageProcessingTasks(x) ∧ OutputSequence(x, text) → LanguageGenerationTask(x))","output":"If the output of a natural language processing task is a text sequence, then it is a language generation task."}
{"input":"NaturalLanguageProcessingTask(machineTranslation)","output":"Machine translation is a natural language processing task."}
{"input":"OutputSequence(machineTranslation, text)","output":"The output of machine translation is a text sequence."}
{"input":"∃x (ManagedBuilding(x) ∧ AllowPet(x))","output":"Pets are allowed in some managed buildings."}
{"input":"∀x ∀y (ManagedBuilding(x) ∧ RentApartmentIn(y, x) → DepositRequired(y))","output":"A deposit is required to rent an apartment in a managed building."}
{"input":"∀x ∀y ∀z (SecurityDeposit(x) ∧ ManagedBuilding(z) ∧ MonthlyRentAt(y, z) → (MoreThan(x, y) ⊕ Equal(x, y))","output":"The security deposit can be either equal to the monthly rent at a managed building or more."}
{"input":"Cat(fluffy) ∧ BelongTo(fluffy, tom)","output":"Fluffy is Tom's cat."}
{"input":"∀x (Cat(x) → Pet(x))","output":"Cats are pets."}
{"input":"ManagedBuilding(oliveGarden)","output":"The Olive Garden is a managed building."}
{"input":"MonthlyRentAt(uSD2000, oliveGarden)","output":"The monthly rent at the Olive Garden is $2000."}
{"input":"MoreThan(uSD2000, uSD1500)","output":"$2000 is more than $1500."}
{"input":"∀x ∀y (ManagedBuilding(x) ∧ AllowedToMoveInWith(tom, x, fluffy) ∧ SecurityDeposit(y) ∧ ¬MoreThan(y, uSD1500) → RentApartmentIn(tom, x))","output":"Tom will rent an apartment in a managed building if he is allowed to move in with Fluffy, and the security deposit is no more than $1500."}
{"input":"∀x ∀y ∀z (ManagedBuilding(x) ∧ AllowPet(x) ∧ Pet(z) → AllowedToMoveInWith(y, x, z))","output":"If a managed building allows pets, then people are allowed to move in with a pet. "}
{"input":"∀x (BusinessOrganization(x) → LegalEntity(x))","output":"All business organizations are legal entities."}
{"input":"∀x (Company(x) → BusinessOrganization(x))","output":"All companies are business organizations."}
{"input":"∀x (PrivateCompany(x) → Company(x))","output":"All private companies are companies."}
{"input":"∀x (LegalEntity(x) → CreatedUnderLaw(x))","output":"All legal entities are created under law. "}
{"input":"∀x (LegalEntity(x) → LegalObligation(x))","output":"All legal entities have legal obligations."}
{"input":"CreatedUnderLaw(harvardWeeklyBookClub) → ¬PrivateCompany(harvardWeeklyBookClub)","output":"If the Harvard Weekly Book Club is created under law, then it is not a private company. "}
{"input":"∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))","output":"Animals are either invertebrates or vertebrates."}
{"input":"∀x (Animal(x) ∧ With(x, backbone) → ReproduceBy(x, male-and-femaleMating))","output":"All animals with backbones reproduce by male-and-female mating. "}
{"input":"∀x (Animal(x) ∧ Vertebrate(x) → With(x, backbone))","output":"All vertebrate animals have a backbone."}
{"input":"∀x (Bee(x) → ¬ReproduceBy(x, male-and-femaleMating))","output":"All bees do not reproduce by male-and-female mating."}
{"input":"∀x (QueenBee(x) → Bee(x))","output":"All queen bees are bees."}
{"input":"Bee(harry)","output":"Harry is a bee."}
{"input":"∀x (BornIn(x, multipleBirth) → SpendTimePlayingWith(x, sibling))","output":"People who are born in a multiple birth with siblings spend a lot of time hanging out with and playing with their siblings."}
{"input":"∀x (∃y (Sibling(x, y) ∧ BornTogether(y)) → BornIn(x, multipleBirth))","output":"If people have siblings who were born together, then they were born in a multiple birth."}
{"input":"∀x (ComplainAboutOften(x, annoyingSiblings) → ∃y (Sibling(x, y) ∧ BornTogether(y)))","output":"If people complain often about annoying siblings, then they have siblings who were born together."}
{"input":"∀x (LiveAt(x, home) → ¬LiveWith(x, strangers))","output":"If people live at home, then they do not live with strangers."}
{"input":"∀x (SpendTimeplayingWith(x, sibling) → LiveAt(x, home))","output":"If people spend a lot of time hanging out with and playing with their siblings, then they often live at home. "}
{"input":"¬(BornIn(luke, multipleBirth) ⊕ LiveWith(luke, strangers))","output":"Luke either is a baby born in a multiple birth and live with strangers, or is not a baby born in a multiple birth and does not live with strangers"}
{"input":"Cost(gRE, 205) ∧ Cheaper(205, 300)","output":"It costs $205 to take the GRE test, which is cheaper than $300."}
{"input":"∀x (ApplicantOf(x, gre) ∧ Prove(x, economicHardship) → ProvideTo(ets, financialAid, x))","output":"ETS provides financial aid to those GRE applicants who prove economic hardship."}
{"input":"∀x (LivingIn(x, singleParentFamily) ∨ AvailableTo(fewResources, x) → Prove(x, economicHardship))","output":"Those living in single-parent families or having few resources available to them can prove economic hardship."}
{"input":"LivingIn(tom, singleParentFamily)","output":"Tom lives in a single-parent family."}
{"input":"OutOfWork(tomsDad) ∧ AvailableTo(fewResources, tom)","output":"Tom's dad has been out of work, and Tom has few resources available to them. "}
{"input":"ApplicantOf(tom, gre)","output":"Tom is applying to take the GRE test."}
{"input":"∀x (Spill(x, aLotOfFood, clothing) → ¬NotablyTidy(x))","output":"If people spill a lot of food on their clothing, then they are not notably tidy."}
{"input":"∀x (ClumsyFoodie(x) ∧ GoOutFrequentlyToFindToTry(x, newFoodRestaurant) → SpillOn(x, aLotOfFood, clothing))","output":"All clumsy foodies who go out frequently to find new food restaurants to try are people who spill a lot of food on their clothing."}
{"input":"∀x (Cleanly(x) → NotablyTidy(x))","output":"If people are cleanly, then they are notably tidy."}
{"input":"∀x (Value(x, order) ∧ Value(x, spotlessness) → Cleanly(x))","output":"If people value order and spotlessness, then they are cleanly."}
{"input":"∀x ((∃y (FamilyOf(y, x) ∧ Prioritize(y, order) ∧ Prioritize(y, spotlessness)) → Value(x, order) ∧ Value(x, spotlessness)) ","output":"All people whose families prioritize order and spotlessness themselves value order and spotlessness."}
{"input":"¬(Spill(peter, aLotOfFood, clothing) ⊕ Cleanly(peter))","output":"Peter is either a person who spills a lot of food on his clothing and is cleanly, or a person who does not spill a lot of food on his clothing and is not cleanly"}
{"input":"∀x (FirTree(x) → Evergreen(x))","output":"All fir trees are evergreens."}
{"input":"∃x ∃y (ObjectOfWorship(x) ∧ ObjectOfWorship(y) ∧ FirTree(x) ∧ FirTree(y) ∧ ¬(x=y))","output":"Some objects of worship are fir trees."}
{"input":"MountainRange(thePicurisMountains) ∧ (In(thePicurisMountains, newMexico) ⊕ In(thePicurisMountains, texas))","output":"The Picuris Mountains are a mountain range in New Mexico or Texas."}
{"input":"Visited(juanDeOnate, thePicurisMountains)","output":"Juan de Onate visited the Picuris Mountains."}
{"input":"In(hardingPegmatiteMine, thePicurisMountains) ∧ Mine(hardingPegmatiteMine) ∧ Donated(hardingPegmatiteMine)","output":"The Harding Pegmatite Mine, located in the Picuris Mountains, was donated."}
{"input":"∀x ∀y (Mine(x) ∧ Donated(x) ∧ In(x, y) ∧ MountainRange(y) → ¬In(y, texas))","output":"There are no mountain ranges in texas that have mines that have been donated."}
{"input":"∀x ∀y (Man(x) ∧ Man(y) ∧ Taller(x, y) → CanBlock(x, y))","output":"If a man is taller than another man, the taller one can block the other's shooting."}
{"input":"∀x (Man(x) ∧ SameClass(x, michael) ∧ ¬(x=michael) → Taller(michael, x))","output":"Michael is a man who is taller than everyone else in his class."}
{"input":"∀x ∀y ∀z ((Taller(x, y) ∧ Taller(y, z)) → Taller(x, z))","output":"If person x is taller than person y, and person y is taller than person z, then x is taller than z"}
{"input":"Man(peter) ∧ Taller(peter, michael)","output":"Peter is a man who is taller than Michael."}
{"input":"∀x (¬JumpWhenShooting(x) → CanBlock(michael, x))","output":"Michael can block any shooting from a person as long as the person does not jump when shooting."}
{"input":"¬CanBlock(michael, windy)","output":"Michael cannot block Windy's shooting."}
{"input":"∀x (JumpWhenShooting(x) → GreatShooter(x))","output":"Every shooter who can jump when shooting is a great shooter."}
{"input":"Cove(barutinCove) ∧ NamedAfter(barutinCove, barutinSettlement) ∧ LocatedIn(barutinSettlement, bulgaria)","output":"Barutin Cove is a cove named after the Bulgarian settlement of Barutin."}
{"input":"LocatedIn(barutinCove, snowIsland)","output":"Barutin Cove is on the southwest coast of Snow Island."}
{"input":"LocatedIn(snowIsland, southShetlandIslands) ∧ LocatedIn(greenwichIsland, southShetlandIslands) ∧ LocatedIn(deceptionIsland, southShetlandIslands)","output":"Snow Island, Greenwich Island, and Deception Island are located in the South Shetland Islands."}
{"input":"LocatedIn(southShetlandIslands, antarctica)","output":"Antarctica is located on the South Shetland Islands. "}
{"input":"∀x ∀y ∀z ((LocatedIn(x, y) ∧ LocatedIn(y, z)) → LocatedIn(x, z))","output":"If place A is located in place B and place B is located in place C, then place A is located in place C."}
{"input":"∃x (Affection(x) ∧ Love(x))","output":"Some affection is love."}
{"input":"∃x (Love(x) ∧ Positive(x))","output":"Some love is positive."}
{"input":"∀x (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)) → ¬OneSeater(x))","output":"If something can transport multiple passengers, then they are not one-seaters."}
{"input":"∀x (TeslaModel3(x) → (∃y ∃z (Passenger(y) ∧ Passenger(z) ∧ Transport(x, y) ∧ Transport(x, y) ∧ ¬(y=z)))","output":"All Tesla Model 3 can transport multiple passengers."}
{"input":"∀x (SingleSeat(x) ∧ ElectricCar(x) → OneSeater(x))","output":"All single-seat electric cars are one-seaters."}
{"input":"∀x (SoloEV(x) ∧ Car(x) → SingleSeat(x) ∧ ElectricCar(x))","output":"All Solo EV cars are single-seat electric cars. "}
{"input":"¬TeslaModel3(johnsCar) → ¬(TeslaModel3(johnsCar) ∨ (SingleSeat(x) ∧ ElectricCar(johnsCar)))","output":"If John's car is not a Tesla Model 3, then John's car is not a Tesla Model 3 or a single-seat electric car. "}
{"input":"∀x (PetersPet(x) ∧ Mammal(x) → Animal(x))","output":"All of Peter's pets that are mammals are also animals."}
{"input":"∀x (Monkey(x) → Mammal(x))","output":"All monkeys are mammals. "}
{"input":"∀x (PetersPet(x) → Monkey(x) ⊕  Bird(x))","output":"Peter's pets are all either monkeys or birds. "}
{"input":"∀x (Bird(x) → CanFly(x))","output":"Peter's birds can fly."}
{"input":"∀x (PetersPet(x) ∧ Animal(x) → Breathe(x))","output":"All animals that are Peter's pets can breathe."}
{"input":"∀x (PetersPet(x) ∧ CanFly(x) → ∃y ∃z (¬(y=z) ∧ Wing(y) ∧ Wing(z) ∧ Have(x, y) ∧ Have(x, z)))","output":"If Peter's pet can fly, then it has wings."}
{"input":"PeterSPet(rock)","output":"Rock is Peter's pet."}
{"input":"CanFly(rock) ∨ Bird(rock) ∨ ¬Breathe(rock)","output":"Rock can fly, or Rock is a bird, or Rock cannot breathe. "}
{"input":"∀x (Make(x, weddingPlan) → Engaged(x))","output":"All people who make wedding plans are people who are engaged."}
{"input":"∀x (∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)) → Make(x, weddingPlan))","output":"All people who invite others to come to their ceremony make wedding plans."}
{"input":"∀x (Have(x, wellAttendedWedding) → ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(x, y, wedding) ∧ InviteToComeTo(x, z, wedding)))","output":"Anyone who has a well-attended wedding invites others to come to their ceremony."}
{"input":"∃x (Have(x, wellAttendedWedding) ∧ Have(x, largerFamily))","output":"Some people that have well-attended weddings have larger families."}
{"input":"Engaged(john) → ¬(∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ InviteToComeTo(john, y, wedding) ∧ Invite(john, z, comeTo, wedding))) ∧ Make(john, weddingPlan)","output":"If John is engaged, then John does not invite friends to their ceremony and make wedding plans."}
{"input":"Have(john, largerFamily) → Have(john, wellAttendedWedding) ⊕ ∃y ∃z (¬(y=x) ∧ ¬(z=x) ∧ ¬(y=z) ∧ Invite(x, y, comeTo, wedding) ∧ InviteToComeTo(x, z, wedding))","output":"If John has a larger family, then either John has a well-attended wedding or invites friends to their ceremony. "}
{"input":"∃x ∃y (Mammal(x) ∧ Mammal(y) ∧ (¬(x=y)) ∧ Have(x, teeth) ∧ Have(y, teeth))","output":"Some mammals have teeth."}
{"input":"¬Have(platypus, teeth)","output":"Platypuses have no teeth."}
{"input":"Mammal(platypus)","output":"Platypuses are mammals. "}
{"input":"Have(humans, teeth)","output":"Humans have teeth."}
{"input":"∀x (Plunger(x) → Suck(x))","output":"Plungers suck."}
{"input":"∀x (Vacuum(x) → Suck(x))","output":"Vacuums suck."}
{"input":"∀x (Vampire(x) → Suck(x))","output":"Vampires suck."}
{"input":"Vacuum(space)","output":"Space is a vacuum."}
{"input":"HouseholdAppliance(duster) ∧ ¬Suck(duster)","output":"A duster is a household appliance that doesn't suck."}
{"input":"∀x (MachineLearningAlgorithm(x) → SupervisedLearningAlgorithm(x) ∨ UnsupervisedLearningAlgorithm(x) ∨ ReinforcementLearningAlgorithm(x))","output":"Machine Learning algorithms can be categorized as supervised learning, unsupervised learning, and reinforcement learning."}
{"input":"∀x (UnsupervisedLearningAlgorithm(x) → ¬Require(x, labeledData))","output":"Unsupervised learning algorithms do not require labeled data."}
{"input":"∀x (TrainedWith(stateOfTheArtTextSummarizationModel, x) → MachineLearningAlgorithm(x))","output":"The state-of-the-art text summarization model is trained with machine learning algorithms."}
{"input":"∀x (ReinforcementLearningAlgorithm(x) → ¬TrainedWith(stateOfTheArtTextSummarizationModel, x))","output":"Reinforcement learning is not used to train the state-of-the-art text summarization model."}
{"input":"∀x ((MachineLearningAlgorithm(x) ∧ TrainedWith(stateOfTheArtTextSummarizationModel, x)) → Require(x, labeledData))","output":"The Machine Learning algorithm for training text summarization models requires labeled data."}
{"input":"∀x (Film(x) ∧ Rated(x, adultsOnly) → CanWatchWithout(children, x, guidanceFromParents))","output":"If a film is appropriate for people of all ages, then children can watch it without guidance from parents."}
{"input":"∀x (Film(x) ∧ Contain(x, excessiveEroticContent) ∧ Contain(x, excessiveViolentContent) → ¬CanWatchWithout(children, x, guidanceFromParents))","output":"If a film contains excessive erotic and violent content, children cannot watch it without guidance from their parents."}
{"input":"∀x (Film(x) ∧ Rated(x, generalAudience) → AppropriateFor(x, peopleOfAllAges))","output":"If a film is rated General Audience, then it is appropriate for people of all ages."}
{"input":"∀x (Film(x) ∧ FamilyFriendly(x) ∧ Animated(x) → Rated(x, generalAudience))","output":"All family-friendly animated films are rated General Audience."}
{"input":"∀x (Film(x) ∧ InfrozenSeries(x) → FamilyFriendly(x) ∧ Animated(x))","output":"All movies in the Frozen series are family-friendly animated films."}
{"input":"Film(hachiAdogsTale)","output":"“Hachi: A dog’s Tale” is a film."}
{"input":"(FamilyFriendly(hachiAdogsTale) ∧ Animated(hachiAdogsTale)) ⊕ Rated(hachiAdogsTale, adultsOnly)","output":"“Hachi: A dog’s Tale”  is either a family-friendly animated film or is appropriate for people of all ages. "}
{"input":"∀x (BreedingBack(x) → (ArtificialSelection(x) ∧ DeliberateSelectiveBreedingOfDomesticAnimals(x)))","output":"Breeding back is a form of artificial selection by the deliberate selective breeding of domestic animals."}
{"input":"∃x ∃y (HeckCattle(x) ∧ BreedingBack(x) ∧ Auroch(y) ∧ Resemble(x, y))","output":"Heck cattle were bred back in the 1920s to resemble the aurochs."}
{"input":"∀x (HeckCattle(x) → Animal(x))","output":"Heck cattle are animals."}
{"input":"∀x (Auroch(x) → Animal(x))","output":"Aurochs are animals."}
{"input":"∃x ∃y (Animal(x) ∧ Animal(y) ∧ (¬(x=y)) ∧ BreedingBack(x) ∧ BreedingBack(y) ∧ (∃w(Dead(w) ∧ Resemble(x, w)) ∧ (¬(w=z)) ∧ (∃z(Dead(z) ∧ Resemble(y, z))))","output":"Some animals to be bred back resemble extinct animals."}
{"input":"∀x (CanRegisterToVoteIn(x, unitedStates) → CanParticipateIn(x, 2024UnitedStatesElection))","output":"Everyone who can register to vote in the United States can participate in the 2024 United States presidential election."}
{"input":"∀x (Have(x, unitedStatesCitizenship) → CanRegisterToVoteIn(x, unitedStates))","output":"If someone has United States citizenship, then they can register to vote in the United States."}
{"input":"∀x (Have(x, unitedStatesCitizenship) ∨ Have(x, taiwaneseCitizenship))","output":"A person either has United States citizenship or Taiwanese citizenship."}
{"input":"∀x (Russian(x) ∧ FederationOfficial(x) → ¬Have(x, taiwaneseCitizenship))","output":"No Russian Federation officials hold Taiwanese citizenship. "}
{"input":"¬Have(vladimir, taiwaneseCitizenship) ∧ ¬ManagerAt(vladimir, gazprom)","output":"Vladimir neither holds Taiwanese citizenship nor is he a manager at Gazprom. "}
{"input":"(Russian(ekaterina) ∧ FederationOfficial(ekaterina)) ∨ CanRegisterToVoteIn(ekaterina, unitedStates)","output":"Ekaterina she can register to vote in the United States, or she is a Russian federation official."}
{"input":"PublishingHouse(newVesselPress) ∧ SpecializesInTranslatingIntoEnglish(newVesselPress, foreignLiterature)","output":"New Vessel Press is a publishing house specializing in translating foreign literature into English."}
{"input":"∀x ((Book(x) ∧ PublishedBy(x, newVesselPress)) → In(x, english))","output":"All of New Vessel Press's published books are in English."}
{"input":"Book(neapolitanChronicles) ∧ PublishedBy(neapolitanChronicles, newVesselPress)","output":"Neapolitan Chronicles is a book published by New Vessel Press."}
{"input":"TranslatedFrom(neapolitanChronicles, italian)","output":"Neapolitan Chronicles was translated from Italian."}
{"input":"Book(palaceOfFlies) ∧ PublishedBy(palaceOfFlies, newVesselPress)","output":"Palace of Flies is a book published by New Vessel Press."}
{"input":"∀x (Hydrocarbon(x) → Orgranic(x) ∧ Compound(x))","output":"All hydrocarbons are organic compounds ."}
{"input":"∀x (Alkane(x) → Hydrocarbon(x))","output":"All alkanes are hydrocarbons"}
{"input":"∀x (Orgranic(x) ∧ Compound(x) → Chemical(x) ∧ Compound(x))","output":"All organic compounds are chemical compounds."}
{"input":"∀x (Orgranic(x) ∧ Compound(x) → Contain(x, carbon))","output":"All organic compounds contain carbon."}
{"input":"∀x (Chemical(x) ∧ Compound(x) → ∀y ∀z (¬(Contain(x, y) ∧ Contain(x, z) ∧ (y=z))))","output":"No chemical compounds contain only one element."}
{"input":"¬((Chemical(mixture) ∧ Compound(mixture)) ⊕ (∀y ∀z (Contain(x, y) ∧ Contain(x, z) ∧ y=z)))","output":"The mixture either both is a chemical compound and contains only one element, or neither. "}
{"input":"∀x (Human(x) → Mortal(x))","output":"All humans are mortal."}
{"input":"∀x (Greek(x) → Human(x))","output":"All Greeks are humans."}
{"input":"∀x (Student(x) ∧ WorkIn(x, library) → (¬From(x, computerScienceDepartment)))","output":"None of the students who currently work in the library are from the computer science department. "}
{"input":"∀x (Student(x) ∧ Have(x, partTimeJob) ∧ OfferedBy(y, university) → WorkIn(x, library))","output":"All of the students with part-time jobs offered by the university currently work in the library. "}
{"input":"∀x ((Student(x) ∧ Take(x, databaseCourse)) → From(x, computerScienceDepartment))","output":"All of the students who are taking the database course are from the computer science department. "}
{"input":"∀x ((Student(x) ∧ InstructedBy(x, professorDavid)) → Take(x, databaseCourse))","output":"All of the students taking a class with Professor David are taking the database course. "}
{"input":"∀x ((Student(x) ∧ WorkIn(x, lab)) → InstructedBy(x, professorDavid))","output":"All students working in the lab are taking a class with Professor David."}
{"input":"Student(james) ∧ WorkIn(james, lab)","output":"James is a student working in the lab. "}
{"input":"¬∃x (PartTimeJob(x) ∧ Have(james, x) ∧ OfferedBy(x, computerScienceDepartment)) ∧ ¬WorkIn(james, lab)","output":"James doesn't work in the lab or have a part-time job offered by the university."}
{"input":"LikeMusic(george) → WantToCompose(george)","output":"If George likes music, he wants to compose."}
{"input":"AccesstoProgram(george) → CanCompose(george)","output":"If George has access to a program, he can compose."}
{"input":"(WantToCompose(george) ∧ CanCompose(george)) → WillCompose(george)","output":"If George can compose and wants to compose, he will compose."}
{"input":"∀x (Hawk(x) → ¬Swim(x))","output":"A hawk never swims. "}
{"input":"∃x ∃y (Bird(x) ∧ Bird(y) ∧ Hawk(x) ∧ Hawk(y) ∧ ¬(x=y))","output":"Some birds are hawks."}
{"input":"∃x (Show(x) ∧ AiringAtOn(x, 8PMMonday) ∧ GivenOutOn(x, rose, tV))","output":"Some show airing at 8 pm on Monday gives out roses on TV."}
{"input":"∀x (Show(x) ∧ GivenOutOnAt(rose, tV, x) → TheBachelor(x))","output":"If a show gives out roses on TV, then the show is an episode of The Bachelor."}
{"input":"∀x (TheBachelor(x) → Portray(x, lifeOfRealPeople))","output":"The Bachelor portrays the lives of real people."}
{"input":"∀x (Portray(x, liveOfRealPeople) → RealityTVShow(x))","output":"All shows portraying the lives of real people are reality TV shows."}
{"input":"Show(breakingBad)","output":"Breaking Bad is a show."}
{"input":"¬RealityTVShow(breakingBad)","output":"Breaking Bad is not a reality TV show."}
{"input":"German(heinrichSchmidt) ∧ Politician(heinrichSchmidt)","output":"Heinrich Schmidt was a German politician. "}
{"input":"Member(heinrichSchmidt, prussianStateParliament) ∧ Member(heinrichSchmidt, naziReichstag)","output":"Heinrich Schmidt was also a member of the Prussian State Parliament and the Nazi Reichstag."}
{"input":"∀x (DeadlyDiseases(x) → ComeWith(x, lowSurvivalRate))","output":"If something is a deadly disease, then it comes with a low survival rate. "}
{"input":"∀x (SevereCancer(x) → DeadlyDiseases(x))","output":"Severe cancers are deadly diseases."}
{"input":"∀x (BileDuctCancer(x) → SevereCancer(x))","output":"Bile duct cancer is a severe form cancer. "}
{"input":"∀x (Cholangiocarcinoma(x) → BileDuctCancer(x))","output":"All Cholangiocarcinoma is bile duct cancer."}
{"input":"∀x (MildFlu(x) → ¬ComeWith(x, lowSurvivalRate)) ","output":"Mild flu comes with a low survival rate."}
{"input":"¬(BileDuctCancer(colorectalCancer) ∧ ComeWith(colorectalCancer, lowSurvivalRate))","output":"Colorectal cancer is not both a bile duct cancer and with a low survival rate."}
{"input":"∀x (RegularlyEat(x, salad) → ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatinggHabit))","output":"All people who eat salads regularly are very conscious about their health and eating habits."}
{"input":"∀x (GrewUpIn(x, health-consciousChildhoodHome) → RegularlyEat(x, salad))","output":"All people who grew up in health-conscious childhood homes eat salads regularly."}
{"input":"∀x (Fulfill(x, dailyNutritionalIntake) → GrewUpIn(x, health-consciousChildhoodHome))","output":"All people who fulfill their daily nutritional intakes grew up in health-conscious childhood homes."}
{"input":"∀x (Disregard(x, physicalWellbeing) → ¬(ConsciousAbout(x, health) ∧ ConsciousAbout(x, eatingHabit)))","output":"All people who disregard their physical well-being are not very conscious about their health and eating habits."}
{"input":"∀x (VisitDaily(x, gym) → Fulfill(x, dailyNutritionalIntake))","output":"If people visit the gym at least once a day, then they always fulfill their daily nutritional intakes."}
{"input":"¬(GrowUpIn(taylor, health-consciousChildhoodHome) ⊕ Disregard(taylor, physicalWellbeing))","output":"Taylor either grew up in a health-conscious childhood home and disregard her physical well-being, or she did neither."}
{"input":"SportingEvent(olympics)","output":"The summer Olympic games is a sporting event. "}
{"input":"LastSummerOlympics(tokyo)","output":"The last summer Olympic games was in Tokyo."}
{"input":"MostMedals(unitedStates, tokyo)","output":"The United States won the most medals in Tokyo. "}
{"input":"∀x (Horse(x) → ∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z)))","output":"All horses have hooves."}
{"input":"∀x (Human(x) → ¬(∃y ∃z (¬(y=z) ∧ Hoof(y) ∧ Hoof(z) ∧ Have(x, y) ∧ Have(x, z))))","output":"No humans have hooves."}
{"input":"FlyTo(susan, lgaAirport)","output":"Susan flies to LGA airport."}
{"input":"∀x ∀y (FlyFrom(x, y) ⊕ FlyTo(x, y))","output":"The departure and arrival can not be at the same airport."}
{"input":"FlyFrom(john, lgaAirport)","output":"John flies from LGA airport."}
{"input":"∀x (NiceTo(x, animal) → ¬MeanTo(x, animal))","output":"No one nice to animals is also mean to animals."}
{"input":"∃x (Grumpy(x) ∧ MeanTo(x, animal))","output":"Some grumpy people are mean to animals."}
{"input":"∀x (AnimalLover(x) → NiceTo(x, animal))","output":"All animal lovers are nice to animals."}
{"input":"∀x (PetOwner(x) → AnimalLover(x))","output":"All pet owners love animals."}
{"input":"PetOwner(tom)","output":"Tom is a pet owner."}
{"input":"∀x (Podcast(x) → ¬Novel(x))","output":"A podcast is not a novel."}
{"input":"∀x((∃y(BornIn(x, y) ∧ City(y) ∧ LocatedIn(y,america)) → American(x))","output":"If a person is born in American City, the person is American."}
{"input":"∀x ∀y ((Novel(x) ∧ WrittenBy(x, y)) → WritesNovel(y))","output":"If a book is a novel and it is written by a person, then the person is a novel writer."}
{"input":"American(dani_Shapiro) ∧ Writer(dani_Shapiro)","output":"Dani Shapiro is an American writer."}
{"input":"WrittenBy(family_History, dani_Shapiro)","output":"Family History is written by Dani Shapiro."}
{"input":"Novel(family_History) ∧ WrittenIn(family_History, yr2003)","output":"Family History is a novel written in 2003."}
{"input":"Podcast(family_Secrets) ∧ CreatedBy(family_Secrets, dani_Shapiro)","output":"Dani Shapiro created a podcast called Family Secrets."}
{"input":"City(boston) ∧ American(boston)","output":"Boston is an American city."}
{"input":"∃x (Professional(x) ∧ BasketballPlayer(x) ∧ ¬AmericanNational(x))","output":"Some professional basketball players are not American nationals."}
{"input":"∀x (Professional(x) ∧ BasketballPlayer(x) → CanDo(x, jumpShot))","output":"All professional basketball players can do jump shots."}
{"input":"∀x (CanDo(x, jumpShot) → LeapStraightIntoAir(x))","output":"If someone can jump shots, they leap straight into the air."}
{"input":"∀x (LeapStraightIntoAir(x) → Activate(x, legMuscle))","output":"If someone leaps straight into the air, they activate their leg muscles. "}
{"input":"¬Activate(yuri, legMuscle)","output":"Yuri does not activate his leg muscles."}
{"input":"∀x (Event(x) → Happy(x) ⊕ Sad(x))","output":"Events are either happy or sad."}
{"input":"∃x (Event(x) ∧ Happy(x)) ","output":"At least one event is happy. "}
{"input":"WinnerOf(steinhauer, duMaurierClassic, year1992)","output":"The winner of the 1992 du Maurier Classic was Steinhauer."}
{"input":"Participate(duMaurierClassic, steinhauer, year1992)","output":"Steinhauer participated in the 1992 du Maurier Classic."}
{"input":"∃x ∃y (OnLeaderBoardOf(x, duMaurierClassic) ∧ SixWayTie(x)) ∧ In(y, sixWayTie) ∧ Belgium(y))","output":"One six-way tie was on the leaderboard, and one person in the six-way tie was from Belgium."}
{"input":"From(descampe, belgium) ∧ OnLeaderBoardOf(descampe, duMaurierClassic)","output":"Descampe is from Belgium and is on the leaderboard of the 1992 du Maurier Classic."}
{"input":"∀x (LeaderBoard(maurier, x) → Participate(maurier, x))","output":"All people on the leaderboard of the 1992 du Maurier Classic participated in the 1992 du Maurier Classic."}
{"input":"∀x (Animal(x) ∧ Bark(x) → ¬Like(jane, x))","output":"Jane does not like any animals that bark."}
{"input":"∀x (Dog(x) → Animal(x) ∧ Bark(x))","output":"All dogs are animals that bark."}
{"input":"∀x (Animal(x) ∧ Jump(x) → Like(jane, x))","output":"Jane likes all animals that jump."}
{"input":"∀x (∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)) → Jump(x))","output":"If an animal has legs, then it jumps."}
{"input":"∀x (Terricolous(x) → ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(x, y) ∧ Have(x, z)))","output":"If an animal is terricolous, then it has legs. "}
{"input":"Animal(kiki)","output":"KiKi is an animal."}
{"input":"¬Jump(kiki) ∧ ¬(∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))) → Terricolous(kiki) ∨ ∃y ∃z (¬(y=z) ∧ Leg(y) ∧ Leg(z) ∧ Have(kiki, y) ∧ Have(kiki, z))","output":"If KiKi neither jumps nor has legs, then KiKi is terricolous or has legs."}
{"input":"BornIn(ailtonSilva, year1995) ∧ CommonlyKnownAs(ailtonSilva, ailton)","output":"Ailton Silva, born in 1995, is commonly known as Ailton."}
{"input":"FootballPlayer(ailton) ∧ LoanedTo(ailton, braga)","output":"Ailton is a football player who was loaned out to Braga."}
{"input":"Brazilian(ailtonSilva) ∧ Footballplayer(ailtonSilva) ∧ PlayFor(ailtonSilva, nautico)","output":"Ailton Silva is a Brazilian footballer who plays for Náutico."}
{"input":"FootballClub(nautico) ∧ FootballClub(braga)","output":"Náutico is a football club along with Braga."}
{"input":"FootballClub(fluminense)","output":"Fluminense is a football club."}
